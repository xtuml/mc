-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("56998698-5cbd-405c-920e-291faf20126c",
	'type',
	3751,
	'type',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("b7dd3c52-3a6c-4cea-b528-2625ea83d95d",
	"56998698-5cbd-405c-920e-291faf20126c",
	'render',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'if ( "MASL" == genfile::architecture() )
  // Add the Descrip field as a comment.
  select many descrips related by self->markable[R3783]->element[R3786]->description[R3796];
  for each descrip in descrips
    descrip.render();
  end for;
end if;

self.rendered = true;
select many references related by self->reference[R3777.''is_referenced_by''];
for each reference in references
  reference.resolved = true;
end for;
select one markable related by self->markable[R3783];

select one enumeration related by self->enumeration[R3751];
select one structure related by self->structure[R3751];
if ( not_empty enumeration )
  if ( ( "Time_Unit" == self.name ) and ( "WASL" == genfile::architecture() ) )
    // Skip Time_Unit in WASL.
  else
    enumeration.render();
  end if;
elif ( not_empty structure )
  structure.render();
else
  // UDTs
  if ( "MASL" == genfile::architecture() )
    T::include( file:"masl/t.type_begin.masl" );
  end if;
  select one constraint related by self->constraint[R3751];
  if ( not_empty constraint )
    // MASL does not support MASL native type constraints, only marked with pragmas.
    if ( "WASL" == genfile::architecture() )
      constraint.render();
    end if;
  end if;
  if ( "MASL" == genfile::architecture() )
    T::include( file:"masl/t.type_end.masl" );
  end if;
end if;

if ( "MASL" == genfile::architecture() )
  markable.render_marking( list:"default" );
end if;
',
	1,
	'',
	"2305aec8-9f7e-4a17-aa22-efb75d88ee24",
	0,
	0);
INSERT INTO O_TFR
	VALUES ("0815bcd4-c756-4bb7-9299-0e92ec85bbcd",
	"56998698-5cbd-405c-920e-291faf20126c",
	'populate',
	'',
	"e12ff5a2-a2e3-47fc-ac86-3e549ed59035",
	0,
	'domain = param.domain;
select any type related by domain->type[R3719] where ( selected.name == param.name );
if ( empty type )
  create object instance type of type;
  type.name = param.name;
  type.visibility = param.visibility;
  type.body = param.body; // This holds the string body of the type definition.
  type.rendered = false;
  type.declared_forward = false;
  type.lcount = 0;
  // Skip the type miner when nothing to mine.
  if ( "" != type.body )
    type.lcount = typeminer::referreds( name:type.name, body:type.body, labels:type.labels );
  end if;
  relate type to domain across R3719;
  markable = markable::populate( name:"type" );
  relate type to markable across R3783;
end if;
return type;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("510c49ab-e667-498b-ab0a-9aeb37c96665",
	"0815bcd4-c756-4bb7-9299-0e92ec85bbcd",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"304f7b58-e73d-42ac-82b5-77828b9d0959",
	'');
INSERT INTO O_TPARM
	VALUES ("304f7b58-e73d-42ac-82b5-77828b9d0959",
	"0815bcd4-c756-4bb7-9299-0e92ec85bbcd",
	'domain',
	"baca163b-e8d7-44c7-b0e0-61776ffb7cae",
	0,
	'',
	"22144d30-5e43-44d9-8a89-61ba5cdde66a",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("baca163b-e8d7-44c7-b0e0-61776ffb7cae",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<domain>',
	'',
	'',
	'../../masl/masl.xtuml');
INSERT INTO O_TPARM
	VALUES ("6aa68c11-a83e-4ce6-a969-4dba28dff993",
	"0815bcd4-c756-4bb7-9299-0e92ec85bbcd",
	'visibility',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"510c49ab-e667-498b-ab0a-9aeb37c96665",
	'');
INSERT INTO O_TPARM
	VALUES ("22144d30-5e43-44d9-8a89-61ba5cdde66a",
	"0815bcd4-c756-4bb7-9299-0e92ec85bbcd",
	'body',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6aa68c11-a83e-4ce6-a969-4dba28dff993",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e12ff5a2-a2e3-47fc-ac86-3e549ed59035",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<type>',
	'',
	'',
	'../masltypes.xtuml');
INSERT INTO O_TFR
	VALUES ("5b986c98-201f-430d-8adc-56c14bb3ace5",
	"56998698-5cbd-405c-920e-291faf20126c",
	'validate',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'valid = true;

// validate name
if ( "" == self.name )
  TRACE::log( flavor:"failure", id:101, message:"type has no name." );
  valid = false;
  return valid;		// short circuit
end if;

// validate visibility
if ( "public" != self.visibility and "private" != self.visibility )
  TRACE::log( flavor:"failure", id:101, message:"invalid visibility for routine: " + self.visibility );
  valid = false;
  return valid;		// short circuit
end if;

// validate body
if ( "" == self.body )
  TRACE::log( flavor:"failure", id:101, message:"type has no body." );
  valid = false;
  return valid;		// short circuit
end if;

select many child_pragma_lists related by self->markable[R3783]->pragma_list[R3782];
for each pragma_list in child_pragma_lists
  valid = pragma_list.validate();
  if ( false == valid )
    return valid;	// short circuit
  end if;
end for;

return valid;',
	1,
	'',
	"2001763c-11c6-4ec8-acc1-baebed654580",
	0,
	0);
INSERT INTO O_TFR
	VALUES ("2001763c-11c6-4ec8-acc1-baebed654580",
	"56998698-5cbd-405c-920e-291faf20126c",
	'tostring',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'value[7] = "";
emptyvalue[7] = ""; emptyvalue[6] = ""; emptyvalue[5] = ""; emptyvalue[4] = ""; emptyvalue[3] = ""; emptyvalue[2] = ""; emptyvalue[1] = ""; emptyvalue[0] = "";

value[0] = self.name;
value[1] = self.visibility;
value[2] = self.body;
out::tostring( element:"type", value:value );
out::tostring( element:"type", value:emptyvalue );',
	1,
	'',
	"5cf062ce-c54b-4592-bfe4-2a50894a96c8",
	0,
	0);
INSERT INTO O_TFR
	VALUES ("2305aec8-9f7e-4a17-aa22-efb75d88ee24",
	"56998698-5cbd-405c-920e-291faf20126c",
	'populate_references',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// First the MASL way.
i = self.lcount;
while ( i > 0 )
  i = i - 1;
  // Since name is a key, there can be only one type in this domain matching a given label.
  select any referred_type related by self->domain[R3719]->type[R3719] where ( selected.name == self.labels[ i ] );
  if ( not_empty referred_type )
    r = reference::populate( parent:self, child:referred_type );
  end if;
end while;
// Then the WASL way.
select many typerefs related by self->structure[R3751]->member[R3752.''has'']->typeref[R3753];
for each typeref in typerefs
  referred_type_name = typeref.body;
  // consider complex type references
  i = STRING::indexof(haystack: typeref.body, needle: " of ");
  if i != -1
    referred_type_name = STRING::substr(s: typeref.body, begin: i+4, end: -1);
  end if;
  select any referred_type related by self->domain[R3719]->type[R3719] where ( selected.name == referred_type_name );
  if ( not_empty referred_type )
    r = reference::populate( parent:self, child:referred_type );
  end if;
end for;',
	1,
	'',
	"0815bcd4-c756-4bb7-9299-0e92ec85bbcd",
	0,
	0);
INSERT INTO O_TFR
	VALUES ("e72c6670-d122-49cf-9711-2a3574dcf6b8",
	"56998698-5cbd-405c-920e-291faf20126c",
	'render_forward',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Render a forward declaration and mark myself so.
if ( not self.declared_forward )
  select one markable related by self->markable[R3783];
    T::include( file:"masl/t.type_fwd_decl.masl" );
    markable.render_marking( list:"declaration" );
  self.declared_forward = true;
end if;
select many references related by self->reference[R3777.''is_referenced_by''];
for each reference in references
  reference.resolved = true;
end for;',
	1,
	'',
	"b7dd3c52-3a6c-4cea-b528-2625ea83d95d",
	0,
	0);
INSERT INTO O_TFR
	VALUES ("55bd70c6-df59-4a18-8081-b055a6c4bd28",
	"56998698-5cbd-405c-920e-291faf20126c",
	'render_leaves',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'domain = param.domain;
count = 1;
select many types related by domain->type[R3719] where ( not selected.rendered );
if ( "public" == param.scope )
  // For the interface file, we render only public types.
  select many types related by domain->type[R3719] where ( ( not selected.rendered ) and ( selected.visibility == param.scope ) );
end if;
count = cardinality types;
prev_count = count + 1;
while ( count < prev_count )
  prev_count = count;
  for each type in types
    select any reference related by type->reference[R3777.''refers_to''] where ( not selected.resolved );
    if ( empty reference )
      if ( ( "public" == type.visibility ) or ( "private" == param.scope ) )
        type.render();
      end if;
    end if;
  end for;
  select many types related by domain->type[R3719] where ( not selected.rendered );
  if ( "public" == param.scope )
    // For the interface file, we render only public types.
    select many types related by domain->type[R3719] where ( ( not selected.rendered ) and ( selected.visibility == param.scope ) );
  end if;
  count = cardinality types;
end while;
return count;
',
	1,
	'',
	"e72c6670-d122-49cf-9711-2a3574dcf6b8",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("07e7b7d1-663b-4409-aa30-5000d1e4afd5",
	"55bd70c6-df59-4a18-8081-b055a6c4bd28",
	'domain',
	"baca163b-e8d7-44c7-b0e0-61776ffb7cae",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("7cde3b71-156a-4987-bf76-e18d44406de8",
	"55bd70c6-df59-4a18-8081-b055a6c4bd28",
	'scope',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"07e7b7d1-663b-4409-aa30-5000d1e4afd5",
	'');
INSERT INTO O_TFR
	VALUES ("5cf062ce-c54b-4592-bfe4-2a50894a96c8",
	"56998698-5cbd-405c-920e-291faf20126c",
	'render_all',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'domain = param.domain;

// Reset existing references.
select many references related by domain->reference[R3776.''contains''];
for each reference in references
  reference.resolved = false;
end for;
guard = cardinality references; // Limit the cycles of looping.
// Link up the references.
select many types related by domain->type[R3719];
if ( "public" == param.scope )
  // For the interface file, we render only public types.
  select many types related by domain->type[R3719] where ( selected.visibility == param.scope );
end if;
for each type in types
  type.rendered = false;
  type.declared_forward = false;
  type.populate_references();
end for;

// Provide forward declarations for self-referential types.
select many references related by domain->reference[R3776.''contains''] where ( selected.parent_name == selected.child_name );
for each reference in references
  select one type related by reference->type[R3777.''refers_to''];
  if ( ( not type.rendered ) and ( ( "public" == type.visibility ) or ( "private" == param.scope ) ) )
    type.render_forward();
  end if;
end for;

// Render leaf types (those with no unresolved references).
while ( 0 < type::render_leaves( domain:domain, scope:param.scope ) )
  // Break a cycle by selecting any referenced type and resolving it.
  select any reference related by domain->reference[R3776] where ( not selected.resolved );
  select one type related by reference->type[R3777.''refers_to''];
  if ( not_empty type )
    if ( ( "public" == type.visibility ) or ( "private" == param.scope ) )
      type.render_forward();
    end if;
  else
    TRACE::log( flavor:"failure", id:121, message:"did not find cyclic unresolved type" );
  end if;
  guard = guard - 1;
  if ( 0 == guard )
    TRACE::log( flavor:"failure", id:122, message:"did not break cycles" );
    break;
  end if;
end while;',
	1,
	'',
	"55bd70c6-df59-4a18-8081-b055a6c4bd28",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("96a97a2b-48c5-4747-9ae6-e1a270e7c154",
	"5cf062ce-c54b-4592-bfe4-2a50894a96c8",
	'domain',
	"baca163b-e8d7-44c7-b0e0-61776ffb7cae",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("51c348fc-2494-41c4-9d92-9e81b02cec27",
	"5cf062ce-c54b-4592-bfe4-2a50894a96c8",
	'scope',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"96a97a2b-48c5-4747-9ae6-e1a270e7c154",
	'');
INSERT INTO O_NBATTR
	VALUES ("5e32207e-907b-433a-96bc-6d26e98067dc",
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO O_BATTR
	VALUES ("5e32207e-907b-433a-96bc-6d26e98067dc",
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO O_ATTR
	VALUES ("5e32207e-907b-433a-96bc-6d26e98067dc",
	"56998698-5cbd-405c-920e-291faf20126c",
	"00000000-0000-0000-0000-000000000000",
	'name',
	'',
	'',
	'name',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("979a39c9-0bf7-4d9d-b2d1-7e6565fc61ce",
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO O_BATTR
	VALUES ("979a39c9-0bf7-4d9d-b2d1-7e6565fc61ce",
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO O_ATTR
	VALUES ("979a39c9-0bf7-4d9d-b2d1-7e6565fc61ce",
	"56998698-5cbd-405c-920e-291faf20126c",
	"5e32207e-907b-433a-96bc-6d26e98067dc",
	'visibility',
	'',
	'',
	'visibility',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("36193e21-77c9-4afb-8061-b8f18d3807f1",
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO O_BATTR
	VALUES ("36193e21-77c9-4afb-8061-b8f18d3807f1",
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO O_ATTR
	VALUES ("36193e21-77c9-4afb-8061-b8f18d3807f1",
	"56998698-5cbd-405c-920e-291faf20126c",
	"979a39c9-0bf7-4d9d-b2d1-7e6565fc61ce",
	'body',
	'',
	'',
	'body',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("59db881e-073a-4777-b55a-e652d8069752",
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO O_BATTR
	VALUES ("59db881e-073a-4777-b55a-e652d8069752",
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO S_DIM
	VALUES (1024,
	0,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"56998698-5cbd-405c-920e-291faf20126c",
	"59db881e-073a-4777-b55a-e652d8069752",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"35b0744a-1682-42ec-b6c8-30d1c5b4bcc9",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_ATTR
	VALUES ("59db881e-073a-4777-b55a-e652d8069752",
	"56998698-5cbd-405c-920e-291faf20126c",
	"36193e21-77c9-4afb-8061-b8f18d3807f1",
	'labels',
	'',
	'',
	'labels',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'[label::max]',
	'');
INSERT INTO O_NBATTR
	VALUES ("22c60865-6828-4984-ba13-8084aefbdc26",
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO O_BATTR
	VALUES ("22c60865-6828-4984-ba13-8084aefbdc26",
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO O_ATTR
	VALUES ("22c60865-6828-4984-ba13-8084aefbdc26",
	"56998698-5cbd-405c-920e-291faf20126c",
	"59db881e-073a-4777-b55a-e652d8069752",
	'lcount',
	'',
	'',
	'lcount',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1136ff01-23a8-4358-a765-caa131cbbd5e",
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO O_BATTR
	VALUES ("1136ff01-23a8-4358-a765-caa131cbbd5e",
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO O_ATTR
	VALUES ("1136ff01-23a8-4358-a765-caa131cbbd5e",
	"56998698-5cbd-405c-920e-291faf20126c",
	"22c60865-6828-4984-ba13-8084aefbdc26",
	'rendered',
	'',
	'',
	'rendered',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3a4c2e76-b0c8-47dc-a6c9-17c5c7c19fac",
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO O_BATTR
	VALUES ("3a4c2e76-b0c8-47dc-a6c9-17c5c7c19fac",
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO O_ATTR
	VALUES ("3a4c2e76-b0c8-47dc-a6c9-17c5c7c19fac",
	"56998698-5cbd-405c-920e-291faf20126c",
	"1136ff01-23a8-4358-a765-caa131cbbd5e",
	'declared_forward',
	'',
	'',
	'declared_forward',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO O_OIDA
	VALUES ("5e32207e-907b-433a-96bc-6d26e98067dc",
	"56998698-5cbd-405c-920e-291faf20126c",
	0,
	'name');
INSERT INTO O_ID
	VALUES (1,
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO O_ID
	VALUES (2,
	"56998698-5cbd-405c-920e-291faf20126c");
INSERT INTO PE_PE
	VALUES ("56998698-5cbd-405c-920e-291faf20126c",
	1,
	"b25c01b0-4491-4a75-a109-e8e515d7c29b",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("b25c01b0-4491-4a75-a109-e8e515d7c29b",
	"0c88bc32-05c8-40cf-8e56-04848518b4a9",
	"0c88bc32-05c8-40cf-8e56-04848518b4a9",
	'masltypes',
	'',
	0,
	'../masltypes.xtuml');
