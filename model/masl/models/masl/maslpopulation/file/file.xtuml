-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("687ad4bd-4a01-4dc7-be97-70f02360f9c4",
	'file',
	3778,
	'file',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("4c11d43c-eebe-45da-af8c-2e21b2196111",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4",
	'render',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'element = param.element;
name = param.name;
if ( "project" == element )
  select many projects from instances of project where ( selected.name == name );
  if ( ( "*" == name ) or ( "" == name ) )
    select many projects from instances of project;
  end if;
  if ( empty projects )
    TRACE::log( flavor:"error", id:51, message:"could not render project:  " + name );
  else
    for each project in projects
      project.render();
      select one file related by project->markable[R3783]->element[R3786]->file[R3795];
      if ( not_empty file )
        // Project files go into a directory named after the project.
        file.directory( name:project.name );
        file.emit( name:project.name + ".prj" );
      end if;

	  // render all the activity files
      select many terminator_activities related by project->domain[R3701]->terminator[R3702]->routine[R3791]->activity[R3704];
      for each activity in terminator_activities
        select one file related by activity->markable[R3783]->element[R3786]->file[R3795];
        select one code_block related by activity->code_block[R3794];
        if ( not_empty file )
          destination = file.getname();
          // Domain files go into a directory named after the domain.
          file.directory( name:project.name );
          if ( empty code_block )	// generate a file stub
            file.gen( destination:destination );
          else						// activity exists, copy it
            file.copy( source:code_block.sourcefile, destination:destination );
          end if;
        end if;
      end for;

    end for;
  end if;
elif ( "domain" == element )
  select many domains from instances of domain where ( selected.name == name );
  if ( ( "*" == name ) or ( "" == name ) )
    select many domains from instances of domain;
  end if;
  if ( empty domains )
    TRACE::log( flavor:"error", id:52, message:"could not render domain:  " + name );
  else
    for each domain in domains
      domain.render();
      select one file related by domain->markable[R3783]->element[R3786]->file[R3795];
      if ( not_empty file )
        // Domain files go into a directory named after the domain.
        file.directory( name:domain.name );
        file.emit( name:domain.name + ".mod" );
        domain.render_interface();
        file.emit( name:domain.name + ".int" );
      end if;
      
      // render all the activity files
      select many domain_routines related by domain->routine[R3790]->activity[R3704];
      select many terminator_routines related by domain->terminator[R3702]->routine[R3791]->activity[R3704];
      select many class_ops related by domain->object[R3708]->operation[R3749]->activity[R3704];
      select many states related by domain->object[R3708]->state[R3750]->activity[R3704];
      // TODO once set addition is in place, I can do this in one for loop - LPS
      //activities = domain_routines + terminator_routines + class_ops + states;
      activities = domain_routines;
      for each activity in activities
        select one file related by activity->markable[R3783]->element[R3786]->file[R3795];
        select one code_block related by activity->code_block[R3794];
        if ( not_empty file )
          destination = file.getname();
          // Domain files go into a directory named after the domain.
          file.directory( name:domain.name );
          if ( empty code_block )	// generate a file stub
            select one class_op related by activity->operation[R3704];
            select one deferral related by class_op->subsuper[R3793];
            if ( empty class_op or ( not_empty class_op and empty deferral ) )
              file.gen( destination:destination );
            end if;
          else						// activity exists, copy it
            file.copy( source:code_block.sourcefile, destination:destination );
          end if;
        end if;
      end for;
      activities = terminator_routines;
      for each activity in activities
        select one file related by activity->markable[R3783]->element[R3786]->file[R3795];
        select one code_block related by activity->code_block[R3794];
        if ( not_empty file )
          destination = file.getname();
          // Domain files go into a directory named after the domain.
          file.directory( name:domain.name );
          if ( empty code_block )	// generate a file stub
            select one class_op related by activity->operation[R3704];
            select one deferral related by class_op->subsuper[R3793];
            if ( empty class_op or ( not_empty class_op and empty deferral ) )
              file.gen( destination:destination );
            end if;
          else						// activity exists, copy it
            file.copy( source:code_block.sourcefile, destination:destination );
          end if;
        end if;
      end for;
      activities = class_ops;
      for each activity in activities
        select one file related by activity->markable[R3783]->element[R3786]->file[R3795];
        select one code_block related by activity->code_block[R3794];
        if ( not_empty file )
          destination = file.getname();
          // Domain files go into a directory named after the domain.
          file.directory( name:domain.name );
          if ( empty code_block )	// generate a file stub
            select one class_op related by activity->operation[R3704];
            select one deferral related by class_op->subsuper[R3793];
            if ( empty class_op or ( not_empty class_op and empty deferral ) )
              file.gen( destination:destination );
            end if;
          else						// activity exists, copy it
            file.copy( source:code_block.sourcefile, destination:destination );
          end if;
        end if;
      end for;
      activities = states;
      for each activity in activities
        select one file related by activity->markable[R3783]->element[R3786]->file[R3795];
        select one code_block related by activity->code_block[R3794];
        if ( not_empty file )
          destination = file.getname();
          // Domain files go into a directory named after the domain.
          file.directory( name:domain.name );
          if ( empty code_block )	// generate a file stub
            select one class_op related by activity->operation[R3704];
            select one deferral related by class_op->subsuper[R3793];
            if ( empty class_op or ( not_empty class_op and empty deferral ) )
              file.gen( destination:destination );
            end if;
          else						// activity exists, copy it
            file.copy( source:code_block.sourcefile, destination:destination );
          end if;
        end if;
      end for;

    end for;
  end if;
elif ( "" == element )	// render from the root
  select any population from instances of population;
  select one root_element related by population->element[R3785];
  if ( not_empty root_element )
    root_element.render();
  end if;
else
  TRACE::log( flavor:"error", id:53, message:"unrecognized element type on render interface:  " + element );
end if;
',
	1,
	'',
	"af1a8b7d-4b4c-49f8-814a-e7ac1cb47c52");
INSERT INTO O_TPARM
	VALUES ("e5cf8b40-420d-4501-88bd-ebcfca9f7251",
	"4c11d43c-eebe-45da-af8c-2e21b2196111",
	'element',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("ef19dc39-fe10-4b07-a157-d4ab1bc5976b",
	"4c11d43c-eebe-45da-af8c-2e21b2196111",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e5cf8b40-420d-4501-88bd-ebcfca9f7251",
	'');
INSERT INTO O_TFR
	VALUES ("a7863684-8575-4990-b290-dce44c1b53df",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4",
	'validate',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'valid = true;

// get root element
select any population from instances of population;
select one root_element related by population->element[R3785];
if ( empty root_element )
  TRACE::log( flavor:"warning", id:90, message:"no root element in validate" );
end if;

// validate
valid = root_element.validate();

if ( not valid )
  TRACE::log( flavor:"failure", id:91, message:"model did not validate" );
end if;',
	1,
	'',
	"4c11d43c-eebe-45da-af8c-2e21b2196111");
INSERT INTO O_TFR
	VALUES ("af1a8b7d-4b4c-49f8-814a-e7ac1cb47c52",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4",
	'populate',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'element = param.element;
name = param.name;
if ( "project" == name or 
     "domain" == name or
     "routine" == name or "operation" == name or "state" == name )
  create object instance file of file;
  relate file to element across R3795;
else
  // no file needed
end if;
',
	1,
	'',
	"0652aa1a-382c-4f76-b3b5-f382ef04ba69");
INSERT INTO O_TPARM
	VALUES ("d350bed6-dabc-4263-9eea-a69fcc05e73e",
	"af1a8b7d-4b4c-49f8-814a-e7ac1cb47c52",
	'element',
	"3989a0a6-1287-4fd5-9b4c-6f98e273a076",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("3989a0a6-1287-4fd5-9b4c-6f98e273a076",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<element>',
	'',
	'',
	'../maslpopulation.xtuml');
INSERT INTO O_TPARM
	VALUES ("6c8f49be-0ccb-4b8a-ae38-a983e455e4a4",
	"af1a8b7d-4b4c-49f8-814a-e7ac1cb47c52",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d350bed6-dabc-4263-9eea-a69fcc05e73e",
	'');
INSERT INTO O_TFR
	VALUES ("0652aa1a-382c-4f76-b3b5-f382ef04ba69",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4",
	'outfolder',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'select many files from instances of file;
for each file in files
  if ( "" == file.directory )
    file.directory = param.name;
  else
    file.directory = file.directory + "/" + param.name;
  end if;
end for;',
	1,
	'',
	"e5b94764-401e-406c-b9a9-fa2a5bc4fce0");
INSERT INTO O_TPARM
	VALUES ("99921c31-1323-40cf-a690-4971823e7fb4",
	"0652aa1a-382c-4f76-b3b5-f382ef04ba69",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("2f147788-5a86-4450-bedd-f6c445ca097c",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4",
	'emit',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'self.name = param.name;
fullfilename = self.name;
if ( "stdout" == self.directory )
  fullfilename = "stdout";
elif ( "" != self.directory )
  fullfilename = self.directory + "/" + self.name;
end if;
T::emit( file:fullfilename );',
	1,
	'',
	"5cd5b315-bca4-4e80-ba18-2427ea690ab7");
INSERT INTO O_TPARM
	VALUES ("1e4e6c03-8024-460f-b234-2e3697d13d06",
	"2f147788-5a86-4450-bedd-f6c445ca097c",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("5cd5b315-bca4-4e80-ba18-2427ea690ab7",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4",
	'directory',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'if ( "" == self.directory )
  self.directory = param.name;
else
  self.directory = self.directory + "/" + param.name;
end if;',
	1,
	'',
	"e4bb4b34-0329-4346-a4bf-632ffa0ad30b");
INSERT INTO O_TPARM
	VALUES ("29043fa1-8c39-4370-9b32-3c885eaddb8a",
	"5cd5b315-bca4-4e80-ba18-2427ea690ab7",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("e4bb4b34-0329-4346-a4bf-632ffa0ad30b",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4",
	'copy',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'source = param.source;
destination = param.destination;
if ( "" != self.projectroot )
  source = self.projectroot + "/models/" + source;
end if;
if ( "" != self.directory )
  destination = self.directory + "/" + destination;
end if;
T::copyfile( source:source, destination:destination );',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("f291b218-90cf-440e-82d5-4f62b49dd9fa",
	"e4bb4b34-0329-4346-a4bf-632ffa0ad30b",
	'source',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("80fbdb8a-5c53-41f7-943b-5f0d691fd1ad",
	"e4bb4b34-0329-4346-a4bf-632ffa0ad30b",
	'destination',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f291b218-90cf-440e-82d5-4f62b49dd9fa",
	'');
INSERT INTO O_TFR
	VALUES ("e5b94764-401e-406c-b9a9-fa2a5bc4fce0",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4",
	'infolder',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'select many files from instances of file;
for each file in files
  file.projectroot = param.name;
end for;',
	1,
	'',
	"2f147788-5a86-4450-bedd-f6c445ca097c");
INSERT INTO O_TPARM
	VALUES ("766ebdb8-8e48-489a-8926-e257a758062f",
	"e5b94764-401e-406c-b9a9-fa2a5bc4fce0",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("5184e566-c21d-4e41-adf8-4be0bb366c90",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4",
	'getname',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'/** Naming convention:
  *
  * Domain Model: <domain name>.mod
  * Domain Interface: <domain name>.int
  *  
  * Domain Service: <service name>.svc
  * Domain Function: <function name>.fn
  * Domain External: <external name>.ext (domain service with pragma external)
  * Domain Scenario: <external name>.scn (domain service with pragma scenario)
  *  
  * Object/Instance Service: <object kl>_<service name>.svc
  * Object/Instance Function: <object kl>_<function name>.fn
  * State Action: <object kl>_<state name>.al
  *  
  * Terminator Service: <terminator kl>_<service name>.tr
  * Terminator Function: <terminator kl>_<service name>.tr (yes, this is inconsistent with other functions!)
  *  
  * Project Model: <project name>.prj
  * Project Terminator Service: <domain name>_<terminator kl>_<service name>.tr
  *
  * Also, if any of the services and functions have more than one definition with the same name
  * (but different signatures) the filename has an overload number appended before the
  * extension for the second and subsequent occurrences.
  * 
  * For example:
  *   public service log ( message : in string );
  *   public service log ( message : in string, arg1 : in string );
  *   public service log ( message : in string, arg1 : in string, arg2 : in string );
  * 
  * would have files named log.svc, log_1.svc and log_2.svc respectively, as per the order the
  * definitions occur in the .mod file.
  * 
  * Also, a filename can be overridden with a pragma filename("another_file.aaa") after the
  * declaration in the mod file, which trumps everything else (we tend to do this for overloads,
  * as it is less flaky)
  */
  
name = "";

select any activity related by self->element[R3795]->markable[R3786]->activity[R3783];
if ( not_empty activity )

  // check for filename pragma
  select any filename_pragma related by activity->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "filename" );
  select any pragma_item related by filename_pragma->pragma_item[R3780];
  if ( not_empty pragma_item )
    fn_len = STRING::strlen( s:pragma_item.value );
	name = STRING::substr( s:pragma_item.value, begin: 1, end: fn_len - 1 );
  else
	select one routine related by activity->routine[R3704];
	select one operation related by activity->operation[R3704];
	select one state related by activity->state[R3704];
	
	if ( not_empty routine )
	  select one terminator related by routine->terminator[R3791];
	  select one returntype related by routine->typeref[R3792];
	  if ( empty terminator )			// domain routine
		select any scn_pragma related by activity->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "scenario" );
		select any ext_pragma related by activity->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "external" );
		if ( not_empty scn_pragma )	// domain scenario
		  name = activity.name + ".scn";
		elif ( not_empty ext_pragma )	// domain external
		  name = activity.name + ".ext";
		elif ( not_empty returntype )	// domain function
		  name = activity.name + ".fn";
		else							// domain service
		  name = activity.name + ".svc";
		end if;
	  else							// terminator routine
		select one project related by terminator->domain[R3702]->project[R3701];
		select any pragma related by terminator->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "key_letter" );
		select any pragma_item related by pragma->pragma_item[R3780];
		key_letters = "";
		if ( empty pragma_item )
		  key_letters = terminator.name;
		else
		  kl_len = STRING::strlen( s:pragma_item.value );
		  key_letters = STRING::substr( s:pragma_item.value, begin: 1, end: kl_len - 1 );
		end if;
		if ( empty project )			// domain terminator
		  name = key_letters + "_" + activity.name + ".tr";
		else							// project terminator
		  select one domain related by terminator->domain[R3702];
		  name = domain.name + "_" + key_letters + "_" + activity.name + ".tr";
		end if;
	  end if;
	elif ( not_empty operation )
	  select one returntype related by operation->typeref[R3741];
	  select any pragma related by operation->object[R3749]->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "key_letter" );
	  select any pragma_item related by pragma->pragma_item[R3780];
	  key_letters = "";
	  if ( empty pragma_item )
		select one obj related by operation->object[R3749];
		key_letters = obj.name;
	  else
		kl_len = STRING::strlen( s:pragma_item.value );
		key_letters = STRING::substr( s:pragma_item.value, begin: 1, end: kl_len - 1 );
	  end if;
	  if ( not_empty returntype )			// object function
		name = key_letters + "_" + activity.name + ".fn";
	  else								// object service
		name = key_letters + "_" + activity.name + ".svc";
	  end if;
	elif ( not_empty state )
	  select one returntype related by operation->typeref[R3741];
	  select any pragma related by state->object[R3750]->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "key_letter" );
	  select any pragma_item related by pragma->pragma_item[R3780];
	  key_letters = "";
	  if ( empty pragma_item )
		select one obj related by state->object[R3750];
		key_letters = obj.name;
	  else
		kl_len = STRING::strlen( s:pragma_item.value );
		key_letters = STRING::substr( s:pragma_item.value, begin: 1, end: kl_len - 1 );
	  end if;
	  name = key_letters + "_" + activity.name + ".al";
	end if;
  
  end if;

end if;

// check for a duplicate name
// TODO this handles overloading which is not yet supported in MASL
select any dup_file from instances of file where ( selected.name == name );
overload = 1;
orig_name = name;
while ( not_empty dup_file )

  // process name
  i = STRING::indexof( haystack:orig_name, needle:"." );
  len = STRING::strlen( s:orig_name );
  base = STRING::substr( s:orig_name, begin:0, end:i );
  ext = STRING::substr( s:orig_name, begin:i, end:len );
  str_num = STRING::itoa( i:overload );
  
  // set name
  name = base + "_" + str_num + ext;
  
  // increment overload number
  overload = overload + 1;
  
  // retry selection
  select any dup_file from instances of file where ( selected.name == name );

end while;

self.name = name;
return name;',
	1,
	'',
	"a7863684-8575-4990-b290-dce44c1b53df");
INSERT INTO O_TFR
	VALUES ("f03f6367-a1ba-4db1-a427-380dbbbb9806",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4",
	'gen',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'destination = param.destination;
doEmit = false;

select any activity related by self->element[R3795]->markable[R3786]->activity[R3783];
if ( not_empty activity )

  select one routine related by activity->routine[R3704];
  select one operation related by activity->operation[R3704];
  select one state related by activity->state[R3704];
  
  if ( not_empty routine )
    select one terminator related by routine->terminator[R3791];
    select one returntype related by routine->typeref[R3792];
    if ( empty terminator )			// domain routine
      select one domain related by routine->domain[R3790];
      if ( not_empty returntype )	// domain function
		T::include( file:"masl/t.domain_function_stub_begin.masl" );
		select one parameter related by activity->parameter[R3705];
		if ( not_empty parameter )
		  parameter.render();
		end if;
		T::include( file:"masl/t.domain_function_stub_end.masl" );
	    doEmit = true;
      else							// domain service
		T::include( file:"masl/t.domain_service_stub_begin.masl" );
		select one parameter related by activity->parameter[R3705];
		if ( not_empty parameter )
		  parameter.render();
		end if;
		T::include( file:"masl/t.domain_service_stub_end.masl" );
	    doEmit = true;
      end if;
    else							// terminator routine
      select one domain related by terminator->domain[R3702];
      if ( not_empty returntype )	// terminator function
		T::include( file:"masl/t.terminator_function_stub_begin.masl" );
		select one parameter related by activity->parameter[R3705];
		if ( not_empty parameter )
		  parameter.render();
		end if;
		T::include( file:"masl/t.terminator_function_stub_end.masl" );
	    doEmit = true;
      else							// terminator service
		T::include( file:"masl/t.terminator_service_stub_begin.masl" );
		select one parameter related by activity->parameter[R3705];
		if ( not_empty parameter )
		  parameter.render();
		end if;
		T::include( file:"masl/t.terminator_service_stub_end.masl" );
	    doEmit = true;
      end if;
    end if;
  elif ( not_empty operation )
    select one returntype related by operation->typeref[R3741];
    select one object related by operation->object[R3749];
    select one domain related by object->domain[R3708];
	if ( not_empty returntype )			// object function
	  T::include( file:"masl/t.object_function_stub_begin.masl" );
	  select one parameter related by activity->parameter[R3705];
	  if ( not_empty parameter )
	    parameter.render();
	  end if;
	  T::include( file:"masl/t.object_function_stub_end.masl" );
	  doEmit = true;
	else								// object service
	  T::include( file:"masl/t.object_service_stub_begin.masl" );
	  select one parameter related by activity->parameter[R3705];
	  if ( not_empty parameter )
	    parameter.render();
	  end if;
	  T::include( file:"masl/t.object_service_stub_end.masl" );
	  doEmit = true;
	end if;
  elif ( not_empty state and not state.non_existent )
    select one returntype related by operation->typeref[R3741];
    select one object related by state->object[R3750];
    select one domain related by object->domain[R3708];
	T::include( file:"masl/t.object_state_stub_begin.masl" );
	select one parameter related by activity->parameter[R3705];
	if ( not_empty parameter )
	  parameter.render();
	end if;
	T::include( file:"masl/t.object_state_stub_end.masl" );
	doEmit = true;
  end if;

end if;

if ( doEmit )
  self.emit( name:destination );
end if;',
	1,
	'',
	"5184e566-c21d-4e41-adf8-4be0bb366c90");
INSERT INTO O_TPARM
	VALUES ("7bb1295c-b375-4c50-9c1e-efd5bb085697",
	"f03f6367-a1ba-4db1-a427-380dbbbb9806",
	'destination',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_NBATTR
	VALUES ("5256ef06-1883-421b-9b6b-05abea717422",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4");
INSERT INTO O_BATTR
	VALUES ("5256ef06-1883-421b-9b6b-05abea717422",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4");
INSERT INTO O_ATTR
	VALUES ("5256ef06-1883-421b-9b6b-05abea717422",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4",
	"00000000-0000-0000-0000-000000000000",
	'name',
	'',
	'',
	'name',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("9cefce8b-496f-41de-bc4f-f7b0cc6613de",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4");
INSERT INTO O_BATTR
	VALUES ("9cefce8b-496f-41de-bc4f-f7b0cc6613de",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4");
INSERT INTO O_ATTR
	VALUES ("9cefce8b-496f-41de-bc4f-f7b0cc6613de",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4",
	"5256ef06-1883-421b-9b6b-05abea717422",
	'directory',
	'',
	'',
	'directory',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("0ec02753-0eda-42e2-a42a-65c03c9ebc59",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4");
INSERT INTO O_BATTR
	VALUES ("0ec02753-0eda-42e2-a42a-65c03c9ebc59",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4");
INSERT INTO O_ATTR
	VALUES ("0ec02753-0eda-42e2-a42a-65c03c9ebc59",
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4",
	"9cefce8b-496f-41de-bc4f-f7b0cc6613de",
	'projectroot',
	'',
	'',
	'projectroot',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4");
INSERT INTO O_ID
	VALUES (1,
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4");
INSERT INTO O_ID
	VALUES (2,
	"687ad4bd-4a01-4dc7-be97-70f02360f9c4");
INSERT INTO PE_PE
	VALUES ("687ad4bd-4a01-4dc7-be97-70f02360f9c4",
	1,
	"d432b434-2811-4b2d-92d2-5c964f00b191",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("d432b434-2811-4b2d-92d2-5c964f00b191",
	"0c88bc32-05c8-40cf-8e56-04848518b4a9",
	"0c88bc32-05c8-40cf-8e56-04848518b4a9",
	'maslpopulation',
	'',
	0,
	'../maslpopulation.xtuml');
