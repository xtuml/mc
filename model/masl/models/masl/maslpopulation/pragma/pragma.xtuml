-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("bd654b77-3ff1-445c-bca4-df6599e92ed2",
	'pragma',
	3713,
	'pragma',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("26e558f4-4c8e-4ddf-a140-8b13409ffb34",
	"bd654b77-3ff1-445c-bca4-df6599e92ed2",
	'render',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'T::include( file:"masl/t.pragma_begin.masl" );
select many pragma_items related by self->pragma_item[R3780];
separator = "";
for each pragma_item in pragma_items
  T::b( s:separator );
  pragma_item.render();
  separator = ", ";
end for;
T::include( file:"masl/t.pragma_end.masl" );',
	1,
	'',
	"a2751ebc-236b-471c-85b9-3fa412f91703",
	0,
	0);
INSERT INTO O_TFR
	VALUES ("a2751ebc-236b-471c-85b9-3fa412f91703",
	"bd654b77-3ff1-445c-bca4-df6599e92ed2",
	'populate',
	'',
	"fedbd69c-1013-4150-8595-97f557dea434",
	0,
	'element = param.element;

// get the pragma list
list_name = "";
if ( "" == param.list )
  list_name = "default";
else
  list_name = param.list;
end if;
select any pragma_list related by element->pragma_list[R3782] where ( selected.name == list_name );
if ( empty pragma_list )
  pragma_list = pragma_list::populate( name:list_name, element:element );
end if;

create object instance pragma of pragma;
pragma.name = param.name;
relate pragma to pragma_list across R3781;

unmarkable = unmarkable::populate( name:"pragma" );
relate pragma to unmarkable across R3788;

return pragma;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("0c8cc016-ea19-48a9-8ad4-833df1771dcb",
	"a2751ebc-236b-471c-85b9-3fa412f91703",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("778e5754-7fbc-40ea-b180-6a785ca1f4ad",
	"a2751ebc-236b-471c-85b9-3fa412f91703",
	'list',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0c8cc016-ea19-48a9-8ad4-833df1771dcb",
	'');
INSERT INTO O_TPARM
	VALUES ("8520699e-c8ef-4109-836b-aaa8d48ccb86",
	"a2751ebc-236b-471c-85b9-3fa412f91703",
	'element',
	"fd8da7a6-2f02-4846-958e-f29128812fc2",
	0,
	'',
	"778e5754-7fbc-40ea-b180-6a785ca1f4ad",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("fd8da7a6-2f02-4846-958e-f29128812fc2",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<markable>',
	'',
	'',
	'../maslpopulation.xtuml');
INSERT INTO S_DT_PROXY
	VALUES ("fedbd69c-1013-4150-8595-97f557dea434",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<pragma>',
	'',
	'',
	'../maslpopulation.xtuml');
INSERT INTO O_TFR
	VALUES ("75a7df50-2388-4bb4-b569-d82c95666375",
	"bd654b77-3ff1-445c-bca4-df6599e92ed2",
	'validate',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'valid = true;

// validate name
if ( "" == self.name )
  TRACE::log( flavor:"failure", id:101, message:"pragma has no name." );
  valid = false;
  return valid;		// short circuit
end if;

// validate children
select many child_pragma_items related by self->pragma_item[R3780];
for each pragma_item in child_pragma_items
  valid = pragma_item.validate();
  if ( false == valid )
    return valid;	// short circuit
  end if;
end for;

return valid;',
	1,
	'',
	"26e558f4-4c8e-4ddf-a140-8b13409ffb34",
	0,
	0);
INSERT INTO O_TFR
	VALUES ("c157056f-c992-4343-84e9-0c346c37ad28",
	"bd654b77-3ff1-445c-bca4-df6599e92ed2",
	'asl_extras',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'// Populate pragmas for elements required in ASL-to-MASL (ASL2MASL) conversion.

/*
public domain fuction (Provided Operation):  domain_operation_number
private domain fuction (Provided Operation):  scenario number
terminator service (Required Operation):  terminator_operation_number
terminator (Required Port):  key_letter
relationship:  Class_A/Class_B
object service:  operation_number
state:  state_number
event:  event_number
object:  id
object:  key_letter
domain:  number
domain:  name
domain:  kl
domain:  version
*/

select many domains from instances of domain;
for each domain in domains

  // Emit domain_operation_number for public domain functions.
  select many public_routines related by domain->routine[R3790] where ( selected.visibility == "public" );
  for each public_routine in public_routines
    select one markable related by public_routine->activity[R3704]->markable[R3783];
    select any pragma related by markable->pragma_list[R3782]->pragma[R3781] where ( selected.name == "domain_operation_number" );
    if ( empty pragma )
      pragma = pragma::populate( name:"domain_operation_number", list:"", element:markable );
      pragma_item::populate( value:STRING::itoa( i: public_routine.number ), pragma:pragma );
    end if;
  end for;

  // Emit scenario number for private domain functions.
  select many private_routines related by domain->routine[R3790] where ( selected.visibility == "private" );
  for each private_routine in private_routines
    select one markable related by private_routine->activity[R3704]->markable[R3783];
    select any scenario_pragma related by markable->pragma_list[R3782]->pragma[R3781] where ( selected.name == "scenario" );
    // Skip scenario pragma for externals.
    select any external_pragma related by markable->pragma_list[R3782]->pragma[R3781] where ( selected.name == "external" );
    if ( empty scenario_pragma and empty external_pragma )
      pragma = pragma::populate( name:"scenario", list:"", element:markable );
      pragma_item::populate( value:STRING::itoa( i: private_routine.number ), pragma:pragma );
    end if;
  end for;

  // Emit terminator_operation_number for all terminator services.
  select many terminator_routines related by domain->terminator[R3702]->routine[R3791];
  for each terminator_routine in terminator_routines
    select one markable related by terminator_routine->activity[R3704]->markable[R3783];
    select any pragma related by markable->pragma_list[R3782]->pragma[R3781] where ( selected.name == "terminator_operation_number" );
    if ( empty pragma )
      pragma = pragma::populate( name:"terminator_operation_number", list:"", element:markable );
      pragma_item::populate( value:STRING::itoa( i: terminator_routine.number ), pragma:pragma );
    end if;
  end for;

  // Emit terminator key letters for all terminators.
  select many terminators related by domain->terminator[R3702];
  for each terminator in terminators
    select one markable related by terminator->markable[R3783];
    select any pragma related by markable->pragma_list[R3782]->pragma[R3781] where ( selected.name == "key_letter" );
    if ( empty pragma )
      pragma = pragma::populate( name:"key_letter", list:"", element:markable );
      pragma_item::populate( value:STRING::quote() + terminator.key_letters + STRING::quote(), pragma:pragma );
    end if;
  end for;

  // Populate pragmas for object related elements.
  select many domain_objects related by domain->object[R3708];
  for each domain_object in domain_objects

    // Emit operation_number for all object services.
    select many operations related by domain_object->operation[R3749];
    for each operation in operations
      select one markable related by operation->activity[R3704]->markable[R3783];
      select any pragma related by markable->pragma_list[R3782]->pragma[R3781] where ( selected.name == "operation_number" );
      if ( empty pragma )
        pragma = pragma::populate( name:"operation_number", list:"", element:markable );
        pragma_item::populate( value:STRING::itoa( i:operation.number ), pragma:pragma );
      end if;
    end for;

    // Emit state_number for all object states.
    select many object_states related by domain_object->state[R3750];
    for each object_state in object_states

      select one state_activity related by object_state->activity[R3704];
      if ( "Non_Existent" != state_activity.name )
        select one markable related by object_state->activity[R3704]->markable[R3783];
        select any pragma related by markable->pragma_list[R3782]->pragma[R3781] where ( selected.name == "state_number" );
        if ( empty pragma )
          pragma = pragma::populate( name:"state_number", list:"", element:markable );
          pragma_item::populate( value:STRING::itoa( i:object_state.number ), pragma:pragma );
        end if;
      end if;
    end for;

    // Emit event_number for all object events.
    select many object_events related by domain_object->event[R3736];
    for each object_event in object_events
      select one markable related by object_event->markable[R3783];
      select any pragma related by markable->pragma_list[R3782]->pragma[R3781] where ( selected.name == "event_number" );
      if ( empty pragma )
        pragma = pragma::populate( name:"event_number", list:"", element:markable );
        pragma_item::populate( value:STRING::itoa( i:object_event.number ), pragma:pragma );
      end if;
    end for;

    // Emit key letters for object.
    select one markable related by domain_object->markable[R3783];
    select any pragma related by markable->pragma_list[R3782]->pragma[R3781] where ( selected.name == "key_letter" );
    if ( empty pragma )
      pragma = pragma::populate( name:"key_letter", list:"", element:markable );
      pragma_item::populate( value: STRING::quote() + domain_object.key_letters + STRING::quote(), pragma:pragma );
    end if;

    // Emit number for object.
    select one markable related by domain_object->markable[R3783];
    select any pragma related by markable->pragma_list[R3782]->pragma[R3781] where ( selected.name == "number" );
    if ( empty pragma )
      pragma = pragma::populate( name:"number", list:"", element:markable );
      pragma_item::populate( value:STRING::itoa( i:domain_object.number ), pragma:pragma );
    end if;

  end for;

  // Mark the domain itself.
  select one markable related by domain->markable[R3783];

  // Emit domain name.
  select any pragma related by markable->pragma_list[R3782]->pragma[R3781] where ( selected.name == "name" );
  if ( empty pragma )
    // TODO - name and key letters get switched for ASL
    pragma = pragma::populate( name:"name", list:"", element:markable );
    pragma_item::populate( value:STRING::quote() + domain.key_letters + STRING::quote(), pragma:pragma );
  end if;
  // Emit domain key letters.
  select any pragma related by markable->pragma_list[R3782]->pragma[R3781] where ( selected.name == "kl" );
  if ( empty pragma )
    // TODO - name and key letters get switched for ASL
    pragma = pragma::populate( name:"kl", list:"", element:markable );
    pragma_item::populate( value:STRING::quote() + domain.name + STRING::quote(), pragma:pragma );
  end if;

  // Emit domain number.
  select any pragma related by markable->pragma_list[R3782]->pragma[R3781] where ( selected.name == "number" );
  if ( empty pragma )
    pragma = pragma::populate( name:"number", list:"", element:markable );
    pragma_item::populate( value:"1", pragma:pragma ); // TODO:  hard-coded
  end if;

  // Emit domain version.
  select any pragma related by markable->pragma_list[R3782]->pragma[R3781] where ( selected.name == "version" );
  if ( empty pragma )
    pragma = pragma::populate( name:"version", list:"", element:markable );
    pragma_item::populate( value:domain.version, pragma:pragma );
  end if;

end for;
',
	1,
	'',
	"75a7df50-2388-4bb4-b569-d82c95666375",
	0,
	1);
INSERT INTO O_NBATTR
	VALUES ("3d6ffc15-15cb-4df1-a30a-8828c3961885",
	"bd654b77-3ff1-445c-bca4-df6599e92ed2");
INSERT INTO O_BATTR
	VALUES ("3d6ffc15-15cb-4df1-a30a-8828c3961885",
	"bd654b77-3ff1-445c-bca4-df6599e92ed2");
INSERT INTO O_ATTR
	VALUES ("3d6ffc15-15cb-4df1-a30a-8828c3961885",
	"bd654b77-3ff1-445c-bca4-df6599e92ed2",
	"00000000-0000-0000-0000-000000000000",
	'name',
	'',
	'',
	'name',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"bd654b77-3ff1-445c-bca4-df6599e92ed2");
INSERT INTO O_ID
	VALUES (1,
	"bd654b77-3ff1-445c-bca4-df6599e92ed2");
INSERT INTO O_ID
	VALUES (2,
	"bd654b77-3ff1-445c-bca4-df6599e92ed2");
INSERT INTO PE_PE
	VALUES ("bd654b77-3ff1-445c-bca4-df6599e92ed2",
	1,
	"d432b434-2811-4b2d-92d2-5c964f00b191",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("d432b434-2811-4b2d-92d2-5c964f00b191",
	"0c88bc32-05c8-40cf-8e56-04848518b4a9",
	"0c88bc32-05c8-40cf-8e56-04848518b4a9",
	'maslpopulation',
	'',
	0,
	'../maslpopulation.xtuml');
