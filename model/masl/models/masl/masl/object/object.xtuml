-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("c3fb5002-9e75-4ca6-bf1e-0bcad30ab495",
	'object',
	3710,
	'object',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("94d08134-61ae-4921-adee-96a5ef2d9522",
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495",
	'render',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'if ( "MASL" == genfile::architecture() )

select many descrips related by self->markable[R3783]->element[R3786]->description[R3796];
for each descrip in descrips
  descrip.render();
end for;

T::include( file:"masl/t.object_begin.masl" );

// Get first attribute.
// Bad data is possible.  Duplicate attributes names are allowed in the editor.  Protect here.
guard_counter = 0;
select any attribute related by self->attribute[R3709.''is characterized by''];
while ( not_empty attribute )
  select one prev_attribute related by attribute->attribute[R3797.''succeeds''];
  if ( empty prev_attribute )
    break;
  end if;
  assign attribute = prev_attribute;
  if ( guard_counter > 500 )
    TRACE::log( flavor:"error", id:191, message:"problem (duplicate?) with attributes in:  " + self.name );
    break;
  end if;
  guard_counter = guard_counter + 1;
end while;
// Iterate in order.
guard_counter = 0;
while ( not_empty attribute )
  attribute.render();
  select one attribute related by attribute->attribute[R3797.''precedes''];
  if ( guard_counter > 500 )
    TRACE::log( flavor:"error", id:192, message:"problem (duplicate?) with attributes in:  " + self.name );
    break;
  end if;
  guard_counter = guard_counter + 1;
end while;

select many identifiers related by self->identifier[R3711];
for each identifier in identifiers
  identifier.render();
end for;

select many operation_activities related by self->operation[R3749]->activity[R3704];
for each activity in operation_activities
  activity.render();
end for;

select many state_activities related by self->state[R3750]->activity[R3704];
for each activity in state_activities
  activity.render();
end for;

select many events related by self->event[R3736.''is triggered by''];
for each event in events
  event.render();
end for;

select many state_machines related by self->state_machine[R3734];
for each state_machine in state_machines
  state_machine.render();
end for;

T::include( file:"masl/t.object_end.masl" );

select one markable related by self->markable[R3783];
markable.render_marking( list:"default" );

elif ( "WASL" == genfile::architecture() )

  passive = "passive";
  select any sm related by self->state_machine[R3734];
  if ( not_empty sm )
    passive = "active";
  end if;

  T::include( file:"wasl/t.object_begin.wasl" );
  
  self.render_marking();
  
  select many attributes related by self->attribute[R3709.''is characterized by''];
  for each attribute in attributes
    attribute.render();
  end for;

  T::include( file:"wasl/t.object_end.wasl" );

else
  //
end if;
',
	1,
	'',
	"08a62993-0de5-465c-bb72-ba84e7590350",
	0,
	0);
INSERT INTO O_TFR
	VALUES ("08a62993-0de5-465c-bb72-ba84e7590350",
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495",
	'populate',
	'',
	"42488ce2-7c14-405b-ab4a-c6b5a73ef562",
	0,
	'// This routine can be called more than once.  It is designed
// to support creating an object with just the name or key letters
// and then being refined in a separate call with more detail.
// Each successive call must carry a superset of parameter data.
domain = param.domain;
name = param.name;
key_letters = param.key_letters;
number = param.number;
select any object related by domain->object[R3708.''has abstract''] where ( selected.name == name );
if ( "" == name )
  select any object related by domain->object[R3708.''has abstract''] where ( selected.key_letters == key_letters );
end if;
if ( empty object )
  create object instance object of object;
  relate domain to object across R3708.''has abstract'';
  markable = markable::populate( name:"object" );
  relate object to markable across R3783;
end if;
object.name = name;
object.key_letters = key_letters;
object.number = number;
return object;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("fe0bf592-4377-4dcc-8d5c-806c966de9bb",
	"08a62993-0de5-465c-bb72-ba84e7590350",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("9f200455-a0b6-4610-b986-c1cb925a5fa4",
	"08a62993-0de5-465c-bb72-ba84e7590350",
	'domain',
	"baca163b-e8d7-44c7-b0e0-61776ffb7cae",
	0,
	'',
	"414a5e69-7005-43af-a24f-7979cbce7e10",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("baca163b-e8d7-44c7-b0e0-61776ffb7cae",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<domain>',
	'',
	'',
	'../masl.xtuml');
INSERT INTO O_TPARM
	VALUES ("7a5f12b5-aa6c-40b8-9c2c-4c334c831ea8",
	"08a62993-0de5-465c-bb72-ba84e7590350",
	'key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fe0bf592-4377-4dcc-8d5c-806c966de9bb",
	'');
INSERT INTO O_TPARM
	VALUES ("414a5e69-7005-43af-a24f-7979cbce7e10",
	"08a62993-0de5-465c-bb72-ba84e7590350",
	'number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7a5f12b5-aa6c-40b8-9c2c-4c334c831ea8",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("42488ce2-7c14-405b-ab4a-c6b5a73ef562",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<object>',
	'',
	'',
	'../masl.xtuml');
INSERT INTO O_TFR
	VALUES ("3be1d39f-272d-4b30-9333-697e240f8611",
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495",
	'validate',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'valid = true;

// validate name
if ( "" == self.name )
  TRACE::log( flavor:"failure", id:101, message:"object has no name." );
  valid = false;
  return valid;		// short circuit
end if;

// validate attributes
select many child_attributes related by self->attribute[R3709.''is characterized by''];
for each attribute in child_attributes
  valid = attribute.validate();
  if ( false == valid )
    return valid;	// short circuit
  end if;
end for;

// validate identifiers
select many child_identifiers related by self->identifier[R3711];
for each identifier in child_identifiers
  valid = identifier.validate();
  if ( false == valid )
    return valid;	// short circuit
  end if;
end for;

// validate operations
select many child_operations related by self->operation[R3749];
for each operation in child_operations
  valid = operation.validate();
  if ( false == valid )
    return valid;	// short circuit
  end if;
end for;

// validate states
select many child_states related by self->state[R3750];
for each state in child_states
  valid = state.validate();
  if ( false == valid )
    return valid;	// short circuit
  end if;
end for;

// validate events
select many child_events related by self->event[R3736.''is triggered by''];
for each event in child_events
  valid = event.validate();
  if ( false == valid )
    return valid;	// short circuit
  end if;
end for;

// validate state machines
select many child_state_machines related by self->state_machine[R3734];
for each state_machine in child_state_machines
  valid = state_machine.validate();
  if ( false == valid )
    return valid;	// short circuit
  end if;
end for;

select many child_pragma_lists related by self->markable[R3783]->pragma_list[R3782];
for each pragma_list in child_pragma_lists
  valid = pragma_list.validate();
  if ( false == valid )
    return valid;	// short circuit
  end if;
end for;

return valid;',
	1,
	'',
	"5f2cb104-b641-4a62-a93f-91b78ab62058",
	0,
	0);
INSERT INTO O_TFR
	VALUES ("62436e5d-b2f0-45bd-824c-bf910bc153d7",
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495",
	'render_declaration',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'if ( "MASL" == genfile::architecture() )
  T::include( file:"masl/t.object_declaration.masl" );
  select one markable related by self->markable[R3783];
  markable.render_marking( list:"declaration" );
elif ( "WASL" == genfile::architecture() )
  T::include( file:"wasl/t.object_declaration.wasl" );
else
  //
end if;',
	1,
	'',
	"94d08134-61ae-4921-adee-96a5ef2d9522",
	0,
	0);
INSERT INTO O_TFR
	VALUES ("5f2cb104-b641-4a62-a93f-91b78ab62058",
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495",
	'tostring',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'value[7] = "";
emptyvalue[7] = ""; emptyvalue[6] = ""; emptyvalue[5] = ""; emptyvalue[4] = ""; emptyvalue[3] = ""; emptyvalue[2] = ""; emptyvalue[1] = ""; emptyvalue[0] = "";

value[0] = self.name;
out::tostring( element:"object", value:value );

select many attributes related by self->attribute[R3709.''is characterized by''];
for each attribute in attributes
  attribute.tostring();
end for;
select many identifiers related by self->identifier[R3711];
for each identifier in identifiers
  //identifier.tostring();
end for;
select many operation_activities related by self->operation[R3749]->activity[R3704];
for each activity in operation_activities
  //activity.tostring();
end for;
select many state_activities related by self->state[R3750]->activity[R3704];
for each activity in state_activities
  //activity.tostring();
end for;
select many events related by self->event[R3736.''is triggered by''];
for each event in events
  //event.tostring();
end for;
select many state_machines related by self->state_machine[R3734];
for each state_machine in state_machines
  //state_machine.tostring();
end for;
select one markable related by self->markable[R3783];
//markable.tostring( list:"definition" );

out::tostring( element:"object", value:emptyvalue );
',
	1,
	'',
	"2ce5c260-3cad-4f0a-9680-24d1b3c076e5",
	0,
	0);
INSERT INTO O_TFR
	VALUES ("2ce5c260-3cad-4f0a-9680-24d1b3c076e5",
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495",
	'render_marking',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Render processor marking for class.
select any pragma related by self->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "cca" );
if ( not_empty pragma )
	processor = "CCA";
  T::include( file:"wasl/t.object_processor.wasl" );
end if;
select any pragma related by self->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "tca" );
if ( not_empty pragma )
	processor = "TCA";
  T::include( file:"wasl/t.object_processor.wasl" );
end if;

// Render persistence marking for class.
persist = ""; persist_value = "";
select any pragma related by self->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "static" );
if ( not_empty pragma )
	persist = "STATIC";
	select any pragma_item related by pragma->pragma_item[R3780];
	if ( not_empty pragma_item )
		persist_value = pragma_item.value;
	end if;
end if;
if ( "" != persist )
  persist_value = STRING::substr( s:persist_value, begin:1, end:STRING::strlen( s:persist_value )-1 );
  T::include( file:"wasl/t.object_persist.wasl" );
end if;

// Render multiplicity marking for class.
multiplicity = ""; count = "";
select any pragma related by self->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "multiple" );
if ( not_empty pragma )
	multiplicity = "ARRAY";
	select any pragma_item related by pragma->pragma_item[R3780];
	if ( not_empty pragma_item )
		count = pragma_item.value;
	end if;
else
	select any pragma related by self->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "singleton" );
	if ( not_empty pragma )
		multiplicity = "SINGLETON";
		select any pragma_item related by pragma->pragma_item[R3780];
		if ( not_empty pragma_item )
			count = pragma_item.value;
		end if;
	end if;
end if;
if ( "" != multiplicity )
  count = STRING::substr( s:count, begin:1, end:STRING::strlen( s:count )-1 );
  T::include( file:"wasl/t.object_mult.wasl" );
end if;

// Render initialization marking for class.
init = "";
select any pragma related by self->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "initialised" );
if ( not_empty pragma )
	init = "INITIALISED";
end if;
select any pragma related by self->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "non_initialised" );
if ( not_empty pragma )
	init = "NON_INITIALISED";
end if;
if ( "" != init )
  init_value = "";
	select any pragma_item related by pragma->pragma_item[R3780];
	if ( not_empty pragma_item )
		init_value = pragma_item.value;
	end if;
  init_value = STRING::substr( s:init_value, begin:1, end:STRING::strlen( s:init_value )-1 );
  T::include( file:"wasl/t.object_init.wasl" );
end if;

// Render system address marking for class.
select any pragma related by self->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "system_address" );
if ( not_empty pragma )
  address_value = "";
	select any pragma_item related by pragma->pragma_item[R3780];
	if ( not_empty pragma_item )
		address_value = pragma_item.value;
	end if;
  address_value = STRING::substr( s:address_value, begin:1, end:STRING::strlen( s:address_value )-1 );
  T::include( file:"wasl/t.object_address.wasl" );
end if;

// Render product marking for class.
select any pragma related by self->markable[R3783]->pragma_list[R3782]->pragma[R3781] where ( selected.name == "product" );
if ( not_empty pragma )
  product_value = "";
	select any pragma_item related by pragma->pragma_item[R3780];
	if ( not_empty pragma_item )
		product_value = pragma_item.value;
	end if;
  product_value = STRING::substr( s:product_value, begin:1, end:STRING::strlen( s:product_value )-1 );
  T::include( file:"wasl/t.object_product.wasl" );
end if;

',
	1,
	'',
	"62436e5d-b2f0-45bd-824c-bf910bc153d7",
	0,
	0);
INSERT INTO O_NBATTR
	VALUES ("e4200518-32d3-4bef-abc2-bcb823d3dfe9",
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495");
INSERT INTO O_BATTR
	VALUES ("e4200518-32d3-4bef-abc2-bcb823d3dfe9",
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495");
INSERT INTO O_ATTR
	VALUES ("e4200518-32d3-4bef-abc2-bcb823d3dfe9",
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495",
	"00000000-0000-0000-0000-000000000000",
	'name',
	'',
	'',
	'name',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a3e957a0-0edb-4eca-a02b-b7804fe8cdef",
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495");
INSERT INTO O_BATTR
	VALUES ("a3e957a0-0edb-4eca-a02b-b7804fe8cdef",
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495");
INSERT INTO O_ATTR
	VALUES ("a3e957a0-0edb-4eca-a02b-b7804fe8cdef",
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495",
	"e4200518-32d3-4bef-abc2-bcb823d3dfe9",
	'key_letters',
	'',
	'',
	'key_letters',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("c1ac6fef-08fe-4a8d-bae6-15d02971b321",
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495");
INSERT INTO O_BATTR
	VALUES ("c1ac6fef-08fe-4a8d-bae6-15d02971b321",
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495");
INSERT INTO O_ATTR
	VALUES ("c1ac6fef-08fe-4a8d-bae6-15d02971b321",
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495",
	"a3e957a0-0edb-4eca-a02b-b7804fe8cdef",
	'number',
	'',
	'',
	'number',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495");
INSERT INTO O_ID
	VALUES (1,
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495");
INSERT INTO O_ID
	VALUES (2,
	"c3fb5002-9e75-4ca6-bf1e-0bcad30ab495");
INSERT INTO PE_PE
	VALUES ("c3fb5002-9e75-4ca6-bf1e-0bcad30ab495",
	1,
	"ceafde1b-ef7d-4cdb-ab88-6866d249a397",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("ceafde1b-ef7d-4cdb-ab88-6866d249a397",
	"0c88bc32-05c8-40cf-8e56-04848518b4a9",
	"0c88bc32-05c8-40cf-8e56-04848518b4a9",
	'masl',
	'',
	0,
	'../masl.xtuml');
