-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"72100ca3-f004-4030-8bd1-cd03a8eca377",
	"72100ca3-f004-4030-8bd1-cd03a8eca377",
	'DocGen',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("cdab3bd9-7f2d-421f-ab4c-9f2c6a83ba2d",
	112,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'4.0.0',
	'docgen::DocGen');
INSERT INTO DIM_DIA
	VALUES ("cdab3bd9-7f2d-421f-ab4c-9f2c6a83ba2d",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("c3fe4b99-71f5-4d9a-ad90-fc7fc165e995",
	"00000000-0000-0000-0000-000000000000",
	'docgen',
	'',
	'LOG::LogInfo( message:"Starting DocGen" );
T::clear();

// Query and Populate
// Query the xtUML meta-model and populate the Document meta-model.
::docgen_system();

select any doc_doc from instances of DOC_DOC;
// Validate
// Check to see if the document instances seem to be linked together.
doc_doc.validate();

// Render
// Cause the document to render itself from its populated instances.
doc_doc.render();

LOG::LogInfo( message:"Done" );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("c3fe4b99-71f5-4d9a-ad90-fc7fc165e995",
	1,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("746b8ff7-1d02-4561-b53e-32aea78bc5a5",
	"00000000-0000-0000-0000-000000000000",
	'docgen_system',
	'',
	'LOG::LogInfo( message:"starting docgen_system" );

create object instance doc_doc of DOC_DOC;
doc_doc.title = "BridgePoint xtUML Generated Documentation";
doc_doc.subtitle = "";
doc_doc.author = "xtUML.org";
doc_doc.font_family = "Arial";
doc_doc.company = "xtUML.org";
doc_doc.copyright = "";
doc_doc.filename = "doc.xml";
doc_doc.model_image_ext = ".png";

// section for system
// Build up a section with the root system level package diagram.
select any empty_doc_sec from instances of DOC_SEC where ( false );
select any empty_doc_par from instances of DOC_PAR where ( false );
select any empty_doc_row from instances of DOC_ROW where ( false );
prev_system_doc_sec = empty_doc_sec;

select many s_syss from instances of S_SYS;
for each s_sys in s_syss
LOG::LogInfo( message:"Processing system " + s_sys.Name );
doc_sec = DOC_SEC::populate( title:s_sys.Name, subtitle:"Generated Documentation", parent_doc_sec:empty_doc_sec );
if ( prev_system_doc_sec == empty_doc_sec )
  relate doc_sec to doc_doc across R2300;
else
  relate prev_system_doc_sec to doc_sec across R2306.''follows'';
end if;
prev_system_doc_sec = doc_sec;
doc_par = DOC_PAR::populate( text:"Please find below generated documentation for the system named " + s_sys.Name + ".", predecessor:empty_doc_par, doc_sec:doc_sec );
fig_doc_par = DOC_PAR::populate( text:"", predecessor:doc_par, doc_sec:empty_doc_sec );
//doc_fig = DOC_FIG::populate( title:s_sys.Name + " System Model Package Diagram", image_target:s_sys.Name + "-System Model Package Diagram", doc_par:fig_doc_par );

// (element/void) packages in the system
// Add the packages in a subsection to the system section.
parent = doc_sec;
predecessor = empty_doc_sec;
select many ep_pkgs related by s_sys->EP_PKG[R1401];
if ( not_empty ep_pkgs )
  LOG::LogInfo( message:"processing element packages" );
  doc_sec1 = DOC_SEC::populate( title:"System-Level Packages", subtitle:"", parent_doc_sec:doc_sec );
  ::docgen_packages( ep_pkgs:ep_pkgs, doc_sec:doc_sec1 );
else
  LOG::LogInfo( message:"no element packages" );
end if;

LOG::LogInfo( message:"ending system" );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("746b8ff7-1d02-4561-b53e-32aea78bc5a5",
	1,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("85def55e-2712-4f24-9f19-683970bbe0bc",
	"00000000-0000-0000-0000-000000000000",
	'docgen_interaction_participants',
	'',
	'ep_pkg = param.ep_pkg;
select many sq_ps related by ep_pkg->PE_PE[R8000]->SQ_P[R8001];
select many msg_ms related by ep_pkg->PE_PE[R8000]->MSG_M[R8001];
if ( ( not_empty sq_ps ) or ( not_empty msg_ms ) )
  select any empty_doc_par from instances of DOC_PAR where ( false );
  select any empty_doc_row from instances of DOC_ROW where ( false );
  doc_sec = DOC_SEC::populate( title:param.title, subtitle:"", parent_doc_sec:param.doc_sec );
  doc_par = DOC_PAR::populate( text:"", predecessor:empty_doc_par, doc_sec:doc_sec );
  doc_tbl = DOC_TBL::populate( title:param.title, num_cols:3, doc_par:doc_par );
  // Add a header row to the table.  (Set last column first to allocate the array correctly.)
  format[ 2 ] = "text";
  format[ 1 ] = "text";
  format[ 0 ] = "image";
  columns[ 2 ] = "Description";
  columns[ 1 ] = "Name";
  columns[ 0 ] = "Package.gif";
  doc_row1 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:empty_doc_row );
  relate doc_row1 to doc_tbl across R2317;
  for each sq_p in sq_ps
    // Actor Participant
    select one sq_ap related by sq_p->SQ_AP[R930];
    if ( not_empty sq_ap )
      columns[ 2 ] = sq_ap.Descrip;
      columns[ 1 ] = sq_ap.Name;
      columns[ 0 ] = "Actor.gif";
      doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
      doc_row1 = doc_row2;
    else
    // Class Instance Participant
    select one sq_cip related by sq_p->SQ_CIP[R930];
    if ( not_empty sq_cip )
      columns[ 2 ] = sq_cip.Descrip;
      columns[ 1 ] = sq_cip.Name;
      columns[ 0 ] = "Instance.gif";
      doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
      doc_row1 = doc_row2;
    else
    // Class Participant
    select one sq_cp related by sq_p->SQ_CP[R930];
    if ( not_empty sq_cp )
      select one o_obj related by sq_cp->O_OBJ[R939];
      name = sq_cp.InformalName;
      description = sq_cp.Descrip;
      if ( not_empty o_obj )
        name = o_obj.Name;
        if ( "" == description )
          description = o_obj.Descrip;
        end if;
      end if;
      columns[ 2 ] = description;
      columns[ 1 ] = name;
      columns[ 0 ] = "Class.gif";
      doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
      doc_row1 = doc_row2;
      // Class Participant Attributes
      select many sq_cpas related by sq_cp->SQ_CPA[R935];
      for each sq_cpa in sq_cpas
        columns[ 2 ] = sq_cpa.Descrip;
        columns[ 1 ] = sq_cpa.Name + ":" + sq_cpa.Type;
        columns[ 0 ] = "Attribute.gif";
        doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
        doc_row1 = doc_row2;
      end for;
    else
    // Component Participant
    select one sq_cop related by sq_p->SQ_COP[R930];
    if ( not_empty sq_cop )
      select one c_c related by sq_cop->C_C[R955];
      name = sq_cop.InformalComponentName;
      description = sq_cop.Descrip;
      if ( not_empty c_c )
        name = c_c.Name;
        if ( "" == description )
          description = c_c.Descrip;
        end if;
      end if;
      columns[ 2 ] = description;
      columns[ 1 ] = name;
      columns[ 0 ] = "Component.gif";
      doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
      doc_row1 = doc_row2;
    else
    // External Entity Participant
    select one sq_eep related by sq_p->SQ_EEP[R930];
    if ( not_empty sq_eep )
      name = sq_eep.InformalName;
      description = sq_eep.Descrip;
      select one s_ee related by sq_eep->S_EE[R933];
      if ( not_empty s_ee )
        name = s_ee.Name;
        if ( "" == description )
          description = s_ee.Descrip;
        end if;
      end if;
      columns[ 2 ] = description;
      columns[ 1 ] = name;
      columns[ 0 ] = "ExternalEntity.gif";
      doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
      doc_row1 = doc_row2;
    else
    // Package Participant
    select one sq_pp related by sq_p->SQ_PP[R930];
    if ( not_empty sq_pp )
      name = sq_pp.InformalName;
      description = sq_pp.Descrip;
      select one ep_pkg related by sq_pp->EP_PKG[R956];
      if ( not_empty ep_pkg )
        name = ep_pkg.Name;
        if ( "" == description )
          description = ep_pkg.Descrip;
        end if;
      end if;
      columns[ 2 ] = description;
      columns[ 1 ] = name;
      columns[ 0 ] = "Package.gif";
      doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
      doc_row1 = doc_row2;
    else
    // Lifespan
    select one sq_ls related by sq_p->SQ_LS[R930];
    if ( not_empty sq_ls )
      if ( "" != sq_ls.Descrip )
        columns[ 2 ] = sq_ls.Descrip;
        columns[ 1 ] = "";
        columns[ 0 ] = "Lifespan.gif";
        doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
        doc_row1 = doc_row2;
      end if;
      // Timing Marks
      select many sq_tms related by sq_ls->SQ_TM[R931];
      for each sq_tm in sq_tms
        if ( "" != sq_tm.Descrip )
          columns[ 2 ] = sq_tm.Descrip;
          columns[ 1 ] = sq_tm.Name;
          columns[ 0 ] = "TimeingMark.gif";
          doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
          doc_row1 = doc_row2;
        end if;
      end for;
      // Time Spans
      select many sq_tss related by sq_ls->SQ_TM[R931]->SQ_TS[R941];
      for each sq_ts in sq_tss
        if ( "" != sq_tm.Descrip )
          columns[ 2 ] = sq_ts.Descrip;
          columns[ 1 ] = sq_ts.Name;
          columns[ 0 ] = "TimeSpan.gif";
          doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
          doc_row1 = doc_row2;
        end if;
      end for;
    else
    // Use Case Participant
    select one ia_ucp related by sq_p->IA_UCP[R930];
    if ( not_empty ia_ucp )
      columns[ 2 ] = ia_ucp.Descrip;
      columns[ 1 ] = ia_ucp.Name;
      columns[ 0 ] = "UseCase.gif";
      doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
      doc_row1 = doc_row2;
    end if;
    end if;
    end if;
    end if;
    end if;
    end if;
    end if;
    end if;
  end for;
  // Messages
  // Asynchronous Message
  select many msg_ams related by msg_ms->MSG_AM[R1018];
  for each msg_am in msg_ams
    name = msg_am.InformalName;
    description = msg_am.Descrip;
    // select formalizations
    select one sm_evt related by msg_am->MSG_E[R1019]->SM_EVT[R1009];
    if ( not_empty sm_evt )
      name = sm_evt.Mning;
      description = sm_evt.Unq_Lbl;
    else
    select one c_as related by msg_am->MSG_SIG[R1019]->C_AS[R1021];
    if ( not_empty c_as )
      name = c_as.Name;
      description = c_as.Descrip;
    end if;
    end if;
    columns[ 2 ] = description;
    columns[ 1 ] = name;
    columns[ 0 ] = "AsynchronousMessage.gif";
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
  end for;
  // Synchronous Message
  select many msg_sms related by msg_ms->MSG_SM[R1018];
  for each msg_sm in msg_sms
    name = msg_sm.InformalName;
    description = msg_sm.Descrip;
    // select formalizations
    select one s_sync related by msg_sm->MSG_F[R1020]->S_SYNC[R1010];
    if ( not_empty s_sync )
      name = s_sync.Name;
      description = s_sync.Descrip;
    else
    select one o_tfr related by msg_sm->MSG_O[R1020]->O_TFR[R1011];
    if ( not_empty o_tfr )
      name = o_tfr.Name;
      description = o_tfr.Descrip;
    else
    select one s_brg related by msg_sm->MSG_B[R1020]->S_BRG[R1012];
    if ( not_empty s_brg )
      name = s_brg.Name;
      description = s_brg.Descrip;
    else
    select one c_io related by msg_sm->MSG_IOP[R1020]->C_IO[R1022];
    if ( not_empty c_io )
      name = c_io.Name;
      description = c_io.Descrip;
    end if;
    end if;
    end if;
    end if;
    columns[ 2 ] = description;
    columns[ 1 ] = name;
    columns[ 0 ] = "SynchronousMessage.gif";
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
  end for;
  // Return Message
  select many msg_rs related by msg_ms->MSG_R[R1018];
  for each msg_r in msg_rs
    name = msg_r.Name;
    description = msg_r.Descrip;
    // select formalizations
    columns[ 2 ] = description;
    columns[ 1 ] = name;
    columns[ 0 ] = "ReturnMessage.gif";
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
  end for;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("1dbdd621-a729-4af0-b9ba-ae5ea6921503",
	"85def55e-2712-4f24-9f19-683970bbe0bc",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9939c670-a721-4742-a824-ed4b0df4acd6",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Package>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Element Packaging/Element Packaging.xtuml');
INSERT INTO S_SPARM
	VALUES ("612f8a87-ac5d-4514-8a01-68d425d71cf0",
	"85def55e-2712-4f24-9f19-683970bbe0bc",
	'doc_sec',
	"07319e3c-105e-4996-bfb1-bc8d37462007",
	0,
	'',
	"1dbdd621-a729-4af0-b9ba-ae5ea6921503",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("07319e3c-105e-4996-bfb1-bc8d37462007",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<section>',
	'',
	'',
	'../../../../document/models/document/Document/Document.xtuml');
INSERT INTO S_SPARM
	VALUES ("0736f300-1435-46d0-97f5-00bcb0b9363f",
	"85def55e-2712-4f24-9f19-683970bbe0bc",
	'title',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"612f8a87-ac5d-4514-8a01-68d425d71cf0",
	'');
INSERT INTO PE_PE
	VALUES ("85def55e-2712-4f24-9f19-683970bbe0bc",
	1,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ab65f127-2b2d-4224-a2c3-8366063ac8de",
	"00000000-0000-0000-0000-000000000000",
	'getContainerListForS_SYS',
	'',
	'//  getContainerListForS_SYS
//
//  System elements are the top-level.  They don''t have parents.
//
sys = param.sys;
list = sys.Name;
if( "" != param.container_list )
  list = list + "-" + param.container_list;
end if;
return list;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("9ad1ee3b-1e59-405e-b19f-b7b15056d187",
	"ab65f127-2b2d-4224-a2c3-8366063ac8de",
	'sys',
	"4b886601-55ee-4d42-a1f8-f5c45d459db2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4b886601-55ee-4d42-a1f8-f5c45d459db2",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<System Model>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Domain/Domain.xtuml');
INSERT INTO S_SPARM
	VALUES ("9b6df949-bfd3-4d53-beb7-28b55d0d5509",
	"ab65f127-2b2d-4224-a2c3-8366063ac8de",
	'container_list',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9ad1ee3b-1e59-405e-b19f-b7b15056d187",
	'');
INSERT INTO PE_PE
	VALUES ("ab65f127-2b2d-4224-a2c3-8366063ac8de",
	1,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cfcb323b-a73a-45e0-83e8-20fae5eb17c0",
	"00000000-0000-0000-0000-000000000000",
	'getContainerListForC_C',
	'',
	'//  getContainerListForC_C
//
//  Component parents can be:
//    - Component package
//    - Component
//    - Component (via PE_PE)
//    - Package
//
comp = param.comp;
list = comp.Name;
if ( "" != param.container_list )
  list = list + "-" + param.container_list;
end if;
select one c_c related by comp->PE_PE[R8001]->C_C[R8003];
select one ep_pkg related by comp->PE_PE[R8001]->EP_PKG[R8000];
if ( not_empty c_c )
  list = ::getContainerListForC_C( comp:c_c, container_list:list );
elif ( not_empty ep_pkg )
  list = ::getContainerListForEP_PKG(epk:ep_pkg, container_list:list);
end if;
return list;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d565fa4e-d958-42ec-81f1-5886516d8370",
	"cfcb323b-a73a-45e0-83e8-20fae5eb17c0",
	'comp',
	"67f93d18-1045-4c6c-b0d5-a692023c471c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("67f93d18-1045-4c6c-b0d5-a692023c471c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Component>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Component/Component.xtuml');
INSERT INTO S_SPARM
	VALUES ("3507338c-9aac-4525-b993-16fbeaa3dd00",
	"cfcb323b-a73a-45e0-83e8-20fae5eb17c0",
	'container_list',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d565fa4e-d958-42ec-81f1-5886516d8370",
	'');
INSERT INTO PE_PE
	VALUES ("cfcb323b-a73a-45e0-83e8-20fae5eb17c0",
	1,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("78107ddb-ebb8-42a5-ab59-071c2298aed2",
	"00000000-0000-0000-0000-000000000000",
	'getContainerListForEP_PKG',
	'',
	'//  getContainerListForEP_PKG
//
//  Element package parents can be:
//    - System
//    - Component
//    - Package
//
epk = param.epk;
list = epk.Name;
if(param.container_list != "")
  list = list + "-" + param.container_list;
end if;
select one system related by epk->S_SYS[R1401];
select one c_c related by epk->PE_PE[R8001]->C_C[R8003];
select one ep_pkg related by epk->PE_PE[R8001]->EP_PKG[R8000];
if(not_empty system)
  list = ::getContainerListForS_SYS(sys:system, container_list:list);
elif(not_empty c_c)
  list = ::getContainerListForC_C(comp:c_c, container_list:list);
elif(not_empty ep_pkg)
  list = ::getContainerListForEP_PKG(epk:ep_pkg, container_list:list);
end if;
return list;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("f96770ae-fa23-4d7b-b527-91030a95596c",
	"78107ddb-ebb8-42a5-ab59-071c2298aed2",
	'epk',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("585752a8-f678-4fa8-b53c-a0ff4b2d9337",
	"78107ddb-ebb8-42a5-ab59-071c2298aed2",
	'container_list',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f96770ae-fa23-4d7b-b527-91030a95596c",
	'');
INSERT INTO PE_PE
	VALUES ("78107ddb-ebb8-42a5-ab59-071c2298aed2",
	1,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c5c0a74e-51fc-45f9-88f3-cdded216a47b",
	"00000000-0000-0000-0000-000000000000",
	'docgen_packages',
	'',
	'select any empty_doc_sec from instances of DOC_SEC where ( false );
select any empty_doc_par from instances of DOC_PAR where ( false );
select any empty_doc_row from instances of DOC_ROW where ( false );

// Generic packages in the system
// Add the packages as subsections to the input section.
// Include the package diagrams as figures.
parent_doc_sec = param.doc_sec;
ep_pkgs = param.ep_pkgs;
for each ep_pkg in ep_pkgs
  LOG::LogInfo( message:"processing package " + ep_pkg.Name );
  // Make this section a child of the system section.
  doc_sec = DOC_SEC::populate( title:ep_pkg.Name, subtitle:"Package", parent_doc_sec:parent_doc_sec );
  doc_par = DOC_PAR::populate( text:ep_pkg.Descrip, predecessor:empty_doc_par, doc_sec:doc_sec );
  image_name = ::getContainerListForEP_PKG(epk:ep_pkg, container_list:"Package Diagram");
  doc_fig1 = DOC_FIG::populate( title:ep_pkg.Name + " Package Diagram", image_target:image_name, doc_par:doc_par );

  // List the contained components in this package
  select many c_cs related by ep_pkg->PE_PE[R8000]->C_C[R8001];
  ::docgen_components(c_cs:c_cs, doc_sec:doc_sec);
    
  // List the contained interfaces in this package
  select many c_is related by ep_pkg->PE_PE[R8000]->C_I[R8001];
  ::docgen_interfaces(c_is:c_is, doc_sec:doc_sec);
  
  // List the contained types
  ::docgen_datatypes( ep_pkg:ep_pkg, doc_sec:doc_sec, title:"Datatypes" );

  // Handle the contained classes in this package
  ::docgen_classes( ep_pkg:ep_pkg, doc_sec:doc_sec, title:"Classes" );
  
  // Handle the contained classes in this package
  ::docgen_associations( ep_pkg:ep_pkg, doc_sec:doc_sec, title:"Associations" );
  
  // List the contained functions in this package.
  ::docgen_functions( ep_pkg:ep_pkg, doc_sec:doc_sec, title:"Functions" );

  // List the contained external entities in this package.
  ::docgen_external_entities( ep_pkg:ep_pkg, doc_sec:doc_sec, title:"External Entities" );

  // List the contained activity elements in this package.
  ::docgen_activity_elements( ep_pkg:ep_pkg, doc_sec:doc_sec, title:"Activity Elements" );
  // List the contained interaction participants in this package.
  ::docgen_interaction_participants( ep_pkg:ep_pkg, doc_sec:doc_sec, title:"Interaction Participants" );
  
  // Traverse down to contained packages in this package
  select many child_ep_pkgs related by ep_pkg->PE_PE[R8000]->EP_PKG[R8001];
  if ( not_empty child_ep_pkgs ) 
    // Make this section a child of the packages section.
    doc_sec1 = DOC_SEC::populate( title:ep_pkg.Name + " Packages", subtitle:"", parent_doc_sec:doc_sec );
    doc_par1 = DOC_PAR::populate( text:"Rendered here are the contained package diagrams.", predecessor:empty_doc_par, doc_sec:doc_sec1 );
    ::docgen_packages(ep_pkgs:child_ep_pkgs, doc_sec:doc_sec1);
  end if;
  
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("de62bbdc-bd0b-45bb-b5cb-c78514e0229a",
	"c5c0a74e-51fc-45f9-88f3-cdded216a47b",
	'ep_pkgs',
	"2dfbba0c-72a2-4c76-8486-8613e7ea4b99",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("2dfbba0c-72a2-4c76-8486-8613e7ea4b99",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_set<Package>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Element Packaging/Element Packaging.xtuml');
INSERT INTO S_SPARM
	VALUES ("7299391b-a852-4a32-bc82-d264e55de7b0",
	"c5c0a74e-51fc-45f9-88f3-cdded216a47b",
	'doc_sec',
	"07319e3c-105e-4996-bfb1-bc8d37462007",
	0,
	'',
	"de62bbdc-bd0b-45bb-b5cb-c78514e0229a",
	'');
INSERT INTO PE_PE
	VALUES ("c5c0a74e-51fc-45f9-88f3-cdded216a47b",
	1,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2fe0e55d-c776-4155-9654-c19a09fedf95",
	"00000000-0000-0000-0000-000000000000",
	'docgen_load_project',
	'',
	'// In order to run the docgen in Verifier there must be a project
// loaded in the same workspace with the name "SampleModel".
// Execute this operation then execute docgen.
inputModelName = "DocGenTest";
LOG::LogInfo( message: "Populating metamodel with: " + inputModelName );
POP::populate( project: inputModelName );
LOG::LogInfo( message: "Model to model transformation..." );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO PE_PE
	VALUES ("2fe0e55d-c776-4155-9654-c19a09fedf95",
	1,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("238ee6dd-aec9-463d-9ded-c4ef3947a91b",
	"00000000-0000-0000-0000-000000000000",
	'docgen_interfaces',
	'',
	'select any empty_doc_sec from instances of DOC_SEC where ( false );
select any empty_doc_par from instances of DOC_PAR where ( false );
select any empty_doc_row from instances of DOC_ROW where ( false );

c_is = param.c_is;
for each c_i in c_is
  // Make this section a child of the component packages section.
  doc_sec1 = DOC_SEC::populate( title:c_i.Name, subtitle:"Interface", parent_doc_sec:param.doc_sec );
  doc_par1 = DOC_PAR::populate( text:c_i.Descrip, predecessor:empty_doc_par, doc_sec:doc_sec1 );
  // messages
  doc_par2 = DOC_PAR::populate( text:"", predecessor:doc_par1, doc_sec:empty_doc_sec );
  doc_tbl = DOC_TBL::populate( title:c_i.Name + " " + "Messages", num_cols:4, doc_par:doc_par2 );
  // Add a header row to the table.
  format[ 3 ] = "text";
  format[ 2 ] = "text";
  format[ 1 ] = "text";
  format[ 0 ] = "image";
  columns[ 3 ] = "Description";
  columns[ 2 ] = "Direction";
  columns[ 1 ] = "Name";
  columns[ 0 ] = "Message.gif";
  doc_row = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:empty_doc_row );
  relate doc_row to doc_tbl across R2317;
  // messages
  // signals
  columns[ 0 ] = "SendSignal.gif";
  select many c_eps related by c_i->C_EP[R4003];
  for each c_ep in c_eps
    select one c_as related by c_ep->C_AS[R4004];
    if (not_empty c_as)
      columns[ 3 ] = c_as.Descrip;
      if ( IFDirectionType::ClientServer == c_as.Direction )
        columns[ 2 ] = "Client to Server (Requirer to Provider)";
      else
        columns[ 2 ] = "Server to Client (Provider to Requirer)";
      end if;
      columns[ 1 ] = c_as.Name;
      doc_row1 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row );
      doc_row = doc_row1;
    end if;
  end for;
    
  // interface operations
  columns[ 0 ] = "Operation.gif";
  for each c_ep in c_eps
    select one c_io related by c_ep->C_IO[R4004];
    if (not_empty c_io)
      columns[ 3 ] = c_io.Descrip;
      if ( IFDirectionType::ClientServer == c_io.Direction )
        columns[ 2 ] = "Client to Server (Requirer to Provider)";
      else
        columns[ 2 ] = "Server to Client (Provider to Requirer )";
      end if;
      columns[ 1 ] = c_io.Name;
      doc_row1 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row );
      doc_row = doc_row1;
    end if;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("238d6bd1-29d5-4518-8f5c-2235251bea3c",
	"238ee6dd-aec9-463d-9ded-c4ef3947a91b",
	'c_is',
	"af65ad23-3277-4823-ba71-307c18c926a3",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("af65ad23-3277-4823-ba71-307c18c926a3",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_set<Interface>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Component/Component.xtuml');
INSERT INTO S_SPARM
	VALUES ("b5ac9786-a7c0-4b63-8312-a35c769ffeca",
	"238ee6dd-aec9-463d-9ded-c4ef3947a91b",
	'doc_sec',
	"07319e3c-105e-4996-bfb1-bc8d37462007",
	0,
	'',
	"238d6bd1-29d5-4518-8f5c-2235251bea3c",
	'');
INSERT INTO PE_PE
	VALUES ("238ee6dd-aec9-463d-9ded-c4ef3947a91b",
	1,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6d078aa2-26e1-480f-9366-15c6e9a67c4a",
	"00000000-0000-0000-0000-000000000000",
	'docgen_components',
	'',
	'select any empty_doc_sec from instances of DOC_SEC where ( false );
select any empty_doc_par from instances of DOC_PAR where ( false );
select any empty_doc_row from instances of DOC_ROW where ( false );

c_cs = param.c_cs;
for each c_c in c_cs
  // Make this section a child of the component packages section.
  doc_sec1 = DOC_SEC::populate( title:c_c.Name, subtitle:"Component", parent_doc_sec:param.doc_sec );
  doc_par1 = DOC_PAR::populate( text:c_c.Descrip, predecessor:empty_doc_par, doc_sec:doc_sec1 );
  image_name = ::getContainerListForC_C(comp:c_c, container_list:"Component Diagram");
  doc_fig = DOC_FIG::populate( title:c_c.Name + " Component Diagram", image_target:image_name, doc_par:doc_par1 );
  
  // ports
  select many c_pos related by c_c->C_PO[R4010];
  if ( not_empty c_pos )
  doc_par2 = DOC_PAR::populate( text:"", predecessor:doc_par1, doc_sec:empty_doc_sec );
  doc_tbl = DOC_TBL::populate( title:c_c.Name + " " + "Ports", num_cols:5, doc_par:doc_par2 );
  // Add a header row to the table.
  format[ 4 ] = "text";
  format[ 3 ] = "text";
  format[ 2 ] = "text";
  format[ 1 ] = "text";
  format[ 0 ] = "image";
  columns[ 4 ] = "Multiplicity";
  columns[ 3 ] = "Type";
  columns[ 2 ] = "Interface";
  columns[ 1 ] = "Name";
  columns[ 0 ] = "Port.gif";
  doc_row = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:empty_doc_row );
  relate doc_row to doc_tbl across R2317;
  for each c_po in c_pos
    if_name = "< not formalized >";
    select any c_ir related by c_po->C_IR[R4016];
    select one c_i related by c_ir->C_I[R4012];
    select one c_p related by c_ir->C_P[R4009];
    if ( not_empty c_i )
      if_name = c_i.Name;
    end if;
    columns[ 4 ] = T::s( i:c_po.Mult );
    columns[ 2 ] = if_name;
    columns[ 1 ] = c_po.Name;
    if ( not_empty c_p )
      columns[ 3 ] = "provision";
      columns[ 0 ] = "Provision.gif";
    else
      columns[ 3 ] = "requirement";
      columns[ 0 ] = "Requirement.gif";
    end if;
    doc_row1 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row );
    doc_row = doc_row1;
  end for;
  
  // List Port OAL
  doc_sec2 = DOC_SEC::populate( title:"Interface Activities", subtitle:"", parent_doc_sec:doc_sec1 );
  for each c_po in c_pos
    if_name = "";
    select any c_ir related by c_po->C_IR[R4016];
    select one c_i related by c_ir->C_I[R4012];
    select one c_r related by c_ir->C_R[R4009];
    if ( not_empty c_i )
      if_name = ", Interface: " + c_i.Name;
    end if;
    doc_sec3 = DOC_SEC::populate( title:"Port: " + c_po.Name + if_name, subtitle:"", parent_doc_sec:doc_sec2 );
    if ( not_empty c_r )
      select many spr_reps related by c_r->SPR_REP[R4500];
      for each spr_rep in spr_reps
        select one spr_ro related by spr_rep->SPR_RO[R4502];
        if ( not_empty spr_ro )
          if ( ( "" != spr_ro.Descrip ) or ( "" != spr_ro.Action_Semantics_internal ) )
            title = spr_ro.Name;
            doc_sec4 = DOC_SEC::populate( title:title, subtitle:"", parent_doc_sec:doc_sec3 );
            doc_par3 = DOC_PAR::populate( text:spr_ro.Descrip, predecessor:empty_doc_par, doc_sec:doc_sec4 );
            doc_par4 = DOC_PAR::populate( text:spr_ro.Action_Semantics_internal, predecessor:doc_par3, doc_sec:empty_doc_sec );
            doc_par4.formatted = false;
          end if;
        else
          select one spr_rs related by spr_rep->SPR_RS[R4502];
          title = spr_rs.Name;
          doc_sec4 = DOC_SEC::populate( title:title, subtitle:"", parent_doc_sec:doc_sec3 );
          doc_par3 = DOC_PAR::populate( text:spr_rs.Descrip, predecessor:empty_doc_par, doc_sec:doc_sec4 );
          doc_par4 = DOC_PAR::populate( text:spr_rs.Action_Semantics_internal, predecessor:doc_par3, doc_sec:empty_doc_sec );
          doc_par4.formatted = false;
        end if;
      end for;
    else
      select one c_p related by c_ir->C_P[R4009];
      select many spr_peps related by c_p->SPR_PEP[R4501];
      for each spr_pep in spr_peps
        select one spr_po related by spr_pep->SPR_PO[R4503];
        if ( not_empty spr_po )
          if ( ( "" != spr_po.Descrip ) or ( "" != spr_po.Action_Semantics_internal ) )
            title = spr_po.Name;
            doc_sec4 = DOC_SEC::populate( title:title, subtitle:"", parent_doc_sec:doc_sec3 );
            doc_par3 = DOC_PAR::populate( text:spr_po.Descrip, predecessor:empty_doc_par, doc_sec:doc_sec4 );
            doc_par4 = DOC_PAR::populate( text:spr_po.Action_Semantics_internal, predecessor:doc_par3, doc_sec:empty_doc_sec );
            doc_par4.formatted = false;
          end if;
        else
          select one spr_ps related by spr_pep->SPR_PS[R4503];
          title = spr_ps.Name;
          doc_sec4 = DOC_SEC::populate( title:title, subtitle:"", parent_doc_sec:doc_sec3 );
          doc_par3 = DOC_PAR::populate( text:spr_ps.Descrip, predecessor:empty_doc_par, doc_sec:doc_sec4 );
          doc_par4 = DOC_PAR::populate( text:spr_ps.Action_Semantics_internal, predecessor:doc_par3, doc_sec:empty_doc_sec );
          doc_par4.formatted = false;
        end if;
      end for;
    end if;
  end for;
  end if;
  
  // List the contained components in this package
  select many child_c_cs related by c_c->PE_PE[R8003]->C_C[R8001];
  ::docgen_components(c_cs:child_c_cs, doc_sec:doc_sec1);
    
  // List the contained interfaces in this package
  select many child_c_is related by c_c->PE_PE[R8003]->C_I[R8001];
  ::docgen_interfaces(c_is:child_c_is, doc_sec:doc_sec1);
  
  // Traverse down to contained packages in this package
  select many child_ep_pkgs related by c_c->PE_PE[R8003]->EP_PKG[R8001];
  // Make this section a child of the component section.
  doc_sec1 = DOC_SEC::populate( title:c_c.Name + " Packages", subtitle:"", parent_doc_sec:doc_sec1 );
  doc_par1 = DOC_PAR::populate( text:"Rendered here are the contained package diagrams.", predecessor:empty_doc_par, doc_sec:doc_sec1 );
  ::docgen_packages(ep_pkgs:child_ep_pkgs, doc_sec:doc_sec1);
  
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("d7e19551-5ec3-4970-aca8-abe93975fc19",
	"6d078aa2-26e1-480f-9366-15c6e9a67c4a",
	'c_cs',
	"5228eeb5-5532-4f4d-8d56-d20e0a1a6189",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5228eeb5-5532-4f4d-8d56-d20e0a1a6189",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_set<Component>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Component/Component.xtuml');
INSERT INTO S_SPARM
	VALUES ("52ef59d3-a0a0-4cca-9b7f-8421a1d58934",
	"6d078aa2-26e1-480f-9366-15c6e9a67c4a",
	'doc_sec',
	"07319e3c-105e-4996-bfb1-bc8d37462007",
	0,
	'',
	"d7e19551-5ec3-4970-aca8-abe93975fc19",
	'');
INSERT INTO PE_PE
	VALUES ("6d078aa2-26e1-480f-9366-15c6e9a67c4a",
	1,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3ced45b9-1229-4d5c-b12a-b9185ac44087",
	"00000000-0000-0000-0000-000000000000",
	'docgen_datatypes',
	'',
	'ep_pkg = param.ep_pkg;
select many s_dts related by ep_pkg->PE_PE[R8000]->S_DT[R8001];
if ( not_empty s_dts )
  select any empty_doc_par from instances of DOC_PAR where ( false );
  select any empty_doc_row from instances of DOC_ROW where ( false );
  doc_sec = DOC_SEC::populate( title:param.title, subtitle:"", parent_doc_sec:param.doc_sec );
  doc_par = DOC_PAR::populate( text:"", predecessor:empty_doc_par, doc_sec:doc_sec );
  doc_tbl = DOC_TBL::populate( title:param.title, num_cols:3, doc_par:doc_par );
  // Add a header row to the table.
  format[ 2 ] = "text";
  format[ 1 ] = "text";
  format[ 0 ] = "image";
  columns[ 2 ] = "Description";
  columns[ 1 ] = "Name";
  columns[ 0 ] = "DataType.gif";
  doc_row1 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:empty_doc_row );
  relate doc_row1 to doc_tbl across R2317;
  for each s_dt in s_dts
    // Set last column first to allocate the array correctly.
    columns[ 2 ] = s_dt.Descrip;
    columns[ 1 ] = s_dt.Name;
    columns[ 0 ] = "DataType.gif";
    select one s_sdt related by s_dt->S_SDT[R17];
    if ( not_empty s_sdt )
      columns[ 0 ] = "StructuredDataType.gif";
      doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
      doc_row1 = doc_row2;
    else
    select one s_edt related by s_dt->S_EDT[R17];
    if ( not_empty s_edt )
      columns[ 0 ] = "Enumeration.gif";
      doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
      doc_row1 = doc_row2;
    else
    select one s_udt related by s_dt->S_UDT[R17];
    if ( not_empty s_udt )
      columns[ 0 ] = "UserDefinedDataType.gif";
      doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
      doc_row1 = doc_row2;
    end if;
    end if;
    end if;
  end for;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("4df297e3-7a7b-43ef-bd00-f2d08be0b897",
	"3ced45b9-1229-4d5c-b12a-b9185ac44087",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("908ad1c5-a137-462b-8ab5-6ec01577bf62",
	"3ced45b9-1229-4d5c-b12a-b9185ac44087",
	'doc_sec',
	"07319e3c-105e-4996-bfb1-bc8d37462007",
	0,
	'',
	"4df297e3-7a7b-43ef-bd00-f2d08be0b897",
	'');
INSERT INTO S_SPARM
	VALUES ("a0cf7930-0f0e-4467-b63e-530672872525",
	"3ced45b9-1229-4d5c-b12a-b9185ac44087",
	'title',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"908ad1c5-a137-462b-8ab5-6ec01577bf62",
	'');
INSERT INTO PE_PE
	VALUES ("3ced45b9-1229-4d5c-b12a-b9185ac44087",
	1,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("efb852e6-34c8-40e1-8956-ddc56b43fcb7",
	"00000000-0000-0000-0000-000000000000",
	'docgen_classes',
	'',
	'ep_pkg = param.ep_pkg;
select many o_objs related by ep_pkg->PE_PE[R8000]->O_OBJ[R8001];
if ( not_empty o_objs )
  select any empty_doc_sec from instances of DOC_SEC where ( false );
  select any empty_doc_par from instances of DOC_PAR where ( false );
  select any empty_doc_row from instances of DOC_ROW where ( false );
  select any empty_o_attr from instances of O_ATTR where ( false );
  doc_sec1 = DOC_SEC::populate( title:param.title, subtitle:"", parent_doc_sec:param.doc_sec );
  doc_par1 = DOC_PAR::populate( text:"", predecessor:empty_doc_par, doc_sec:doc_sec1 );
  doc_tbl = DOC_TBL::populate( title:param.title, num_cols:3, doc_par:doc_par1 );
  doc_row = empty_doc_row;
  // Add a header row to the table.
  format[ 2 ] = "text";
  format[ 1 ] = "text";
  format[ 0 ] = "image";
  columns[ 2 ] = "Description";
  columns[ 1 ] = "Name";
  columns[ 0 ] = "Class.gif";
  doc_row1 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row );
  relate doc_row1 to doc_tbl across R2317;
  for each o_obj in o_objs
    // Set last column first to allocate the array correctly.
    columns[ 2 ] = o_obj.Descrip;
    columns[ 1 ] = o_obj.Name;
    columns[ 0 ] = "Class.gif";
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
    // attribute names and descriptions
    prev_o_attr = empty_o_attr;
    // Find first o_attr.
    select any o_attr related by o_obj->O_ATTR[R102];
    while ( not_empty o_attr )
      select one prev_o_attr related by o_attr->O_ATTR[R103.''precedes''];
      if ( empty prev_o_attr )
        break;
      end if;
      o_attr = prev_o_attr;
    end while;
    while ( not_empty o_attr )
      select one s_dt related by o_attr->S_DT[R114];
      columns[ 2 ] = o_attr.Descrip;
      columns[ 1 ] = o_attr.Name + ":" + s_dt.Name;
      columns[ 0 ] = "Attribute.gif";
      doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
      doc_row1 = doc_row2;
      select one o_attr related by o_attr->O_ATTR[R103.''succeeds''];
    end while;
  end for;
  previous_doc_par = doc_par1;
  for each o_obj in o_objs
    prefix = ::getContainerListForEP_PKG(epk:ep_pkg, container_list:"");
    prefix = prefix + "-" + o_obj.Name;
    select one sm_sm related by o_obj->SM_ASM[R519]->SM_SM[R517];
    if ( not_empty sm_sm )
      doc_par2 = DOC_PAR::populate( text:"", predecessor:previous_doc_par, doc_sec:empty_doc_sec );
      doc_fig1 = DOC_FIG::populate( title:ep_pkg.Name + " " + o_obj.Name + " Class State Machine", image_target:prefix + "-Class State Machine", doc_par:doc_par2 );
      previous_doc_par = doc_par2;
    end if;
    select one sm_sm related by o_obj->SM_ISM[R518]->SM_SM[R517];
    if ( not_empty sm_sm )
      doc_par2 = DOC_PAR::populate( text:"", predecessor:previous_doc_par, doc_sec:empty_doc_sec );
      doc_fig1 = DOC_FIG::populate( title:ep_pkg.Name + " " + o_obj.Name + " Instance State Machine", image_target:prefix + "-Instance State Machine", doc_par:doc_par2 );
      previous_doc_par = doc_par2;
    end if;
    
    // activities
    select many sm_ismacts related by o_obj->SM_ISM[R518]->SM_SM[R517]->SM_ACT[R515];
    select many sm_asmacts related by o_obj->SM_ASM[R519]->SM_SM[R517]->SM_ACT[R515];
    select many o_tfrs related by o_obj->O_TFR[R115];
    select many o_dbattrs related by o_obj->O_ATTR[R102]->O_BATTR[R106]->O_DBATTR[R107];
    if ( ( not_empty sm_ismacts ) or ( not_empty sm_asmacts ) or ( not_empty o_tfrs ) or ( not_empty o_dbattrs ) )
      doc_sec2 = DOC_SEC::populate( title:"Class Activities", subtitle:"", parent_doc_sec:doc_sec1 );
      doc_par3 = DOC_PAR::populate( text:"Here are listings of all of the activies in the class and its state machine(s).", predecessor:empty_doc_par, doc_sec:doc_sec2 );
    
    // state actions
    if ( not_empty sm_ismacts )
      doc_sec3 = DOC_SEC::populate( title:"Instance State Machine Actions", subtitle:"", parent_doc_sec:doc_sec2 );
      for each sm_act in sm_ismacts
        select one sm_sm related by sm_act->SM_SM[R515];
        if ( ( "" != sm_act.Descrip ) or ( "" != sm_act.Action_Semantics_internal ) )
          title = o_obj.Name;
          select one sm_ah related by sm_act->SM_AH[R514];
          select one sm_tah related by sm_ah->SM_TAH[R513];
          if ( not_empty sm_tah  )
            title = title + " State Transition: ";
          else
            select one sm_moah related by sm_ah->SM_MOAH[R513];
            select one sm_state related by sm_moah->SM_STATE[R511];
            if ( not_empty sm_state )
              title = title + " State[" + T::s( i:sm_state.Numb ) + "]:" + sm_state.Name;
            end if;
          end if;     
          doc_sec4 = DOC_SEC::populate( title:title, subtitle:"", parent_doc_sec:doc_sec3 );
          doc_par4 = DOC_PAR::populate( text:sm_act.Descrip, predecessor:empty_doc_par, doc_sec:doc_sec4 );
          doc_par5 = DOC_PAR::populate( text:sm_sm.Descrip, predecessor:doc_par4, doc_sec:empty_doc_sec );
          doc_par6 = DOC_PAR::populate( text:sm_act.Action_Semantics_internal, predecessor:doc_par5, doc_sec:empty_doc_sec );
          doc_par6.formatted = false;
        end if;
      end for;
    end if;

    if ( not_empty sm_asmacts )
      doc_sec3 = DOC_SEC::populate( title:"Class State Machine Actions", subtitle:"", parent_doc_sec:doc_sec2 );
      for each sm_act in sm_asmacts
        select one sm_sm related by sm_act->SM_SM[R515];
        if ( ( "" != sm_act.Descrip ) or ( "" != sm_act.Action_Semantics_internal ) )
          title = o_obj.Name;
          select one sm_ah related by sm_act->SM_AH[R514];
          select one sm_tah related by sm_ah->SM_TAH[R513];
          if ( not_empty sm_tah  )
            title = title + " State Transition: ";
          else
            select one sm_moah related by sm_ah->SM_MOAH[R513];
            select one sm_state related by sm_moah->SM_STATE[R511];
            if ( not_empty sm_state )
              title = title + " State[" + T::s( i:sm_state.Numb ) + "]:" + sm_state.Name;
            end if;
          end if;     
          doc_sec4 = DOC_SEC::populate( title:title, subtitle:"", parent_doc_sec:doc_sec3 );
          doc_par4 = DOC_PAR::populate( text:sm_act.Descrip, predecessor:empty_doc_par, doc_sec:doc_sec4 );
          doc_par5 = DOC_PAR::populate( text:sm_sm.Descrip, predecessor:doc_par4, doc_sec:empty_doc_sec );
          doc_par6 = DOC_PAR::populate( text:sm_act.Action_Semantics_internal, predecessor:doc_par5, doc_sec:empty_doc_sec );
          doc_par6.formatted = false;
        end if;
      end for;
    end if;

    // class operations
    if ( not_empty o_tfrs )
      doc_sec3 = DOC_SEC::populate( title:"Class Operations", subtitle:"", parent_doc_sec:doc_sec2 );
      for each o_tfr in o_tfrs
        if ( ( "" != o_tfr.Descrip ) or ( "" != o_tfr.Action_Semantics_internal ) )
          title = "";
          select one o_obj related by o_tfr->O_OBJ[R115];
          select one ep_pkg related by o_obj->PE_PE[R8001]->EP_PKG[R8000];
          select one c_c related by o_obj->PE_PE[R8001]->C_C[R8003];
          // set up the title based on the container we just identified
          if ( not_empty ep_pkg )
            title = ep_pkg.Name + ":" + o_obj.Name + ":  " + o_tfr.Name;
          end if;
          if ( not_empty c_c )
            title = c_c.Name + ":" + o_obj.Name + ":  " + o_tfr.Name;
          end if;
          doc_sec4 = DOC_SEC::populate( title:title, subtitle:"", parent_doc_sec:doc_sec3 );
          doc_par4 = DOC_PAR::populate( text:o_tfr.Descrip, predecessor:empty_doc_par, doc_sec:doc_sec4 );
          doc_par5 = DOC_PAR::populate( text:o_tfr.Action_Semantics_internal, predecessor:doc_par4, doc_sec:empty_doc_sec );
          doc_par5.formatted = false;
        end if;
      end for;
    end if;

    // dbattrs
    if ( not_empty o_dbattrs )
      doc_sec3 = DOC_SEC::populate( title:"Derived (Mathematically Dependent) Attributes", subtitle:"", parent_doc_sec:doc_sec2 );
      for each o_dbattr in o_dbattrs
        select one o_attr related by o_dbattr->O_BATTR[R107]->O_ATTR[R106];
        if ( "" != o_dbattr.Action_Semantics_internal )
          title = "";
          select one o_obj related by o_attr->O_OBJ[R102];
          select one ep_pkg related by o_obj->PE_PE[R8001]->EP_PKG[R8000];
          select one c_c related by o_obj->PE_PE[R8001]->C_C[R8003];
          // set up the title based on the container we just identified
          if ( not_empty ep_pkg )
            title = ep_pkg.Name + ":" + o_obj.Name + ":  " + o_attr.Name;
          end if;
          if ( not_empty c_c )
            title = c_c.Name + ":" + o_obj.Name + ":  " + o_attr.Name;
          end if;
          doc_sec4 = DOC_SEC::populate( title:title, subtitle:"", parent_doc_sec:doc_sec3 );
          doc_par4 = DOC_PAR::populate( text:o_attr.Descrip, predecessor:empty_doc_par, doc_sec:doc_sec4 );
          doc_par5 = DOC_PAR::populate( text:o_dbattr.Action_Semantics_internal, predecessor:doc_par4, doc_sec:empty_doc_sec );
          doc_par5.formatted = false;
        end if;
      end for;
    end if;
    end if;
  end for;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("f9c51cd9-962e-4243-8255-e4accbe03694",
	"efb852e6-34c8-40e1-8956-ddc56b43fcb7",
	'doc_sec',
	"07319e3c-105e-4996-bfb1-bc8d37462007",
	0,
	'',
	"10d69333-d5b8-4f0f-ba0a-806d38857b2e",
	'');
INSERT INTO S_SPARM
	VALUES ("10d69333-d5b8-4f0f-ba0a-806d38857b2e",
	"efb852e6-34c8-40e1-8956-ddc56b43fcb7",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9f9594e6-e0f4-4c41-8574-9c9f3c5f68f1",
	"efb852e6-34c8-40e1-8956-ddc56b43fcb7",
	'title',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f9c51cd9-962e-4243-8255-e4accbe03694",
	'');
INSERT INTO PE_PE
	VALUES ("efb852e6-34c8-40e1-8956-ddc56b43fcb7",
	1,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2078cc27-fb6e-46a0-8076-5a62cb279dcd",
	"00000000-0000-0000-0000-000000000000",
	'docgen_activity_elements',
	'',
	'ep_pkg = param.ep_pkg;
select many a_es related by ep_pkg->PE_PE[R8000]->A_E[R8001];
select many a_ns related by ep_pkg->PE_PE[R8000]->A_N[R8001];
select many a_aps related by ep_pkg->PE_PE[R8000]->A_AP[R8001];
if ( ( not_empty a_es ) or ( not_empty a_ns ) or ( not_empty a_aps ) )
  select any empty_doc_par from instances of DOC_PAR where ( false );
  select any empty_doc_row from instances of DOC_ROW where ( false );
  doc_sec = DOC_SEC::populate( title:param.title, subtitle:"", parent_doc_sec:param.doc_sec );
  doc_par = DOC_PAR::populate( text:"", predecessor:empty_doc_par, doc_sec:doc_sec );
  doc_tbl = DOC_TBL::populate( title:param.title, num_cols:3, doc_par:doc_par );
  // Add a header row to the table.  (Set last column first to allocate the array correctly.)
  format[ 2 ] = "text";
  format[ 1 ] = "text";
  format[ 0 ] = "image";
  columns[ 2 ] = "Description";
  columns[ 1 ] = "Name";
  columns[ 0 ] = "Activity.gif";
  doc_row1 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:empty_doc_row );
  relate doc_row1 to doc_tbl across R2317;
  for each a_e in a_es
    // Activity Edge
    if ( ( "" != a_e.Guard ) or ( "" != a_e.Descrip ) )
      columns[ 2 ] = a_e.Descrip;
      columns[ 1 ] = a_e.Guard;
      columns[ 0 ] = "ActivityEdge.gif";
      doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
      doc_row1 = doc_row2;
    end if;
  end for;
  select many a_gas related by a_ns->A_ACT[R1105]->A_GA[R1107];
  for each a_ga in a_gas
    // Activity Action
    columns[ 2 ] = a_ga.Descrip;
    columns[ 1 ] = a_ga.Name;
    columns[ 0 ] = "GenericAction.gif";
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
  end for;
  select many a_ates related by a_ns->A_ACT[R1105]->A_AE[R1107]->A_ATE[R1112];
  for each a_ate in a_ates
    // Accept Time Event
    columns[ 2 ] = a_ate.Descrip;
    columns[ 1 ] = a_ate.Name;
    columns[ 0 ] = "AcceptTimeEvent.gif";
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
  end for;
  select many a_aeas related by a_ns->A_ACT[R1105]->A_AE[R1107]->A_AEA[R1112];
  for each a_aea in a_aeas
    // Accept Event
    columns[ 2 ] = a_aea.Descrip;
    columns[ 1 ] = a_aea.Name;
    columns[ 0 ] = "AcceptEvent.gif";
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
  end for;
  select many a_sss related by a_ns->A_ACT[R1105]->A_SS[R1107];
  for each a_ss in a_sss
    // Send Signal
    columns[ 2 ] = a_ss.Descrip;
    columns[ 1 ] = a_ss.Name;
    columns[ 0 ] = "SendSignal.gif";
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
  end for;
  select many a_objs related by a_ns->A_OBJ[R1105];
  for each a_obj in a_objs
    // Activity Object
    columns[ 2 ] = a_obj.Descrip;
    columns[ 1 ] = a_obj.Name;
    columns[ 0 ] = "ObjectNode.gif";
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
  end for;
  select many a_inis related by a_ns->A_CTL[R1105]->A_INI[R1106] where ( selected.Descrip != "" );
  for each a_ini in a_inis
    // Initial Node
    columns[ 2 ] = a_ini.Descrip;
    columns[ 1 ] = "";
    columns[ 0 ] = "InitialNode.gif";
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
  end for;
  select many a_afs related by a_ns->A_CTL[R1105]->A_AF[R1106] where ( selected.Descrip != "" );
  for each a_af in a_afs
    // Final Node
    columns[ 2 ] = a_af.Descrip;
    columns[ 1 ] = "";
    columns[ 0 ] = "FinalNode.gif";
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
  end for;
  select many a_ffs related by a_ns->A_CTL[R1105]->A_FF[R1106] where ( selected.Descrip != "" );
  for each a_ff in a_ffs
    // Flow Final Node
    columns[ 2 ] = a_ff.Descrip;
    columns[ 1 ] = "";
    columns[ 0 ] = "FlowFinalNode.gif";
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
  end for;
  select many a_dms related by a_ns->A_CTL[R1105]->A_DM[R1106] where ( selected.Descrip != "" );
  for each a_dm in a_dms
    // Decision Merge
    columns[ 2 ] = a_dm.Descrip;
    columns[ 1 ] = "";
    columns[ 0 ] = "DecisionMergeNode.gif";
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
  end for;
  select many a_fjs related by a_ns->A_CTL[R1105]->A_FJ[R1106] where ( selected.Descrip != "" );
  for each a_fj in a_fjs
    // Decision Merge
    columns[ 2 ] = a_fj.Descrip;
    columns[ 1 ] = "";
    columns[ 0 ] = "ForkJoinNode.gif";
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
  end for;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("f927b4ff-be6c-4ea4-80b7-a90cc4642046",
	"2078cc27-fb6e-46a0-8076-5a62cb279dcd",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7ae559f3-bdf5-49c1-994e-414a0d06ce2b",
	"2078cc27-fb6e-46a0-8076-5a62cb279dcd",
	'doc_sec',
	"07319e3c-105e-4996-bfb1-bc8d37462007",
	0,
	'',
	"f927b4ff-be6c-4ea4-80b7-a90cc4642046",
	'');
INSERT INTO S_SPARM
	VALUES ("d7ef9d14-2e63-4f79-9663-32959b1849ba",
	"2078cc27-fb6e-46a0-8076-5a62cb279dcd",
	'title',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7ae559f3-bdf5-49c1-994e-414a0d06ce2b",
	'');
INSERT INTO PE_PE
	VALUES ("2078cc27-fb6e-46a0-8076-5a62cb279dcd",
	1,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5a2ff73d-1ee8-4a4f-ae55-3983e4a30034",
	"00000000-0000-0000-0000-000000000000",
	'docgen_functions',
	'',
	'ep_pkg = param.ep_pkg;
select many s_syncs related by ep_pkg->PE_PE[R8000]->S_SYNC[R8001];
if ( not_empty s_syncs )
  select any empty_doc_sec from instances of DOC_SEC where ( false );
  select any empty_doc_par from instances of DOC_PAR where ( false );
  select any empty_doc_row from instances of DOC_ROW where ( false );
  doc_sec1 = DOC_SEC::populate( title:param.title, subtitle:"Functions", parent_doc_sec:param.doc_sec );
  doc_par1 = DOC_PAR::populate( text:"", predecessor:empty_doc_par, doc_sec:doc_sec1 );
  doc_tbl = DOC_TBL::populate( title:ep_pkg.Name, num_cols:3, doc_par:doc_par1 );
  doc_row = empty_doc_row;
  // Add a header row to the table.
  format[ 2 ] = "text";
  format[ 1 ] = "text";
  format[ 0 ] = "image";
  columns[ 2 ] = "Description";
  columns[ 1 ] = "Name";
  columns[ 0 ] = "Function.gif";
  doc_row1 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row );
  relate doc_row1 to doc_tbl across R2317;
  for each s_sync in s_syncs
    columns[ 2 ] = s_sync.Descrip;
    columns[ 1 ] = s_sync.Name + "(";
    select many s_sparms related by s_sync->S_SPARM[R24];
    delimiter = "";
    for each s_sparm in s_sparms
      columns[ 1 ] = columns[ 1 ] + delimiter + s_sparm.Name;
      delimeter = ", ";
    end for;
    columns[ 1 ] = columns[ 1 ] + ")";
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
  end for;
  doc_sec2 = DOC_SEC::populate( title:"Function Activities", subtitle:"", parent_doc_sec:doc_sec1 );
  for each s_sync in s_syncs
    if ( ( "" != s_sync.Action_Semantics_internal ) or ( "" != s_sync.Descrip ) )
      title = s_sync.Name;
      doc_sec3 = DOC_SEC::populate( title:title, subtitle:"", parent_doc_sec:doc_sec2 );
      doc_par2 = DOC_PAR::populate( text:s_sync.Descrip, predecessor:empty_doc_par, doc_sec:doc_sec3 );
      doc_par3 = DOC_PAR::populate( text:s_sync.Action_Semantics_internal, predecessor:doc_par2, doc_sec:empty_doc_sec );
      doc_par3.formatted = false;
    end if;
  end for;     
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("04137c2e-07ed-4e72-b824-55c5d370ad9a",
	"5a2ff73d-1ee8-4a4f-ae55-3983e4a30034",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("efd290fb-667a-4088-a034-a550e95ec603",
	"5a2ff73d-1ee8-4a4f-ae55-3983e4a30034",
	'doc_sec',
	"07319e3c-105e-4996-bfb1-bc8d37462007",
	0,
	'',
	"04137c2e-07ed-4e72-b824-55c5d370ad9a",
	'');
INSERT INTO S_SPARM
	VALUES ("ff821424-d257-43c9-9281-be7d22323226",
	"5a2ff73d-1ee8-4a4f-ae55-3983e4a30034",
	'title',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"efd290fb-667a-4088-a034-a550e95ec603",
	'');
INSERT INTO PE_PE
	VALUES ("5a2ff73d-1ee8-4a4f-ae55-3983e4a30034",
	1,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5a8e01e3-8f3c-413d-8e8c-5a0e65ca4c7c",
	"00000000-0000-0000-0000-000000000000",
	'docgen_external_entities',
	'',
	'ep_pkg = param.ep_pkg;
select many s_ees related by ep_pkg->PE_PE[R8000]->S_EE[R8001];
if ( not_empty s_ees )
  select any empty_doc_sec from instances of DOC_SEC where ( false );
  select any empty_doc_par from instances of DOC_PAR where ( false );
  select any empty_doc_row from instances of DOC_ROW where ( false );
  doc_sec1 = DOC_SEC::populate( title:param.title, subtitle:"External Entity", parent_doc_sec:param.doc_sec );
  doc_par1 = DOC_PAR::populate( text:"", predecessor:empty_doc_par, doc_sec:doc_sec1 );
  doc_tbl = DOC_TBL::populate( title:ep_pkg.Name, num_cols:4, doc_par:doc_par1 );
  doc_row = empty_doc_row;
  // Add a header row to the table.
  format[ 3 ] = "text";
  format[ 2 ] = "text";
  format[ 1 ] = "text";
  format[ 0 ] = "image";
  columns[ 3 ] = "Bridges";
  columns[ 2 ] = "Description";
  columns[ 1 ] = "Name";
  columns[ 0 ] = "ExternalEntity.gif";
  doc_row1 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row );
  relate doc_row1 to doc_tbl across R2317;
  for each s_ee in s_ees
    columns[ 3 ] = "";
    select many s_brgs related by s_ee->S_BRG[R19];
    delimiter = "";
    for each s_brg in s_brgs
      columns[ 3 ] = columns[ 3 ] + delimiter + s_brg.Name;
      delimiter = ", ";
    end for;
    columns[ 2 ] = s_ee.Descrip;
    columns[ 1 ] = s_ee.Name;
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
  end for;
  doc_sec2 = DOC_SEC::populate( title:"External Entity Activities", subtitle:"", parent_doc_sec:doc_sec1 );
  for each s_ee in s_ees
    doc_sec3 = DOC_SEC::populate( title:s_ee.Name + " Activities", subtitle:"", parent_doc_sec:doc_sec2 );
    select many s_brgs related by s_ee->S_BRG[R19];
    for each s_brg in s_brgs
      if ( ( "" != s_brg.Action_Semantics_internal ) or ( "" != s_brg.Descrip ) )
        title = s_brg.Name;
        doc_sec4 = DOC_SEC::populate( title:title, subtitle:"", parent_doc_sec:doc_sec3 );
        doc_par2 = DOC_PAR::populate( text:s_brg.Descrip, predecessor:empty_doc_par, doc_sec:doc_sec4 );
        doc_par3 = DOC_PAR::populate( text:s_brg.Action_Semantics_internal, predecessor:doc_par2, doc_sec:empty_doc_sec );
        doc_par3.formatted = false;
      end if;
    end for;
  end for;
end if;
  
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("54a43640-ea23-416b-bd19-a1a0e0fb2bb8",
	"5a8e01e3-8f3c-413d-8e8c-5a0e65ca4c7c",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("22f66e49-363c-4797-8e36-a142c96e4cd5",
	"5a8e01e3-8f3c-413d-8e8c-5a0e65ca4c7c",
	'doc_sec',
	"07319e3c-105e-4996-bfb1-bc8d37462007",
	0,
	'',
	"54a43640-ea23-416b-bd19-a1a0e0fb2bb8",
	'');
INSERT INTO S_SPARM
	VALUES ("8b377cd2-120d-41bd-98bc-cc124ccb98f3",
	"5a8e01e3-8f3c-413d-8e8c-5a0e65ca4c7c",
	'title',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"22f66e49-363c-4797-8e36-a142c96e4cd5",
	'');
INSERT INTO PE_PE
	VALUES ("5a8e01e3-8f3c-413d-8e8c-5a0e65ca4c7c",
	1,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f07b40e9-29e0-4d2c-9006-a487fa54f9ca",
	"00000000-0000-0000-0000-000000000000",
	'docgen_associations',
	'',
	'ep_pkg = param.ep_pkg;
select many r_rels related by ep_pkg->PE_PE[R8000]->R_REL[R8001];
if ( not_empty r_rels )
  select any empty_doc_sec from instances of DOC_SEC where ( false );
  select any empty_doc_par from instances of DOC_PAR where ( false );
  select any empty_doc_row from instances of DOC_ROW where ( false );
  doc_sec = DOC_SEC::populate( title:param.title, subtitle:"Associations", parent_doc_sec:param.doc_sec );
  doc_par = DOC_PAR::populate( text:"", predecessor:empty_doc_par, doc_sec:doc_sec );
  doc_tbl = DOC_TBL::populate( title:ep_pkg.Name, num_cols:3, doc_par:doc_par );
  // Add a header row to the table.
  format[ 2 ] = "text";
  format[ 1 ] = "text";
  format[ 0 ] = "image";
  columns[ 2 ] = "Description";
  columns[ 1 ] = "Name";
  columns[ 0 ] = "Association.gif";
  doc_row1 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:empty_doc_row );
  relate doc_row1 to doc_tbl across R2317;
  for each r_rel in r_rels
    columns[ 2 ] = r_rel.Descrip;
    columns[ 1 ] = T::s(i:r_rel.Numb);
    doc_row2 = DOC_ROW::populate( count:doc_tbl.num_cols, format:format, columns:columns, predecessor:doc_row1 );
    doc_row1 = doc_row2;
  end for;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'');
INSERT INTO S_SPARM
	VALUES ("8eabf0d8-b737-4e79-8c3d-0e2d947fa1a9",
	"f07b40e9-29e0-4d2c-9006-a487fa54f9ca",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("185b7523-7a9d-44f0-8cb9-9988f0cb3867",
	"f07b40e9-29e0-4d2c-9006-a487fa54f9ca",
	'doc_sec',
	"07319e3c-105e-4996-bfb1-bc8d37462007",
	0,
	'',
	"8eabf0d8-b737-4e79-8c3d-0e2d947fa1a9",
	'');
INSERT INTO S_SPARM
	VALUES ("f749b567-6813-4f86-a653-f8c0e58835cb",
	"f07b40e9-29e0-4d2c-9006-a487fa54f9ca",
	'title',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"185b7523-7a9d-44f0-8cb9-9988f0cb3867",
	'');
INSERT INTO PE_PE
	VALUES ("f07b40e9-29e0-4d2c-9006-a487fa54f9ca",
	1,
	"480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("480a9a3c-fc95-457c-9892-2a0548c3c7b1",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO S_SYS_PROXY
	VALUES ("72100ca3-f004-4030-8bd1-cd03a8eca377",
	'docgen',
	1,
	'../docgen.xtuml');
