-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("3205deaa-b245-4320-a2cb-a70c46f74b2d",
	'assocFormalization',
	3812,
	'assocFormalization',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("cb173572-76d5-4a5e-aa84-f9a36a3a2825",
	"3205deaa-b245-4320-a2cb-a70c46f74b2d",
	'getID',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'// Checks the referential attributes connected to this formalization against
// the identifier attributes for the target object
// The target object is chosen based on the target parameter
// one = 0
// other = 1
// A linked formalization is complete when it has one referential attribute
// for each attribute in an identifier of the target class
// returns -1 if incomplete. else, returns the identifier number

ret = -1;

linked = self.rel;
select any o_obj from instances of O_OBJ where false;
if ( 0 == param.target )
  select one o_obj related by linked->R_AONE[R209]->R_RTO[R204]->R_OIR[R203]->O_OBJ[R201];
elif ( 1 == param.target )
  select one o_obj related by linked->R_AOTH[R210]->R_RTO[R204]->R_OIR[R203]->O_OBJ[R201];
end if;

// select all of the referential attributes
select many ras related by self->formalization[R3810]->referentialAttribute[R3811] where
  ( ( not_empty o_obj ) and
    ( (selected.objectName == o_obj.Name) or
      (selected.objectName == "" and selected.roleOrObj == o_obj.Name ) ) );
select many identifier_ras from instances of referentialAttribute where
  ( ( selected.o_obj == o_obj ) and
    ( selected.identifier1 or selected.identifier2 or selected.identifier3 ) );

// If a formalization exists for these identifier_ras, then they are NOT ready,
// unless this formalization is reflexive.
select any formalization related by identifier_ras->formalization[R3811];
if ( not_empty formalization )
  // If we are reflexive, do not short-circuit.
  r_assoc = self.rel;
  select one r_aone related by r_assoc->R_AONE[R209];
  select one r_aoth related by r_assoc->R_AOTH[R210];
  if ( r_aone.Obj_ID != r_aoth.Obj_ID )
    return -1;
  end if;
end if;

// select all attributes for ID1
select any o_id1 related by o_obj->O_ID[R104] where ( selected.Oid_ID == 0 );
select many o_attrs related by o_id1->O_ATTR[R105];

// Detect when formalization is NOT ready.
// If a referential attribute that is an identifier attribute has not
// been processed (by migrating from O_ATTR to O_RATTR as part of this
// masl2xtuml conversion code), then wait to formalize this association.
for each o_attr in o_attrs
  for each identifier_ra in identifier_ras
    if ( identifier_ra.Name == o_attr.Root_Nam )
      select one o_rattr related by o_attr->O_RATTR[R106];
      if ( empty o_rattr )
        return -1; // participant identifier referential is not in place yet
      end if;
    end if;
  end for;
end for;

if ( true == formalization::compareAttrSets( o_attrs:o_attrs, ras:ras ) ) 
  ret = 0;
else
  // check ID2
  select any o_id2 related by o_obj->O_ID[R104] where ( selected.Oid_ID == 1 );
  select many o_attrs related by o_id2->O_ATTR[R105];
  // Detect when formalization is NOT ready.
  for each o_attr in o_attrs
	for each identifier_ra in identifier_ras
	  if ( identifier_ra.Name == o_attr.Root_Nam )
		select one o_rattr related by o_attr->O_RATTR[R106];
		if ( empty o_rattr )
		  return -1; // participant identifier referential is not in place yet
		end if;
	  end if;
	end for;
  end for;
  if ( true == formalization::compareAttrSets( o_attrs:o_attrs, ras:ras ) )
	ret = 1;
  else
    // check ID3
	select any o_id3 related by o_obj->O_ID[R104] where ( selected.Oid_ID == 2 );
	select many o_attrs related by o_id3->O_ATTR[R105];
    // Detect when formalization is NOT ready.
	for each o_attr in o_attrs
	  for each identifier_ra in identifier_ras
		if ( identifier_ra.Name == o_attr.Root_Nam )
		  select one o_rattr related by o_attr->O_RATTR[R106];
		  if ( empty o_rattr )
			return -1; // participant identifier referential is not in place yet
		  end if;
		end if;
	  end for;
	end for;
	if ( true == formalization::compareAttrSets( o_attrs:o_attrs, ras:ras ) )
	  ret = 2;
	end if;
  end if;
end if;

return ret;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TPARM
	VALUES ("5f33f3fd-bc3c-4625-801b-356fa462118b",
	"cb173572-76d5-4a5e-aa84-f9a36a3a2825",
	'target',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'calculate isComplete with respect to the one object or other object
one = 0
other = 1');
INSERT INTO O_NBATTR
	VALUES ("d8ccb78e-31e2-4fa5-a5b4-e30ff56695a9",
	"3205deaa-b245-4320-a2cb-a70c46f74b2d");
INSERT INTO O_BATTR
	VALUES ("d8ccb78e-31e2-4fa5-a5b4-e30ff56695a9",
	"3205deaa-b245-4320-a2cb-a70c46f74b2d");
INSERT INTO O_ATTR
	VALUES ("d8ccb78e-31e2-4fa5-a5b4-e30ff56695a9",
	"3205deaa-b245-4320-a2cb-a70c46f74b2d",
	"00000000-0000-0000-0000-000000000000",
	'rel',
	'',
	'',
	'rel',
	0,
	"7f02c6dd-ea5d-4892-801e-a1515764350f",
	'',
	'');
INSERT INTO S_DT_PROXY
	VALUES ("7f02c6dd-ea5d-4892-801e-a1515764350f",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Linked Association>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Association/Association.xtuml');
INSERT INTO O_ID
	VALUES (0,
	"3205deaa-b245-4320-a2cb-a70c46f74b2d");
INSERT INTO O_ID
	VALUES (1,
	"3205deaa-b245-4320-a2cb-a70c46f74b2d");
INSERT INTO O_ID
	VALUES (2,
	"3205deaa-b245-4320-a2cb-a70c46f74b2d");
INSERT INTO PE_PE
	VALUES ("3205deaa-b245-4320-a2cb-a70c46f74b2d",
	1,
	"1800b076-78da-4923-9981-c067ad8e1b87",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("1800b076-78da-4923-9981-c067ad8e1b87",
	"c14b4fcc-99ce-417f-85d7-ac22e2d20288",
	"c14b4fcc-99ce-417f-85d7-ac22e2d20288",
	'm2x',
	'',
	0,
	'../m2x.xtuml');
