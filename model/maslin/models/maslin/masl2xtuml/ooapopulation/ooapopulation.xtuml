-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ooapopulation',
	3801,
	'ooapopulation',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("87050544-e583-4582-86a9-367a73543eb0",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'populate',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'// Populate OOAofOOA.

element = param.element;
value = param.value;

select any ooapopulation from instances of ooapopulation;
if ( empty ooapopulation )
  create object instance ooapopulation of ooapopulation;
  ooapopulation.processingIdentifier = 0;
  ooapopulation.processingISM = true;
  ooapopulation.processingProject = false;
end if;

// deal with pragma stack
if ( "" == value[0] and "" == value[1] and "" == value[2] and "" == value[3] and	// If all values are empty, it is
	 "" == value[4] and "" == value[5] and "" == value[6] and "" == value[7] )		// an end tag
  select one current_element related by ooapopulation->ooaelement[R3801];
  if ( not_empty current_element )
    if ( ooaelement::ismarkable( type: element ) )
	  select one markable related by current_element->ooamarkable[R3806];
	  markable.render_pragmas();
    end if;
    //ooaelement::trace( population: ooapopulation );
    current_element.pop_stack();
  else
    TRACE::log( flavor:"failure", id:55, message:"Element stack is malformed." );
    ooaelement::trace( population: ooapopulation );
  end if;
elif ( not ( "typeref" == element or 		// exclude leaf nodes in stack
  	   "referential" == element or
  	   "pragmaitem" == element or 
  	   "transition" == element or
  	   "expression" == element or
  	   "description" == element or
  	   "codeblock" == element ) )
  ooaelement::populate( population: ooapopulation, type: element );
end if;

// divert to project processing if we are processing a project
if ( "project" == element or ooapopulation.processingProject )
  ooapopulation::populate_project( element:param.element, value:param.value, ooapopulation:ooapopulation );
  return;
end if;

if ( "domain" == element )
  if ( "" == param.value[0] )
  	  // formalize the provided interface reference for the domain
  	  c_c = ooapopulation.current_component;
  	  lib_pkg = ooapopulation.lib_pkg;
  	  if ( not_empty c_c and not_empty lib_pkg )
    	select any shared_pkg related by lib_pkg->PE_PE[R8000]->EP_PKG[R8001] where (selected.Name == "Shared");
        comp_if_name = c_c.Name;
        select any comp_if related by shared_pkg->PE_PE[R8000]->C_I[R8001] where (selected.Name == comp_if_name);
  		select any new_ir related by comp_if->C_IR[R4012];
  		ooapopulation.InterfaceReference_formalize(c_i:comp_if, c_ir:new_ir);
  	  end if;

      select any c_c from instances of C_C where (false);
      ooapopulation.current_component = c_c;
    
      // Now that we are done processing the domain, formalize relationships
      // TODO - does not work yet - if ( !processingProject ) ooapopulation.batchFormalize();
  else
    ooapopulation.transformDomain(name:param.value[0]);
  end if;
elif ( "object" == element )
  if ( "" == param.value[0] )
    select any o_obj from instances of O_OBJ where (false);
    ooapopulation.current_class = o_obj;
    ooapopulation.processingIdentifier = 0;
  else
    ooapopulation.transformObject(name:param.value[0]);
  end if;
elif ( "terminator" == element )
  if ( "" == param.value[0] )
  	// formalize the new interface reference to it
  	comp_if = ooapopulation.current_interface;
  	select any new_ir related by comp_if->C_IR[R4012];
  	ooapopulation.InterfaceReference_formalize(c_i:comp_if, c_ir:new_ir);
  	
  	// copy the codeblocks into the right locations
  	select many c_eps related by comp_if->C_EP[R4003];
  	for each c_ep in c_eps
      // copy over the codeblock
      string = c_ep.Descrip;
      start_index = STRING::indexof( haystack:string, needle:"<codeblock>" );
      end_index = STRING::indexof( haystack:string, needle:"</codeblock>" );
      message_cb = "";
      if ( -1 != start_index and -1 != end_index )
        message_cb = "codeblock:" + STRING::substr( s:string, begin:start_index+11, end:end_index ) + "\n";
      end if;
      c_ep.Descrip = "";

      select any spr_ro related by c_ep->SPR_REP[R4500]->SPR_RO[R4502];
  	  if ( not_empty spr_ro )
        spr_ro.Action_Semantics_internal = spr_ro.Action_Semantics_internal + message_cb;
  	  end if;
  	end for;

    select any c_i from instances of C_I where (false);
    ooapopulation.current_interface = c_i;
  else
    ooapopulation.transformTerminator(name:param.value[0]);
  end if;
elif ( "activity" == element )
  if ( "" != param.value[0] )
    ooapopulation.transformActivity();
  end if;
elif ( "parameter" == element )
  if ( "" == param.value[0] )
    select any s_sparm from instances of S_SPARM where (false);
    ooapopulation.current_function_param = s_sparm;
    select any o_tparm from instances of O_TPARM where (false);
    ooapopulation.current_operation_param = o_tparm;
    select any c_pp from instances of C_PP where (false);
    ooapopulation.current_interface_param = c_pp;
    select any sm_evtdi from instances of SM_EVTDI where (false);
    ooapopulation.current_event_dataitem = sm_evtdi;
    // TODO - null out other parameter cache values as they are implemented
  else
    ooapopulation.transformParameter(name:param.value[0], direction:param.value[1]);
  end if;
elif ( "identifier" == element )
  if ( "" != param.value[0] )
    // Note that this works in concert with object processing, which resets the processingIdentifier attribute to 0 when we
    // see the end of an object.  By setting back to 0, the following increment will mean any identifier specified with
    // "identifier is" will either be in I2 or I3
    ooapopulation.processingIdentifier = ooapopulation.processingIdentifier + 1;
    // Safety check to not exceed xtUML limit of 3 identifiers
    if ( 3 == ooapopulation.processingIdentifier )
      TRACE::log( flavor:"warning", id:59, message:"Maximum number of class identifiers reached.  Adding to I3." );
      ooapopulation.processingIdentifier = 2;
    end if;
  end if;
elif ( "attribute" == element )
  if ( "" == param.value[0] )
    select any o_attr from instances of O_ATTR where (false);
    ooapopulation.current_attribute = o_attr;
  else
    if ( ooapopulation.processingIdentifier >= 1 )
      // Set the named attribute as an identifier on the current_class.  NOTE that we assume here that the attribute
      //   has already been created inside the current class.
      o_obj = ooapopulation.current_class;
      // Check if the identifier specified is a referential attribute.   If it is, put the identifier number into the cache.
      // If it is not a referential, just make the attribute an identifier.
      select any ref_o_attr from instances of referentialAttribute where ( (selected.o_attr.Root_Nam == param.value[0]) and (selected.o_obj == o_obj));
      if ( not_empty ref_o_attr )
        if ( 1 == ooapopulation.processingIdentifier )
          ref_o_attr.identifier2 = true;
        elif ( 2 == ooapopulation.processingIdentifier )
          ref_o_attr.identifier3 = true;
        end if;
      else
        select any o_attr related by o_obj->O_ATTR[R102] where ( selected.Root_Nam == param.value[0] );      
        ooapopulation.Attribute_addToIdentifier(o_attr:o_attr, oid:ooapopulation.processingIdentifier);
      end if;
    else
      ooapopulation.transformAttribute(name:param.value[0], preferred:param.value[1], unique:param.value[2]);
    end if;
  end if;
elif ( "referential" == element )
  ooapopulation.transformReferential(attrName:param.value[4], relationship:param.value[0], roleOrObj:param.value[2], objName:param.value[3]);
elif ( "state" == element )
  if ( "" == param.value[2] )
    select any sm_state from instances of SM_STATE where (false);
    ooapopulation.current_state = sm_state;
  else
    ooapopulation.transformState(name:param.value[2], type:param.value[3], domain:param.value[0], obj:param.value[1]);
  end if;
elif ( "event" == element )
  if ( "" == param.value[0] )
  	select any sm_evt from instances of SM_EVT where (false);
  	ooapopulation.current_event = sm_evt;
  else
    ooapopulation.transformEvent(name:param.value[0], type:param.value[1]);
  end if;
elif ( "exception" == element )
  if ( "" == param.value[0] )
    select any s_exp from instances of S_EXP where ( false );
    ooapopulation.current_exp = s_exp;
  else
    ooapopulation.transformException(name:param.value[0], visibility:param.value[1] );
  end if;
elif ( "type" == element )
  if ( "" == param.value[0] )
  	select any s_dt from instances of S_DT where (false);
  	ooapopulation.current_type = s_dt;
  else
    ooapopulation.transformType(name:param.value[0], visibility:param.value[1], definition:param.value[2]);
  end if;
elif ( "typeref" == element )
  if ( "" != param.value[0] )
    // TODO - note that we''re current making all typerefs public.  Perhaps we''ll need a mechanism to migrate them from public to private (and 
    //   rehome their parent package)?
    ooapopulation.transformType(name:param.value[0], visibility:"public", definition:"");
    
    // TODO - Now that we created a typeref, create a switch statement that sets whatever element we''re currently processing to the type
    //   cases: attribute, s_sync/o_tfr/c_io return type, s_sync/o_tfr/c_io parameter, etc
    o_attr = ooapopulation.current_attribute;
    s_sparm = ooapopulation.current_function_param;
    o_tparm = ooapopulation.current_operation_param;
    c_pp = ooapopulation.current_interface_param;
    sm_evtdi = ooapopulation.current_event_dataitem;
    o_tfr = ooapopulation.current_class_op;
    c_ep = ooapopulation.current_executable_property;
    s_sync = ooapopulation.current_domain_function;
    select one c_io related by c_ep->C_IO[R4004];

    if ( not_empty o_attr )
      ooapopulation.Attribute_setType(o_attr:ooapopulation.current_attribute, type_name:param.value[0]); 
    elif ( not_empty s_sparm )
      ooapopulation.FunctionParameter_setType(s_sparm:ooapopulation.current_function_param, type_name:param.value[0]); 
      // also set type for the corresponding interface message parameter
      if ( not_empty c_pp )
        ooapopulation.InterfaceParameter_setType(c_pp:ooapopulation.current_interface_param, type_name:param.value[0]);
      end if;
    elif ( not_empty o_tparm )
      ooapopulation.OperationParameter_setType(o_tparm:ooapopulation.current_operation_param, type_name:param.value[0]); 
    elif ( not_empty c_pp )
      ooapopulation.InterfaceParameter_setType(c_pp:ooapopulation.current_interface_param, type_name:param.value[0]);
    elif ( not_empty sm_evtdi )
      ooapopulation.StateMachineEventDataItem_setType(sm_evtdi:ooapopulation.current_event_dataitem, type_name:param.value[0]);
    elif ( not_empty o_tfr )
      ooapopulation.Operation_setReturnType(o_tfr:o_tfr, type_name:param.value[0]);
    elif ( not_empty s_sync )
      ooapopulation.Function_setReturnType(s_sync:s_sync, type_name:param.value[0]);
      // also set return type for the corresponding interface message
      if ( not_empty c_io )
        ooapopulation.InterfaceOperation_setReturnType(c_io:c_io, type_name:param.value[0]);
      end if;
    elif ( not_empty c_io )
      ooapopulation.InterfaceOperation_setReturnType(c_io:c_io, type_name:param.value[0]);
    end if;

  end if;
elif ( "associative" == element )
  if ( "" == param.value[0] )
    ooapopulation.transformAssociation();
    ooapopulation.clearRelationshipCache();
  else
    ooapopulation.current_rel.type = RELATIONSHIP_TYPE::ASSOCIATIVE;
    ooapopulation.current_rel.number = param.value[0];
    ooapopulation.current_rel.usingObj = param.value[2];
  end if;
elif ( "regularrel" == element )
  if ( "" == param.value[0] )
    ooapopulation.transformAssociation();
    ooapopulation.clearRelationshipCache();
  else
    ooapopulation.current_rel.type = RELATIONSHIP_TYPE::REGULAR;
    ooapopulation.current_rel.number = param.value[0];
  end if;
elif ( "subsuper" == element )
  if ( "" == param.value[0] )
    ooapopulation.transformAssociation();
    ooapopulation.clearRelationshipCache();
  else
    ooapopulation.current_rel.type = RELATIONSHIP_TYPE::SUBSUPER;
    ooapopulation.current_rel.number = param.value[0];
  end if;
elif ( "participation" == element )
  if ( "" != param.value[1] )
    isFirst = false;
    select any firstPart from instances of ooaparticipation where ( selected.isFirst == true );
    if ( empty firstPart )
      isFirst = true;
    end if;
    create object instance part of ooaparticipation;
    part.fromDomain = param.value[0];
    part.className = param.value[1];
    part.phrase = param.value[2];
    part.conditionality = ooaparticipation::getCond(text:param.value[3]);
    part.multiplicity = ooaparticipation::getMult(text:param.value[4]); 
    part.isFirst = isFirst;
  end if;
elif ( "routine" == element )
  //  See if we''re processing inside a domain or terminator.  Then call the appropriate conversion function.
  if ( "" == param.value[3] )
    // check for duplicate routines
    ooapopulation.mergeDuplicateRoutines();
    select any s_sync from instances of S_SYNC where ( false );
    ooapopulation.current_domain_function = s_sync;
    select any c_ep from instances of C_EP where ( false );
    ooapopulation.current_executable_property = c_ep;
    // Note that we do not clear self.current_interface here because if we are processing inside a terminator definition we
    //   will see multiple routines within the interface and we don''t want to clear out this cached interface after the 
    //   first routine we see.
  else
    c_i = ooapopulation.current_interface;
    if ( (not_empty c_i) or ( "" != param.value[1]) )
      ooapopulation.transformTerminatorService(visibility:param.value[2], name:param.value[3], domain:param.value[0], terminator:param.value[1]);
    else
      ooapopulation.transformDomainFunction(visibility:param.value[2], name:param.value[3], domain:param.value[0], terminator:param.value[1]);
    end if;
  end if;
elif ( "operation" == element )
  if ( "" == param.value[3] )
    // check for duplicate operations
    ooapopulation.mergeDuplicateOperations();
    select any o_tfr from instances of O_TFR where (false);
    ooapopulation.current_class_op = o_tfr;
  else
    ooapopulation.transformObjectFunction(visibility:param.value[2], name:param.value[3], instance:param.value[4], relationship:param.value[5], domain:param.value[0], obj:param.value[1]);
  end if;
elif ( "transitiontable" == element )
  if ( "assigner" == param.value[0] )
    ooapopulation.processingISM = false;
  else
    ooapopulation.processingISM = true;
  end if;
elif ( "transition" == element )
  ooapopulation.transformTransition(eventName:param.value[3], startState:param.value[0], endState:param.value[4]);
elif ( "codeblock" == element )
  s_sync = ooapopulation.current_domain_function;
  if ( not_empty s_sync )
    s_sync.Action_Semantics_internal = s_sync.Action_Semantics_internal + "codeblock:" + param.value[0] + "\n";
  end if;

  c_ep = ooapopulation.current_executable_property;
  if ( not_empty c_ep )
    // stash in Descrip field until formalization or merge
    c_ep.Descrip = c_ep.Descrip + "<codeblock>" + param.value[0] + "</codeblock>";
  end if;
  
  o_tfr = ooapopulation.current_class_op;
  if ( not_empty o_tfr )
    o_tfr.Action_Semantics_internal = o_tfr.Action_Semantics_internal + "codeblock:" + param.value[0] + "\n";
  end if;
  
  sm_state = ooapopulation.current_state;
  if ( not_empty sm_state )
    select one sm_act related by sm_state->SM_MOAH[R511]->SM_AH[R513]->SM_ACT[R514];
    if ( not_empty sm_act )
      sm_act.Action_Semantics_internal = sm_act.Action_Semantics_internal + "codeblock:" + param.value[0] + "\n";
    end if;
  end if;
  
  // TODO - handle code blocks for routines that are terminator services
elif ( "pragma" == element )
  if ( "" == param.value[0] )
    select any pragma from instances of ooapragma where (false);
    ooapopulation.current_pragma = pragma;
  else
  	select one parent_element related by ooapopulation->ooaelement[R3801]->ooaelement[R3805.''child of''];
  	if ( not_empty parent_element )
      if ( ooaelement::ismarkable( type: parent_element.type ) )		// ignore pragma if we are not on a markable element
        select one markable related by parent_element->ooamarkable[R3806];
        ooapopulation.current_pragma = ooapragma::populate( name:value[0], list:value[1], markable:markable );
      end if;
  	else
      TRACE::log( flavor:"failure", id:56, message:"Element stack is malformed." );
      ooaelement::trace( population: ooapopulation );
    end if;
  end if;
elif ( "pragmaitem" == element )
  select one current_element related by ooapopulation->ooaelement[R3801];
  if ( not_empty current_element )
    if ( "pragma" == current_element.type )	// ignore if not child of pragma
      ooapragma_item::populate( value:value[0], pragma:ooapopulation.current_pragma );
    end if;
  else
    TRACE::log( flavor:"failure", id:57, message:"Element stack is malformed." );
    ooaelement::trace( population: ooapopulation );
  end if;
elif ( "description" == element )
  select one current_element related by ooapopulation->ooaelement[R3801];
  ooapopulation.transformDescription( element:current_element, text:value[0], tag:value[1] );
else
  // TRACE::log( flavor:"failure", id:59, message:"maslin unrecognized element:  " + element );
end if;
',
	1,
	'',
	"3a4da8df-5db0-459c-90a7-bc2da0000b34");
INSERT INTO O_TPARM
	VALUES ("131c349a-c035-4ed0-854f-b9f18d804b36",
	"87050544-e583-4582-86a9-367a73543eb0",
	'element',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("b7e1dbc7-2e46-4b35-82f2-fbf411d3d1b0",
	"87050544-e583-4582-86a9-367a73543eb0",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'[8]',
	"131c349a-c035-4ed0-854f-b9f18d804b36",
	'');
INSERT INTO S_DIM
	VALUES (8,
	0,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"b7e1dbc7-2e46-4b35-82f2-fbf411d3d1b0",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"b7b3e016-0c9c-42a6-ad94-320b2a9deec2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("a442a038-3373-4282-a5fc-098af44e9cbe",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformProject',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// A MASL project is not the same as an xtUML project.  A MASL project is a system wiring specification.
// Due to the way the m2m population happens, we don''t know if we''ll see a project or domain definitions
// first.  Thus, we make sure an xtUML system is singlularly created no matter what comes first.
self.createSystem();

// Create a package named the same as the project and cache it
self.transformDomain(name:param.name);

',
	1,
	'',
	"9fda3415-6862-461d-ab35-5239c783bde0");
INSERT INTO O_TPARM
	VALUES ("0328c5d5-16a3-4b55-b5b6-f0d134aec768",
	"a442a038-3373-4282-a5fc-098af44e9cbe",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("0ff33986-594c-49e8-84a0-7eb628272d32",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'SystemModel_newPackage',
	'',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	1,
	's_sys = param.s_sys;

create object instance package of EP_PKG;
create object instance pe of PE_PE;
relate pe to package across R8001;
relate package to s_sys across R1401;
relate package to s_sys across R1405;
pe.type = ElementTypeConstants::PACKAGE;
self.PackageableElement_initialize(pe_pe:pe);
self.Package_initialize(ep_pkg:package, name:param.pkg_name);

return package; ',
	1,
	'',
	"f5223167-a55c-4363-aa92-45c59ad16ea7");
INSERT INTO O_TPARM
	VALUES ("c0ea2b5d-984c-4673-8b25-82eec8098da2",
	"0ff33986-594c-49e8-84a0-7eb628272d32",
	's_sys',
	"4b886601-55ee-4d42-a1f8-f5c45d459db2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4b886601-55ee-4d42-a1f8-f5c45d459db2",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<System Model>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Domain/Domain.xtuml');
INSERT INTO O_TPARM
	VALUES ("30807aa7-d095-4157-bcc4-c73f861e33bb",
	"0ff33986-594c-49e8-84a0-7eb628272d32",
	'pkg_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c0ea2b5d-984c-4673-8b25-82eec8098da2",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9939c670-a721-4742-a824-ed4b0df4acd6",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Package>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Element Packaging/Element Packaging.xtuml');
INSERT INTO O_TFR
	VALUES ("6d27ebf1-bb50-4835-85e2-b21d260ab92c",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'PackageableElement_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// TODO - The parameter to this function needs to be changed from integer to inst_ref<PackageableElement>
pe_pe = param.pe_pe;
pe_pe.Visibility = Visibility::Public;',
	1,
	'',
	"4674a4f2-d6c3-40d5-a1ce-972563d69338");
INSERT INTO O_TPARM
	VALUES ("6a17224a-e16d-4c87-a4b6-3504f24b8992",
	"6d27ebf1-bb50-4835-85e2-b21d260ab92c",
	'pe_pe',
	"e988e223-9ca4-4b6f-a675-001eefe3aa24",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e988e223-9ca4-4b6f-a675-001eefe3aa24",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Packageable Element>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Packageable Element/Packageable Element.xtuml');
INSERT INTO O_TFR
	VALUES ("9c97aa3a-d0d2-409c-86d0-9194db2476c5",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Package_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'param.ep_pkg.Name = param.name;',
	1,
	'',
	"1c15c7e3-850c-4202-aa6d-1eff282a7b8e");
INSERT INTO O_TPARM
	VALUES ("5a94768b-9a96-4630-93bc-5fb624b542cc",
	"9c97aa3a-d0d2-409c-86d0-9194db2476c5",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("73477a97-5ece-48fc-b867-a6d17b3feb4a",
	"9c97aa3a-d0d2-409c-86d0-9194db2476c5",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5a94768b-9a96-4630-93bc-5fb624b542cc",
	'');
INSERT INTO O_TFR
	VALUES ("07d3849c-9f14-49f4-8d47-bb9f1891ecc0",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformDomain',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'self.createSystem();

if ( self.processingProject )
  // Create a component reference in the project wiring package
  lib_pkg = self.lib_pkg;
  if ( not_empty lib_pkg )
    cl_ic = self.Package_newImportedComponent(ep_pkg:lib_pkg);
    cl_ic.Descrip = "name:" + param.name + "\n";
    cl_ic.Name = param.name;
    self.current_imported_component = cl_ic;
  end if;

  // Create an informal required interface off of the system wiring (project) component for the imported domain
  new_ir = self.Component_initializeRequirement(c_c:self.current_component, port_name:param.name, if_name:param.name);
else
  // Create a package named the same as the domain and cache it
  self.lib_pkg = self.SystemModel_newPackage(s_sys:self.current_sys, pkg_name:param.name);

  // Create a component in the library package if it doesn''t already exist
  lib_pkg = self.lib_pkg;
  select any c_c related by lib_pkg->PE_PE[R8000]->C_C[R8001] where ( param.name == selected.Name );

  if ( empty c_c )
    // Create the component itself and a package inside it to hold the internal behavior
    c_c = self.Package_newComponent(ep_pkg:self.lib_pkg, component_name:param.name);
    internal_bhv_pkg = self.Component_newPackage(c_c:c_c, pkg_name:param.name);

    // Create a package to hold public bits that other components will need visibility to
    shared_pkg = self.Package_newPackage(ep_pkg:self.lib_pkg, package_name:"Shared");
  end if;

  self.current_component = c_c;
end if;
',
	1,
	'',
	"2a7c6bb3-a25a-4f91-879b-e7d0557c7647");
INSERT INTO O_TPARM
	VALUES ("8da4d30c-a69d-4f29-a03f-feaa156369bb",
	"07d3849c-9f14-49f4-8d47-bb9f1891ecc0",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("59fd5264-7d22-47ce-a615-605f9ee03143",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Package_newComponent',
	'',
	"67f93d18-1045-4c6c-b0d5-a692023c471c",
	1,
	'ep_pkg = param.ep_pkg;

create object instance component of C_C;
// create Packageable Element supertype and hook up to this package.
create object instance pe of PE_PE;
relate component to pe across R8001;
relate pe to ep_pkg across R8000;
pe.type = ElementTypeConstants::COMPONENT;
self.PackageableElement_initialize(pe_pe:pe);
self.Component_initialize(c_c:component, name:param.component_name);

return component;',
	1,
	'',
	"c46c404c-7529-4f5d-a19f-bd7f8ce04703");
INSERT INTO O_TPARM
	VALUES ("516962af-ce9e-4d62-a525-bbbbeaa22aec",
	"59fd5264-7d22-47ce-a615-605f9ee03143",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("76af9b0d-2e19-40ad-a6b9-9a4aff04722c",
	"59fd5264-7d22-47ce-a615-605f9ee03143",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"516962af-ce9e-4d62-a525-bbbbeaa22aec",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("67f93d18-1045-4c6c-b0d5-a692023c471c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Component>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Component/Component.xtuml');
INSERT INTO O_TFR
	VALUES ("69c066cc-2506-4998-b894-060151a8f78f",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Component_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'param.c_c.Name = param.name;',
	1,
	'',
	"edbc08df-df72-4ee9-9365-1a3d836b9fbd");
INSERT INTO O_TPARM
	VALUES ("f65484fc-8457-4608-a4a6-aaecf7953533",
	"69c066cc-2506-4998-b894-060151a8f78f",
	'c_c',
	"67f93d18-1045-4c6c-b0d5-a692023c471c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("9d676a9b-81ea-4e5a-8daa-b049672d005e",
	"69c066cc-2506-4998-b894-060151a8f78f",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f65484fc-8457-4608-a4a6-aaecf7953533",
	'');
INSERT INTO O_TFR
	VALUES ("8dc83f08-897b-47cb-9ef3-db03c1fa412c",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ComponentReference_assignToComp',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// This function is heavily modified from the OOAofOOA version.  Notably, a huge block of code to handle the case
// where the component reference is already assigned to a component is removed as we are only using this for 
// fresh component reference creation.

cl_ic = param.cl_ic;  // TODO - This needs Component Reference to have it''s inst_ref published and the parameter type fixed
comp = param.c_c;

select one packageableElem related by cl_ic->PE_PE[R8001]; 
select one contPackage related by packageableElem->EP_PKG[R8000];
select one contComponent related by packageableElem->C_C[R8003];
if(not_empty comp)
  relate cl_ic to comp across R4201;
  select many formalInterfaces related by comp->C_PO[R4010]->C_IR[R4016];
  for each formalInterface in formalInterfaces
    // If the association between self and C_I is set up
    // then this reference is formal
    // TODO - SKB: here I skipped a function call because it would require published ref on C_IR, maybe should use
    //   that for consistency...
    select one c_i related by formalInterface->C_I[R4012];
    if(not_empty c_i)
      select any existingImportRef related by cl_ic->CL_POR[R4707]->CL_IIR[R4708]->C_IR[R4701]
                                      where (selected.Id == formalInterface.Id);
      if(empty existingImportRef)
        select one provision related by formalInterface->C_P[R4009];
        create object instance newImportedRef of CL_IIR;
        if(not_empty provision)
          create object instance importedPro of CL_IP;
          relate importedPro to newImportedRef across R4703;
        else
          create object instance importedReq of CL_IR;
          relate importedReq to newImportedRef across R4703;
        end if;
        create object instance portRef of CL_POR;
        select one existingPort related by formalInterface->C_PO[R4016];
        relate existingPort to portRef across R4709;
        relate portRef to cl_ic across R4707;
        relate portRef to newImportedRef across R4708;
        relate newImportedRef to formalInterface across R4701;
      end if;
    end if;
  end for; 
end if;
',
	1,
	'',
	"43829a09-886f-4a7f-9089-61faea422330");
INSERT INTO O_TPARM
	VALUES ("14d80979-ed8b-4fd8-9a8a-63dd3ec8e7ca",
	"8dc83f08-897b-47cb-9ef3-db03c1fa412c",
	'cl_ic',
	"4bf19d7e-1bcd-469a-b056-4523dd59dc1d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4bf19d7e-1bcd-469a-b056-4523dd59dc1d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Component Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Component/Component Library/Component Library.xtuml');
INSERT INTO O_TPARM
	VALUES ("54c1f990-33e8-435c-893b-378292930c52",
	"8dc83f08-897b-47cb-9ef3-db03c1fa412c",
	'c_c',
	"67f93d18-1045-4c6c-b0d5-a692023c471c",
	0,
	'',
	"14d80979-ed8b-4fd8-9a8a-63dd3ec8e7ca",
	'');
INSERT INTO O_TFR
	VALUES ("8b5937f7-610b-4bd3-9fe2-8b9e795cfd80",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformObject',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Create a Model Class with name if it doesn''t already exist, Put inside component''s "<component name>" pkg

// Get the package with the same name as the component, this is where we put the "internal behavior"
current_component = self.current_component;
select any internals_pkg related by current_component->PE_PE[R8003]->EP_PKG[R8001] where (selected.Name == current_component.Name);

// See if a model class already exists
select any o_obj related by internals_pkg->PE_PE[R8000]->O_OBJ[R8001] where (selected.Name == param.name);
self.current_class = o_obj;

if ( empty o_obj )
  // The object has not been declared already, create it
  self.current_class = self.Package_newClass(ep_pkg:internals_pkg, class_name: param.name); 
end if;

// TODO - this needs to work in concert with Package_newClass and ModelClass_initialize since the first time through 
//   could just be a forward declaration to an object.  Then the next time we see it we''ll be given more parameters
//   to configure the class with.  Thus, we need to do more work here to set the key letters, class number, etc if we
//   are given them as params.  Or, in the case where we saw the class defintion first then see another class declaration
//   later, we basically just do nothing and return.',
	1,
	'',
	"6bbce93d-eacd-45a2-b774-1aec0c108f3e");
INSERT INTO O_TPARM
	VALUES ("8b0d5f6b-5fc0-48dd-b987-acc00c37c87d",
	"8b5937f7-610b-4bd3-9fe2-8b9e795cfd80",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("747f4c49-5479-4ea7-b653-6c1a4424d418",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Component_newPackage',
	'',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	1,
	'c_c = param.c_c;

create object instance package of EP_PKG;
// create Packageable Element supertype and hook up to this package.
create object instance pe of PE_PE;
relate package to pe across R8001;
rootCompIdInPkg = self.Component_getRootComponentId(c_c:c_c);
select any rootComponent from instances of C_C where (selected.Id == rootCompIdInPkg);
select one system related by rootComponent->PE_PE[R8001]->EP_PKG[R8000]->S_SYS[R1405];
relate package to system across R1405;
relate c_c to pe across R8003;
self.Package_initialize(ep_pkg:package, name:param.pkg_name);
pe.type = ElementTypeConstants::PACKAGE;
self.PackageableElement_initialize(pe_pe:pe);

return package;',
	1,
	'',
	"de57cf0d-e159-4b31-907e-bba1cb341479");
INSERT INTO O_TPARM
	VALUES ("285fb005-4c64-4bab-a540-5f73ef671f89",
	"747f4c49-5479-4ea7-b653-6c1a4424d418",
	'c_c',
	"67f93d18-1045-4c6c-b0d5-a692023c471c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("761b2167-09f4-4856-aeaa-8757b3e7df80",
	"747f4c49-5479-4ea7-b653-6c1a4424d418",
	'pkg_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"285fb005-4c64-4bab-a540-5f73ef671f89",
	'');
INSERT INTO O_TFR
	VALUES ("edbc08df-df72-4ee9-9365-1a3d836b9fbd",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Component_getRootComponentId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'c_c = param.c_c;

// Component.getRootComponentId
// NOTE: Only intended for use in a generic package context
// Ascends the Component hierarchy to find the top component.
// The "top component" is the first component in this package. Note that
// this package may be nested.  The package could also by under a 
// component.  However, this routine finds the first component in 
// this package.  It does NOT search beyond the package boundary.
select one parentComponent related by c_c->PE_PE[R8001]->C_C[R8003];
if not_empty parentComponent
  return self.Component_getRootComponentId(c_c:parentComponent);
end if;
return c_c.Id;',
	1,
	'',
	"8dc83f08-897b-47cb-9ef3-db03c1fa412c");
INSERT INTO O_TPARM
	VALUES ("f8b32f28-f05b-4aca-bf2b-629bbb42455c",
	"edbc08df-df72-4ee9-9365-1a3d836b9fbd",
	'c_c',
	"67f93d18-1045-4c6c-b0d5-a692023c471c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("46927d95-5219-4409-9ecf-2a4bde2444bf",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'createSystem',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	's_sys = self.current_sys;
if ( empty s_sys )
  // Create the system model and cache it
  create object instance s_sys of S_SYS;

  s_sys.Name = "ConvertedModel";
  self.current_sys = s_sys;

  // Create a system level types package and cache it
  self.systypes_pkg = self.SystemModel_newPackage(s_sys:s_sys, pkg_name:"types");
  
  i = 0;
  s[ i ] = "";
  s[ 0 ] = "void";
  s[ 1 ] = "boolean";
  s[ 2 ] = "integer";
  s[ 3 ] = "character";
  s[ 4 ] = "wcharacter";
  s[ 5 ] = "byte";
  s[ 6 ] = "long_integer";
  s[ 7 ] = "real";
  s[ 8 ] = "string";
  s[ 9 ] = "wstring";
  s[ 10 ] = "date";
  s[ 11 ] = "duration";
  s[ 12 ] = "timestamp";
  s[ 13 ] = "timer";
  s[ 14 ] = "event";
  s[ 15 ] = "device";
  s[ 16 ] = "enum";
  s[ 17 ] = "structure";
  s[ 18 ] = "instance";
  s[ 19 ] = "MASLtype";
  i = 19;

  while ( i >= 0 )
    // Create the built-in MASL types.
    self.Package_newDatatype(ep_pkg:self.systypes_pkg, type_name:s[i], definition:"");
    i = i - 1;
  end while;
  
end if;

',
	1,
	'',
	"d38ae9a8-5ce0-4042-a2cc-14aae4cbc971");
INSERT INTO O_TFR
	VALUES ("dc1b8351-2cfd-4870-b038-21d1052f3c05",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'InterfaceReference_isFormal',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// TODO - populate this activity
return false;',
	1,
	'',
	"36fd6526-df46-4e49-a8b1-ee0bebdf9755");
INSERT INTO O_TPARM
	VALUES ("f4e74870-5f4d-4477-b491-66bc68360f61",
	"dc1b8351-2cfd-4870-b038-21d1052f3c05",
	'c_ir',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("fd3b1e58-e9c3-41df-a82e-724733a56a61",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformTerminator',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'lib_pkg = self.lib_pkg;

if ( self.processingProject )
  // Create provided interface off of the system wiring (project) component for this terminator, unless the name matches the "imported" 
  // domain we''re processing.  In that case we have already created a required interface when we saw the domain itself
  current_imported = self.current_imported_component;
  if ( not_empty current_imported )
    clic_name = current_imported.Name;
    if ( clic_name != param.name )
      comp_if_name = clic_name + param.name;
      new_ir = self.Component_initializeProvision(c_c:self.current_component, port_name:comp_if_name, if_name:comp_if_name);
      // create a temporary interface to store routines so the signature can be calculated
      create object instance c_i of C_I;
      c_i.Name = comp_if_name;
      self.current_interface = c_i;
    end if;
  end if;
else
  comp_if_name = self.current_component.Name + param.name;

  select any shared_pkg related by lib_pkg->PE_PE[R8000]->EP_PKG[R8001] where (selected.Name == "Shared");

  select any comp_if related by shared_pkg->PE_PE[R8000]->C_I[R8001] where (selected.Name == comp_if_name);
  if ( empty comp_if )
    // create the interface
    comp_if = self.Package_newInterface(ep_pkg:shared_pkg, interface_name:comp_if_name);
    // create a port & provided interface from the component
    comp_port_name = param.name;
    new_ir = self.Component_initializeRequirement(c_c:self.current_component, port_name:comp_port_name, if_name:"");
    relate comp_if to new_ir across R4012;    // formalize at end tag. for now, just relate it to the C_R
  end if;

  self.current_interface = comp_if;
end if;
',
	1,
	'',
	"cd1f0452-4df9-45c5-949f-e319f8cb63e8");
INSERT INTO O_TPARM
	VALUES ("2b20bdba-272e-4e7f-b097-c0e5ea0e5f52",
	"fd3b1e58-e9c3-41df-a82e-724733a56a61",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("10b41e09-87b2-4ef5-89ad-9ef4c39d9637",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformActivity',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	1,
	'',
	"7c945081-3482-4e6c-ae0f-158868c18ca3");
INSERT INTO O_TFR
	VALUES ("9fda3415-6862-461d-ab35-5239c783bde0",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformParameter',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Check to see what type of element this parameter goes to.  Pass control appropriately.
class_op = self.current_class_op;
domain_function = self.current_domain_function;
interface_message = self.current_executable_property;
evt = self.current_event;

if ( not_empty class_op )
  select any o_tparm related by class_op->O_TPARM[R117] where ( selected.Name == param.name );
  if ( empty o_tparm )
    self.current_operation_param = self.Operation_newParameter(o_tfr:class_op, parameter_name:param.name);
    if ( "in" == param.direction )
      self.current_operation_param.By_Ref = 0;	// by value
    elif ( "out" == param.direction )
      self.current_operation_param.By_Ref = 1;	// by ref
    end if;
  else
    self.current_operation_param = o_tparm;
  end if;
elif ( not_empty domain_function )
  select any s_sparm related by domain_function->S_SPARM[R24] where ( selected.Name == param.name );
  if ( empty  s_sparm )
    self.current_function_param = self.Function_newParameter(s_sync:domain_function, parameter_name:param.name);
    if ( "in" == param.direction )
      self.current_function_param.By_Ref = 0;	// by value
    elif ( "out" == param.direction )
      self.current_function_param.By_Ref = 1;	// by ref
    end if;
    // also create a parameter for the corresponding interface message
    if ( not_empty interface_message )
	  self.current_interface_param = self.Interface_newParameter(c_ep:interface_message, parameter_name:param.name);
	  if ( "in" == param.direction )
		self.current_interface_param.By_Ref = 0;	// by value
	  elif ( "out" == param.direction )
		self.current_interface_param.By_Ref = 1;	// by ref
	  end if;
    end if;
  else
    self.current_function_param = s_sparm;
  end if;
elif ( not_empty interface_message )
  select any c_pp related by interface_message->C_PP[R4006] where ( selected.Name == param.name );
  if ( empty c_pp )
    self.current_interface_param = self.Interface_newParameter(c_ep:interface_message, parameter_name:param.name);
    if ( "in" == param.direction )
      self.current_interface_param.By_Ref = 0;	// by value
    elif ( "out" == param.direction )
      self.current_interface_param.By_Ref = 1;	// by ref
    end if;
  else
    self.current_interface_param = c_pp;
  end if;
elif ( not_empty evt )
  select any sm_evtdi related by evt->SM_EVTDI[R532] where ( selected.Name == param.name );
  if ( empty sm_evtdi )
    self.current_event_dataitem = self.StateMachineEvent_newParameter( sm_evt:evt, parameter_name:param.name );
  else
    self.current_event_dataitem = sm_evtdi;
  end if;
end if;',
	1,
	'',
	"f2b299ab-c59f-4a3c-b813-659a745c2710");
INSERT INTO O_TPARM
	VALUES ("2cdbf275-4053-4059-9944-b935359ea8eb",
	"9fda3415-6862-461d-ab35-5239c783bde0",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("55369144-6cb9-4395-9f5c-c0722dec7b72",
	"9fda3415-6862-461d-ab35-5239c783bde0",
	'direction',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2cdbf275-4053-4059-9944-b935359ea8eb",
	'');
INSERT INTO O_TFR
	VALUES ("9438bf8f-4666-499e-9822-00e7b064286f",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformAttribute',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'attr_name = param.name;

self.current_attribute = self.ModelClass_newAttribute(o_obj:self.current_class, attr_name:attr_name);

if ( "preferred" == param.preferred )
  self.Attribute_addToIdentifier(o_attr:self.current_attribute, oid:0);
end if;

if ( "unique" == param.unique )
  self.transformType(name:"MASLunique", visibility:"public", definition:"");
  self.Attribute_setType(o_attr:self.current_attribute, type_name:"MASLunique");
end if;',
	1,
	'',
	"a1b455eb-8d8e-44a5-a755-7bd2a08eaec7");
INSERT INTO O_TPARM
	VALUES ("940cf8f4-900c-46df-8ea1-f1bf2112d77d",
	"9438bf8f-4666-499e-9822-00e7b064286f",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("c9da22f0-d999-4439-bff0-f37fcd96ea79",
	"9438bf8f-4666-499e-9822-00e7b064286f",
	'preferred',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"940cf8f4-900c-46df-8ea1-f1bf2112d77d",
	'');
INSERT INTO O_TPARM
	VALUES ("db6b42fc-fe49-46d2-a83d-b89e1e50a1d2",
	"9438bf8f-4666-499e-9822-00e7b064286f",
	'unique',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c9da22f0-d999-4439-bff0-f37fcd96ea79",
	'');
INSERT INTO O_TFR
	VALUES ("cd1f0452-4df9-45c5-949f-e319f8cb63e8",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformState',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'current_class = self.current_class;

if ( not_empty current_class )
  // We are in the midst of building a state machine inside a class definition.
  select any sm_sm from instances of SM_SM where ( false );
  if ( ("assigner" == param.type) or ("assigner start" == param.type) )
    sm_sm = self.ModelClass_create_sm(o_obj:current_class, sm_type:"ASM");
  else
    sm_sm = self.ModelClass_create_sm(o_obj:current_class, sm_type:"ISM");
  end if;

  //  Create new xtUML state machine state
  self.StateMachine_newState(sm_sm:sm_sm, name:param.name, type:param.type);

  // Cache the current state
  select any sm_state related by sm_sm->SM_STATE[R501] where ( selected.Name == param.name );
  self.current_state = sm_state;
else
  // No current_class.  That means we just need to find the given state and cache it so that the following 
  // SMASL can modify it.
  select any c_c from instances of C_C where ( selected.Name == param.domain );
  select any ep_pkg related by c_c->PE_PE[R8003]->EP_PKG[R8001] where ( selected.Name == param.domain );  // Internal behavior package has the same name as the component
  select any o_obj related by ep_pkg->PE_PE[R8000]->O_OBJ[R8001] where ( selected.Name == param.obj );
  
  // NOTE: We assume the are no state name collisions between the ISM and ASM.  We simply search for the named
  // state in the ISM first, then the ASM.
  select any sm_state related by o_obj->SM_ISM[R518]->SM_SM[R517]->SM_STATE[R501] where ( selected.Name == param.name );
  if ( empty sm_state )
    select any sm_state related by o_obj->SM_ASM[R519]->SM_SM[R517]->SM_STATE[R501] where ( selected.Name == param.name );
  end if;
  self.current_state = sm_state;  
end if;',
	1,
	'',
	"5834dfc6-c4a1-4b08-8149-5d52a504af4d");
INSERT INTO O_TPARM
	VALUES ("6cb4e208-1494-413a-bbd6-97b5eafc6fcd",
	"cd1f0452-4df9-45c5-949f-e319f8cb63e8",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("76efac52-8273-4c89-a55a-9e6c9f8d3248",
	"cd1f0452-4df9-45c5-949f-e319f8cb63e8",
	'type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6cb4e208-1494-413a-bbd6-97b5eafc6fcd",
	'');
INSERT INTO O_TPARM
	VALUES ("086db421-4722-49e6-90c5-ee0c27d1b8ef",
	"cd1f0452-4df9-45c5-949f-e319f8cb63e8",
	'domain',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"76efac52-8273-4c89-a55a-9e6c9f8d3248",
	'');
INSERT INTO O_TPARM
	VALUES ("04ca5f56-64b3-4db6-a6ae-06230c5c2d5f",
	"cd1f0452-4df9-45c5-949f-e319f8cb63e8",
	'obj',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"086db421-4722-49e6-90c5-ee0c27d1b8ef",
	'');
INSERT INTO O_TFR
	VALUES ("3ed1f3e8-afb7-40dc-a2d2-2caac1c499d4",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformEvent',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'current_class = self.current_class;

//  TODO - This currently doesn''t do anything with values other than assigner in the "type" parameter.  Needs to be
//    enhanced to handle these.

select any sm_sm from instances of SM_SM where ( false );
if ( "assigner" == param.type )
  sm_sm = self.ModelClass_create_sm(o_obj:current_class, sm_type:"ASM");
else
  sm_sm = self.ModelClass_create_sm(o_obj:current_class, sm_type:"ISM");
end if;

//  Create new xtUML state machine state
self.StateMachine_newEvent(sm_sm:sm_sm, name:param.name);

// Cache the current event
select any sm_evt related by sm_sm->SM_EVT[R502] where ( selected.Mning == param.name );
self.current_event = sm_evt;',
	1,
	'',
	"f2d9d56f-7fb7-485b-9cf5-6188743dd596");
INSERT INTO O_TPARM
	VALUES ("17fe3bc0-db1f-42ae-aaf8-128ca30e8063",
	"3ed1f3e8-afb7-40dc-a2d2-2caac1c499d4",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("6b5a687e-a02d-4776-ad84-6d78f739e88d",
	"3ed1f3e8-afb7-40dc-a2d2-2caac1c499d4",
	'type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"17fe3bc0-db1f-42ae-aaf8-128ca30e8063",
	'');
INSERT INTO O_TFR
	VALUES ("a9942ae9-1501-49c7-afb1-84aa422a85e5",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Package_newImportedComponent',
	'',
	"4bf19d7e-1bcd-469a-b056-4523dd59dc1d",
	1,
	'ep_pkg = param.ep_pkg;

create object instance importedComp of CL_IC;
// create Packageable Element supertype and hook up to this package.
create object instance pe of PE_PE;
relate importedComp to pe across R8001;
relate pe to ep_pkg across R8000;
pe.type = ElementTypeConstants::COMPONENT_REFERENCE;
self.PackageableElement_initialize(pe_pe:pe);

return importedComp;',
	1,
	'',
	"833a364d-a80a-4900-ba69-199bd9cc4581");
INSERT INTO O_TPARM
	VALUES ("e952b8f1-7170-41cf-90c0-cc2e46eff7d6",
	"a9942ae9-1501-49c7-afb1-84aa422a85e5",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("c46c404c-7529-4f5d-a19f-bd7f8ce04703",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Package_newClass',
	'',
	"63f4ff99-f127-443b-a678-30ace41da702",
	1,
	'ep_pkg = param.ep_pkg;

create object instance cl of O_OBJ;
// create Packageable Element supertype and hook up to this package.
create object instance pe of PE_PE;
relate cl to pe across R8001;
pe.type = ElementTypeConstants::CLASS;
self.PackageableElement_initialize(pe_pe:pe);

relate ep_pkg to pe across R8000;
self.ModelClass_initialize(o_obj:cl, name:param.class_name);

return cl;',
	1,
	'',
	"e5ab0186-8756-4d6c-bb89-26bf2f9e1423");
INSERT INTO O_TPARM
	VALUES ("9e81a5f3-e669-49c4-8751-23b2facf5522",
	"c46c404c-7529-4f5d-a19f-bd7f8ce04703",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("a18acae9-7cbd-4467-9517-c7dae02db45c",
	"c46c404c-7529-4f5d-a19f-bd7f8ce04703",
	'class_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9e81a5f3-e669-49c4-8751-23b2facf5522",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("63f4ff99-f127-443b-a678-30ace41da702",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Model Class>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Subsystem/Subsystem.xtuml');
INSERT INTO O_TFR
	VALUES ("6355664b-4091-4bc3-ac82-c6d3580da3ad",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ModelClass_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_obj = param.o_obj;
o_obj.Name = param.name;

select one packageableElem related by o_obj->PE_PE[R8001];
select one package related by packageableElem->EP_PKG[R8000];
select one component related by packageableElem->C_C[R8003];

// Note that this is here just to get the variable classes into context.
select many classes related by package->PE_PE[R8000]->O_OBJ[R8001];

  if (not_empty package)
    // we''re in a package, get the classes in the package and set the class number
    select many classes related by package->PE_PE[R8000]->O_OBJ[R8001];
    if ( package.Num_Rng == 0 )
      o_obj.Numb = 1;
    else
      o_obj.Numb = package.Num_Rng;
    end if;
  else
    rootCompIdInPkg = self.Component_getRootComponentId(c_c:component);
    select any rootComponent from instances of C_C where (selected.Id == rootCompIdInPkg);
    select one package related by rootComponent->PE_PE[R8001]->EP_PKG[R8000];
    
    if ( package.Num_Rng == 0 )
      o_obj.Numb = 1;
    else
      o_obj.Numb = package.Num_Rng;
    end if;
  end if;

// for each model-class associated with this model-class''s
// owning subsystem or package
for each clazz in classes
  // if this class equals self, skip it
  if (clazz.Obj_ID == o_obj.Obj_ID) continue; end if;

  // if this other class''s number is greater than this model-class''s number
  if (clazz.Numb >= o_obj.Numb)
    // have this model-class''s number be just greater
    // than this other class''s number
    o_obj.Numb = clazz.Numb + 1;
  end if;
end for;

// MASL object names are not allowed to have spaces, so we can just use the name as the default key letters
o_obj.Key_Lett = o_obj.Name;
self.ModelClass_addIdentifiers(o_obj:o_obj);

// For MASL convert we want to go ahead and "Publish References" for the new class
self.ModelClass_newInstanceReferenceDataType(o_obj:o_obj);
',
	1,
	'',
	"fa8fd3b5-5a41-4eb5-99e7-a6bc53a46707");
INSERT INTO O_TPARM
	VALUES ("da659b0e-173f-470b-b017-b739ba8a6b65",
	"6355664b-4091-4bc3-ac82-c6d3580da3ad",
	'o_obj',
	"63f4ff99-f127-443b-a678-30ace41da702",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("f9266be0-a4b2-457d-a083-584bdc37335f",
	"6355664b-4091-4bc3-ac82-c6d3580da3ad",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"da659b0e-173f-470b-b017-b739ba8a6b65",
	'');
INSERT INTO O_TFR
	VALUES ("746859b9-4abd-48d5-ab0d-ea689a3e3b5b",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ModelClass_addIdentifiers',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_obj = param.o_obj;

select any oid1 related by o_obj->O_ID[R104] where ( selected.Oid_ID == 0 );
if ( empty oid1 )
  create object instance oid1 of O_ID;
  oid1.Oid_ID = 0;
  relate oid1 to o_obj across R104;
end if;
select any oid2 related by o_obj->O_ID[R104] where ( selected.Oid_ID == 1 );
if ( empty oid2 )
  create object instance oid2 of O_ID;
  oid2.Oid_ID = 1;
  relate oid2 to o_obj across R104;
end if;
select any oid3 related by o_obj->O_ID[R104] where ( selected.Oid_ID == 2 );
if ( empty oid3 )
  create object instance oid3 of O_ID;
  oid3.Oid_ID = 2;
  relate oid3 to o_obj across R104;
end if;
',
	1,
	'',
	"422bcbaa-4170-4d52-85ed-ca2708fdec8e");
INSERT INTO O_TPARM
	VALUES ("f4fdbf93-a3aa-4805-9619-7b5430a18536",
	"746859b9-4abd-48d5-ab0d-ea689a3e3b5b",
	'o_obj',
	"63f4ff99-f127-443b-a678-30ace41da702",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("d16c3058-c420-428a-ab22-69a134a0c5d4",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ModelClass_newAttribute',
	'',
	"579b8247-e153-481d-8926-384cdc722464",
	1,
	'o_obj = param.o_obj;

// NOTE: This is a heavily modified version of Model Class::newAttribute.  That function in the OOAofOOA does
//   extra work for classes in Sequence Diagrams that we don''t have to deal with here in masl convert.

//
// Find the last attribute currently in the list
//
create object instance newAttr of O_ATTR;
self.ModelClass_addAttributeToOrdering(o_obj:o_obj, newAttr:newAttr);
relate o_obj to newAttr across R102;
self.Attribute_initialize(o_attr:newAttr, name:param.attr_name);
return newAttr;
',
	1,
	'',
	"6355664b-4091-4bc3-ac82-c6d3580da3ad");
INSERT INTO O_TPARM
	VALUES ("814e896b-a144-48bc-9c81-9b19d37c4cba",
	"d16c3058-c420-428a-ab22-69a134a0c5d4",
	'o_obj',
	"63f4ff99-f127-443b-a678-30ace41da702",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("5f636fc7-4fa6-4b72-aa84-dd0558283598",
	"d16c3058-c420-428a-ab22-69a134a0c5d4",
	'attr_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"814e896b-a144-48bc-9c81-9b19d37c4cba",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("579b8247-e153-481d-8926-384cdc722464",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Attribute>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Subsystem/Subsystem.xtuml');
INSERT INTO O_TFR
	VALUES ("422bcbaa-4170-4d52-85ed-ca2708fdec8e",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ModelClass_addAttributeToOrdering',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_obj = param.o_obj;
newAttr = param.newAttr;

select many attrs related by o_obj->O_ATTR[R102];
for each attr in attrs
 select one nextAttr related by attr->O_ATTR[R103.''precedes''];
  if (empty nextAttr)
    break;
  end if;
end for;
if (not_empty attr)
  //
  // If there was a previous last attribute link this one to the end . . .
  // NOTE: Modified from the ooa version of this function here because it turns off listeners which
  //   we don''t have to worry about during masl convert.
  relate attr to newAttr across R103.''precedes'';
end if;
',
	1,
	'',
	"f8e9c620-45ae-495d-98b3-effcb38fc212");
INSERT INTO O_TPARM
	VALUES ("f6154d00-1de4-41c1-b3fa-c613684e5544",
	"422bcbaa-4170-4d52-85ed-ca2708fdec8e",
	'o_obj',
	"63f4ff99-f127-443b-a678-30ace41da702",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("c29c3535-aedb-4204-b849-80fec22e2e65",
	"422bcbaa-4170-4d52-85ed-ca2708fdec8e",
	'newAttr',
	"579b8247-e153-481d-8926-384cdc722464",
	0,
	'',
	"f6154d00-1de4-41c1-b3fa-c613684e5544",
	'');
INSERT INTO O_TFR
	VALUES ("c59ea70d-68ee-4b9e-a501-5920a749fab1",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Attribute_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_attr = param.o_attr;

// Heavily modified version of Attribute::initialize() for MASL import.  Here we do not assign a default type as in OOAofOOA.
o_attr.Prefix = "";
o_attr.Pfx_Mode = 0;
o_attr.Root_Nam = param.name;

// TODO - assign a default type to aid in testing.  When attribute types are handled on the populate interface this can be removed to the // END comment
systypes_pkg = self.systypes_pkg;
select any def_dt related by systypes_pkg->PE_PE[R8000]->S_DT[R8001] where ( selected.Name == "string" );
relate o_attr to def_dt across R114;
// END

create object instance ba of O_BATTR;
relate o_attr to ba across R106;
create object instance nba of O_NBATTR;
relate ba to nba across R107;',
	1,
	'',
	"91dc75c2-9edd-4caa-ab33-32d0edaded3a");
INSERT INTO O_TPARM
	VALUES ("9cb4d766-d51c-43c7-a331-72f1e7bcf49d",
	"c59ea70d-68ee-4b9e-a501-5920a749fab1",
	'o_attr',
	"579b8247-e153-481d-8926-384cdc722464",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("adec9387-e4c5-4bce-aecd-04c0d01bab95",
	"c59ea70d-68ee-4b9e-a501-5920a749fab1",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9cb4d766-d51c-43c7-a331-72f1e7bcf49d",
	'');
INSERT INTO O_TFR
	VALUES ("4ff26a31-e07b-4af1-8221-5dc73754ca14",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformType',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// If the type visibility is public, put it in the package of shared public data.  If private, put it inside the component.
lib_pkg = self.lib_pkg;
select any types_pkg related by lib_pkg->PE_PE[R8000]->EP_PKG[R8001] where (selected.Name == "Shared");

if ( "private" == param.visibility )
  // Get the "types" package in this component
  current_component = self.current_component;
  select any types_pkg related by current_component->PE_PE[R8003]->EP_PKG[R8001] where (selected.Name == "types");

  // Create the types package if it doesn''t already exist
  if ( empty types_pkg )
    types_pkg = self.Component_newPackage(c_c:current_component, pkg_name:"types");
  end if;
end if;

// See if type already exists
systypes_pkg = self.systypes_pkg;
select any sys_s_dt related by systypes_pkg->PE_PE[R8000]->S_DT[R8001] where (selected.Name == param.name);
select any s_dt related by types_pkg->PE_PE[R8000]->S_DT[R8001] where (selected.Name == param.name);

if ( (empty sys_s_dt) and (empty s_dt) )
  // The type doesn''t already exist, create it
  self.Package_newDatatype(ep_pkg:types_pkg, type_name:param.name, definition:param.definition);
else
  // update the type definition
  if ( "" != param.definition )
    if ( not_empty sys_s_dt )
	  sys_s_dt.Descrip = sys_s_dt.Descrip + "<definition>" + param.definition + "</definition>\n";
	else
	  s_dt.Descrip = s_dt.Descrip + "<definition>" + param.definition + "</definition>\n";
	end if;
  end if;
end if;

// Cache the new type
select any sys_s_dt related by systypes_pkg->PE_PE[R8000]->S_DT[R8001] where (selected.Name == param.name);
if ( empty sys_s_dt )
	select any s_dt related by types_pkg->PE_PE[R8000]->S_DT[R8001] where (selected.Name == param.name);
	self.current_type = s_dt;
else
	self.current_type = sys_s_dt;
end if;
',
	1,
	'',
	"7e69abb2-76bc-4021-8183-9dc2025688bb");
INSERT INTO O_TPARM
	VALUES ("0da10f2a-658a-4a79-a574-742bd07fcd7e",
	"4ff26a31-e07b-4af1-8221-5dc73754ca14",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("a0a9e16a-e53d-4319-b2f4-5fc2422354f9",
	"4ff26a31-e07b-4af1-8221-5dc73754ca14",
	'visibility',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0da10f2a-658a-4a79-a574-742bd07fcd7e",
	'');
INSERT INTO O_TPARM
	VALUES ("e1d721a5-5131-4bd7-9dbf-31d95160d9f5",
	"4ff26a31-e07b-4af1-8221-5dc73754ca14",
	'definition',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a0a9e16a-e53d-4319-b2f4-5fc2422354f9",
	'');
INSERT INTO O_TFR
	VALUES ("dff68b05-f692-4f7e-8745-e96def65ae8a",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Package_newDatatype',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'ep_pkg = param.ep_pkg;

// Create the new data type
create object instance dt of S_DT;
// create Packageable Element supertype and hook up to this package.
create object instance pe of PE_PE;
relate dt to pe across R8001;
relate pe to ep_pkg across R8000;

create object instance udt of S_UDT;
relate dt to udt across R17;

self.Datatype_initialize(s_dt:dt, name:param.type_name);
pe.type = ElementTypeConstants::DATATYPE;
self.PackageableElement_initialize(pe_pe:pe);

// Link ID to appropriate xtUML core type.
IDLINK::stitchID( name:param.type_name, pe_pe:pe, s_dt:dt, s_udt:udt );

// For complex MASL types we store the definition in the description
if ( "" != param.definition )
  dt.Descrip = dt.Descrip + "<definition>" + param.definition + "</definition>\n";
end if;',
	1,
	'',
	"59fd5264-7d22-47ce-a615-605f9ee03143");
INSERT INTO O_TPARM
	VALUES ("7e236b3e-4137-4721-904c-0421968bc15b",
	"dff68b05-f692-4f7e-8745-e96def65ae8a",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("375d4091-f830-4ebc-80e3-6f408861dc4e",
	"dff68b05-f692-4f7e-8745-e96def65ae8a",
	'type_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7e236b3e-4137-4721-904c-0421968bc15b",
	'');
INSERT INTO O_TPARM
	VALUES ("78125cd9-a1af-4ea0-8114-9fb461dec434",
	"dff68b05-f692-4f7e-8745-e96def65ae8a",
	'definition',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"375d4091-f830-4ebc-80e3-6f408861dc4e",
	'');
INSERT INTO O_TFR
	VALUES ("62cc7ec1-12c6-444f-8e9c-8bf257676b92",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Datatype_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'param.s_dt.Name = param.name;',
	1,
	'',
	"747f4c49-5479-4ea7-b653-6c1a4424d418");
INSERT INTO O_TPARM
	VALUES ("fb1564c5-ad69-434b-ae34-3524e3c96530",
	"62cc7ec1-12c6-444f-8e9c-8bf257676b92",
	's_dt',
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Data Type>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Domain/Domain.xtuml');
INSERT INTO O_TPARM
	VALUES ("b656b72f-1ab3-495e-91ff-71f6c956c757",
	"62cc7ec1-12c6-444f-8e9c-8bf257676b92",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fb1564c5-ad69-434b-ae34-3524e3c96530",
	'');
INSERT INTO O_TFR
	VALUES ("f2d9d56f-7fb7-485b-9cf5-6188743dd596",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformDomainFunction',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// See if "functions" package exists in the component, create it if it does not.
current_component = self.current_component;
if ( empty current_component )
  select any current_component from instances of C_C where ( selected.Name == param.domain );
end if;

select any functions_pkg related by current_component->PE_PE[R8003]->EP_PKG[R8001] where (selected.Name == "functions");
if ( empty functions_pkg )
  functions_pkg = self.Component_newPackage(c_c:current_component, pkg_name:"functions");
end if;

// Create a domain function for the incoming function/service
self.current_domain_function = self.Package_newFunction(ep_pkg:functions_pkg, function_name: param.name);

// If the function/service is public:
//   a) get the "Shared" package under the library package.
//   b) see if there is an interface named "<comp name>", formalized to a port named (port name does not matter I think) 
//        on the component, create if not
//   c) create an interface operation identical to the domain function/service
//   d) modify the action body of the operation on the port to call the domain function/service
if ( "public" == param.visibility )
  // a
  lib_pkg = self.lib_pkg;
  select any shared_pkg related by lib_pkg->PE_PE[R8000]->EP_PKG[R8001] where (selected.Name == "Shared");

  // b
  comp_if_name = current_component.Name;
  select any comp_if related by shared_pkg->PE_PE[R8000]->C_I[R8001] where (selected.Name == comp_if_name);
  if ( empty comp_if )
	// create the interface
	comp_if = self.Package_newInterface(ep_pkg:shared_pkg, interface_name:comp_if_name);
	// create a port & provided interface from the component
	comp_port_name = current_component.Name;
	new_ir = self.Component_initializeProvision(c_c:current_component, port_name:comp_port_name, if_name:"");
	relate comp_if to new_ir across R4012;    // formalize at end tag of domain. for now, just relate it to the C_R
  end if;

  // c - Note that we (currently) always create an interface operation, never a signal
  c_ep = self.Interface_newExecutableProperty(c_i:comp_if, ep_name:param.name, asynchronous:false);
  c_ep.Direction = IFDirectionType::ClientServer;
  self.current_executable_property = c_ep;
end if;',
	1,
	'',
	"07d3849c-9f14-49f4-8d47-bb9f1891ecc0");
INSERT INTO O_TPARM
	VALUES ("ac1fb869-ac0a-4149-8711-065870838f23",
	"f2d9d56f-7fb7-485b-9cf5-6188743dd596",
	'visibility',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("9bd07cf8-1638-47f6-99ef-aac82f7ffbaa",
	"f2d9d56f-7fb7-485b-9cf5-6188743dd596",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ac1fb869-ac0a-4149-8711-065870838f23",
	'');
INSERT INTO O_TPARM
	VALUES ("feb1cd43-bb0f-4f88-abd0-c527eee66c65",
	"f2d9d56f-7fb7-485b-9cf5-6188743dd596",
	'domain',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9bd07cf8-1638-47f6-99ef-aac82f7ffbaa",
	'');
INSERT INTO O_TPARM
	VALUES ("17ce02bf-5d9c-4050-b80a-573a7deb7a74",
	"f2d9d56f-7fb7-485b-9cf5-6188743dd596",
	'terminator',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"feb1cd43-bb0f-4f88-abd0-c527eee66c65",
	'');
INSERT INTO O_TFR
	VALUES ("f2b299ab-c59f-4a3c-b813-659a745c2710",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformObjectFunction',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'op_name = param.name;
current_class = self.current_class;


if ( empty current_class )
  // we don''t have a current class, so we have to go find one
  select any c_c from instances of C_C where ( selected.Name == param.domain );
  select any ep_pkg related by c_c->PE_PE[R8003]->EP_PKG[R8001] where ( selected.Name == param.domain );  // Internal behavior package has the same name as the component
  select any current_class related by ep_pkg->PE_PE[R8000]->O_OBJ[R8001] where ( selected.Name == param.obj );
end if;

// create the new operation
self.current_class_op = self.ModelClass_newOperation(o_obj:current_class, op_name:op_name);
// set instance based or class based appropriately
if ( "instance" != param.instance )
  self.current_class_op.Instance_Based = Scope::Class;
end if;',
	1,
	'',
	"8b5937f7-610b-4bd3-9fe2-8b9e795cfd80");
INSERT INTO O_TPARM
	VALUES ("2d2e0fbe-4572-4f0a-969a-a19348ab65b3",
	"f2b299ab-c59f-4a3c-b813-659a745c2710",
	'visibility',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("84493d64-7b95-425a-a6e4-9ecdc673b2f9",
	"f2b299ab-c59f-4a3c-b813-659a745c2710",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2d2e0fbe-4572-4f0a-969a-a19348ab65b3",
	'');
INSERT INTO O_TPARM
	VALUES ("302dbd74-7ed1-4a13-9caf-be95b3597037",
	"f2b299ab-c59f-4a3c-b813-659a745c2710",
	'instance',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"84493d64-7b95-425a-a6e4-9ecdc673b2f9",
	'');
INSERT INTO O_TPARM
	VALUES ("144a0b1a-61cf-4cd3-a93f-da5bdda735ef",
	"f2b299ab-c59f-4a3c-b813-659a745c2710",
	'relationship',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"302dbd74-7ed1-4a13-9caf-be95b3597037",
	'');
INSERT INTO O_TPARM
	VALUES ("8849a70d-59e9-4668-97de-2c856cdc99a6",
	"f2b299ab-c59f-4a3c-b813-659a745c2710",
	'domain',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"144a0b1a-61cf-4cd3-a93f-da5bdda735ef",
	'');
INSERT INTO O_TPARM
	VALUES ("adfc2649-503b-4da3-b49c-d83e3f7174b6",
	"f2b299ab-c59f-4a3c-b813-659a745c2710",
	'obj',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8849a70d-59e9-4668-97de-2c856cdc99a6",
	'');
INSERT INTO O_TFR
	VALUES ("b44f67b8-f281-4aa2-9adc-27b62605a7c1",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ModelClass_newOperation',
	'',
	"5cb6d426-f094-4cad-8cdb-b16506c9f2e6",
	1,
	'o_obj = param.o_obj;

create object instance operation of O_TFR;
relate o_obj to operation across R115;
self.Operation_initialize(o_tfr:operation, name:param.op_name);

return operation;
',
	1,
	'',
	"a10bcbd7-d0c1-4c7f-9af4-6820fada6371");
INSERT INTO O_TPARM
	VALUES ("cf0f4faa-7ab4-4f2c-ac3c-298e1e67de28",
	"b44f67b8-f281-4aa2-9adc-27b62605a7c1",
	'o_obj',
	"63f4ff99-f127-443b-a678-30ace41da702",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("8162170e-904b-4723-bcda-ff75073bcdd6",
	"b44f67b8-f281-4aa2-9adc-27b62605a7c1",
	'op_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"cf0f4faa-7ab4-4f2c-ac3c-298e1e67de28",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5cb6d426-f094-4cad-8cdb-b16506c9f2e6",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Operation>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Subsystem/Subsystem.xtuml');
INSERT INTO O_TFR
	VALUES ("df742b16-077b-4e8d-acf5-363505b130c5",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Operation_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_tfr = param.o_tfr;

// NOTE: This is a heavily modified version of OOAofOOA''s Operation::initialize()

select one clazz related by o_tfr->O_OBJ[R115];
self.ModelClass_addOperationToOrdering(o_obj: clazz, newTfr:o_tfr);

// Since this operation handles both functions and services, and services have void return types, we default to void here.
systypes_pkg = self.systypes_pkg;
select any def_dt related by systypes_pkg->PE_PE[R8000]->S_DT[R8001] where ( selected.Name == "void" );
relate o_tfr to def_dt across R116;

o_tfr.Name = param.name;
o_tfr.Instance_Based = Scope::Instance;
o_tfr.Suc_Pars = ParseStatus::parseInitial;
',
	1,
	'',
	"59c4d100-77b1-44d1-b053-5e51a300f2f4");
INSERT INTO O_TPARM
	VALUES ("cd7b3b59-9273-4b04-b995-fee5aaf28023",
	"df742b16-077b-4e8d-acf5-363505b130c5",
	'o_tfr',
	"5cb6d426-f094-4cad-8cdb-b16506c9f2e6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("37e8e692-2e3a-4924-bff7-6d67ea9f189e",
	"df742b16-077b-4e8d-acf5-363505b130c5",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"cd7b3b59-9273-4b04-b995-fee5aaf28023",
	'');
INSERT INTO O_TFR
	VALUES ("dc363b24-255d-4fa8-ba3e-633881fbaebf",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ModelClass_addOperationToOrdering',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_obj = param.o_obj;
operation = param.newTfr;

if(not_empty operation)
  select many peers related by o_obj->O_TFR[R115];
  for each peer in peers
    if (peer != operation)
      select one predecessor related by peer->O_TFR[R125.''precedes''];
      if (empty predecessor)
        relate operation to peer across R125.''succeeds'';
      end if;
    end if;
  end for;
end if;',
	1,
	'',
	"746859b9-4abd-48d5-ab0d-ea689a3e3b5b");
INSERT INTO O_TPARM
	VALUES ("a05d38c9-bed4-4c14-a6a8-622ab2e1a3eb",
	"dc363b24-255d-4fa8-ba3e-633881fbaebf",
	'o_obj',
	"63f4ff99-f127-443b-a678-30ace41da702",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("be81f7cd-2a26-46a7-aae0-b5274600f167",
	"dc363b24-255d-4fa8-ba3e-633881fbaebf",
	'newTfr',
	"5cb6d426-f094-4cad-8cdb-b16506c9f2e6",
	0,
	'',
	"a05d38c9-bed4-4c14-a6a8-622ab2e1a3eb",
	'');
INSERT INTO O_TFR
	VALUES ("833a364d-a80a-4900-ba69-199bd9cc4581",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Package_newFunction',
	'',
	"60690409-5a69-45db-896b-5a63a9103c18",
	1,
	'ep_pkg = param.ep_pkg;

create object instance fn of S_SYNC;
// create Packageable Element supertype and hook up to this package.
create object instance pe of PE_PE;
relate fn to pe across R8001;
relate pe to ep_pkg across R8000;
pe.type = ElementTypeConstants::FUNCTION;
self.PackageableElement_initialize(pe_pe:pe);

self.Function_initialize(s_sync:fn, name:param.function_name);

return fn;',
	1,
	'',
	"359c2979-2cde-487a-96f6-47f31e02b6cb");
INSERT INTO O_TPARM
	VALUES ("984f5127-57dd-444a-bee0-82d7dfd66060",
	"833a364d-a80a-4900-ba69-199bd9cc4581",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("e234e0e4-75f3-4617-a4c6-0bc5935d4928",
	"833a364d-a80a-4900-ba69-199bd9cc4581",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"984f5127-57dd-444a-bee0-82d7dfd66060",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("60690409-5a69-45db-896b-5a63a9103c18",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Function>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Domain/Domain.xtuml');
INSERT INTO O_TFR
	VALUES ("3bb45e5b-9cf4-4566-8bb6-47f1f59b17d2",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Function_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	's_sync = param.s_sync;

// Heavily modified version of OOAofOOA''s Function::initialize()
select one packageableElem related by s_sync->PE_PE[R8001];
select one package related by packageableElem->EP_PKG[R8000];
select one component related by packageableElem->C_C[R8003];

// Since this operation handles both functions and services, and services have void return types, we default to void here.
systypes_pkg = self.systypes_pkg;
select any def_dt related by systypes_pkg->PE_PE[R8000]->S_DT[R8001] where ( selected.Name == "void" );
relate s_sync to def_dt across R25;

s_sync.Name = param.name;
s_sync.Suc_Pars = ParseStatus::parseInitial;
',
	1,
	'',
	"676154e8-5428-4e24-ab8c-e663a7b91b45");
INSERT INTO O_TPARM
	VALUES ("3cb3aeea-f1ce-4635-bdff-3b25945ae365",
	"3bb45e5b-9cf4-4566-8bb6-47f1f59b17d2",
	's_sync',
	"60690409-5a69-45db-896b-5a63a9103c18",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("4d77076f-98d5-4df8-bc9a-238abbd5ce31",
	"3bb45e5b-9cf4-4566-8bb6-47f1f59b17d2",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3cb3aeea-f1ce-4635-bdff-3b25945ae365",
	'');
INSERT INTO O_TFR
	VALUES ("94ecebda-10c4-43bf-b76c-0901fd3873c5",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Package_newPackage',
	'',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	1,
	'ep_pkg = param.ep_pkg;

// Package::newPackage()
create object instance package of EP_PKG;
// create Packageable Element supertype and hook up to this package.
create object instance pe of PE_PE;
relate package to pe across R8001;
select one system related by ep_pkg->S_SYS[R1405];
relate package to system across R1405;
relate ep_pkg to pe across R8000;
package.Name = param.package_name;
pe.type = ElementTypeConstants::PACKAGE;
self.PackageableElement_initialize(pe_pe:pe);

return package;',
	1,
	'',
	"d5710fc1-354b-4875-9d9e-0ad9f4c1f63e");
INSERT INTO O_TPARM
	VALUES ("83553bfc-7222-452c-ba80-a953d0c1945e",
	"94ecebda-10c4-43bf-b76c-0901fd3873c5",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("d4ab8f93-1343-41d6-9adb-f41bb28aa3ab",
	"94ecebda-10c4-43bf-b76c-0901fd3873c5",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"83553bfc-7222-452c-ba80-a953d0c1945e",
	'');
INSERT INTO O_TFR
	VALUES ("d5710fc1-354b-4875-9d9e-0ad9f4c1f63e",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Package_newInterface',
	'',
	"80698720-cc57-44ba-8aa5-600c524db338",
	1,
	'ep_pkg = param.ep_pkg;

create object instance interface of C_I;
// create Packageable Element supertype and hook up to this package.
create object instance pe of PE_PE;
relate interface to pe across R8001;
relate pe to ep_pkg across R8000;
pe.type = ElementTypeConstants::INTERFACE;
self.PackageableElement_initialize(pe_pe:pe);
interface.Name = param.interface_name;

return interface;',
	1,
	'',
	"a9942ae9-1501-49c7-afb1-84aa422a85e5");
INSERT INTO O_TPARM
	VALUES ("5fb1d906-85a8-4f3f-9503-c12849352c22",
	"d5710fc1-354b-4875-9d9e-0ad9f4c1f63e",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("d162f45c-2f28-4c6a-9f32-26218059a11b",
	"d5710fc1-354b-4875-9d9e-0ad9f4c1f63e",
	'interface_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5fb1d906-85a8-4f3f-9503-c12849352c22",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("80698720-cc57-44ba-8aa5-600c524db338",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Interface>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Component/Component.xtuml');
INSERT INTO O_TFR
	VALUES ("75b3e1c3-8e2f-4809-bd60-ff2d77a2f06d",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Component_initializeProvision',
	'',
	"3068be83-fc38-4a02-a09f-a2dc428b84f6",
	1,
	'c_c = param.c_c;

// The OOA version of this function does _a lot_ more work than we have to do here.
create object instance provision of C_P;
create object instance interfaceRef of C_IR;
create object instance port of C_PO;
relate provision to interfaceRef across R4009;
relate interfaceRef to port across R4016;
relate port to c_c across R4010;
if ( "" == param.if_name )
  provision.InformalName = "Unnamed_Interface";
else
  provision.InformalName = param.if_name;
end if;

self.Port_initialize(c_po:port, name:param.port_name);

return interfaceRef;',
	1,
	'',
	"69c066cc-2506-4998-b894-060151a8f78f");
INSERT INTO O_TPARM
	VALUES ("cf4bd80f-3895-4c80-897b-2a439dc0d5c7",
	"75b3e1c3-8e2f-4809-bd60-ff2d77a2f06d",
	'c_c',
	"67f93d18-1045-4c6c-b0d5-a692023c471c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("a0e3fc5e-33f9-47a5-9e00-6fe59650f5a6",
	"75b3e1c3-8e2f-4809-bd60-ff2d77a2f06d",
	'port_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"cf4bd80f-3895-4c80-897b-2a439dc0d5c7",
	'');
INSERT INTO O_TPARM
	VALUES ("3dc4f167-809f-48d2-9d12-69928c1639b6",
	"75b3e1c3-8e2f-4809-bd60-ff2d77a2f06d",
	'if_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a0e3fc5e-33f9-47a5-9e00-6fe59650f5a6",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("3068be83-fc38-4a02-a09f-a2dc428b84f6",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Interface Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Component/Component.xtuml');
INSERT INTO O_TFR
	VALUES ("806a97a3-4a9d-4fe2-994e-8b5705b455fc",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Port_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'c_po = param.c_po;

c_po.DoNotShowPortOnCanvas = false;
c_po.Name = param.name;',
	1,
	'',
	"6d27ebf1-bb50-4835-85e2-b21d260ab92c");
INSERT INTO O_TPARM
	VALUES ("52f437ae-7a8f-42da-8f40-94b805566100",
	"806a97a3-4a9d-4fe2-994e-8b5705b455fc",
	'c_po',
	"7956bd81-f6de-4bc8-9851-92214668ced1",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("7956bd81-f6de-4bc8-9851-92214668ced1",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Port>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Component/Component.xtuml');
INSERT INTO O_TPARM
	VALUES ("8ea8bf0c-a0e7-437c-828f-7ac25ddb18a5",
	"806a97a3-4a9d-4fe2-994e-8b5705b455fc",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"52f437ae-7a8f-42da-8f40-94b805566100",
	'');
INSERT INTO O_TFR
	VALUES ("36fd6526-df46-4e49-a8b1-ee0bebdf9755",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'InterfaceReference_formalize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'c_i = param.c_i;
c_ir = param.c_ir;

// This version is nothing like the OOAofOOA InterfaceReference::formalize().  We have cut out functionality that isn''t needed for MASL
// convert (e.g. handling of delegations, formalizing the other side of a satisfaction, etc)

self.InterfaceReference_createSignalsAndOperations(c_i:c_i, c_ir:c_ir);
relate c_i to c_ir across R4012;
',
	1,
	'',
	"4ed94333-e76e-470c-95ec-c351a39b2df5");
INSERT INTO O_TPARM
	VALUES ("b28ea15f-4587-47bc-9c11-1ed1ce1706a8",
	"36fd6526-df46-4e49-a8b1-ee0bebdf9755",
	'c_i',
	"80698720-cc57-44ba-8aa5-600c524db338",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("1578598d-dd8b-46c5-939e-33e413402a82",
	"36fd6526-df46-4e49-a8b1-ee0bebdf9755",
	'c_ir',
	"3068be83-fc38-4a02-a09f-a2dc428b84f6",
	0,
	'',
	"b28ea15f-4587-47bc-9c11-1ed1ce1706a8",
	'');
INSERT INTO O_TFR
	VALUES ("4ed94333-e76e-470c-95ec-c351a39b2df5",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'InterfaceReference_createSignalsAndOperations',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'interface = param.c_i;
c_ir = param.c_ir;

if(not_empty interface)
  select many operations related by interface->C_EP[R4003]->C_IO[R4004];
  select many signals related by interface->C_EP[R4003]->C_AS[R4004];
  select one requirement related by c_ir->C_R[R4009];
  if(not_empty requirement)
    for each signal in signals
      select one ep related by signal->C_EP[R4004];
      create object instance req_ep of SPR_REP;
      create object instance req_signal of SPR_RS;
      req_signal.Suc_Pars = ParseStatus::parseInitial;
      relate requirement to ep across R4500 using req_ep;
      relate req_signal to req_ep across R4502;
    end for;
    for each operation in operations
      select one ep related by operation->C_EP[R4004];
      create object instance req_ep of SPR_REP;
      create object instance req_operation of SPR_RO;
      req_operation.Suc_Pars = ParseStatus::parseInitial;
      relate requirement to ep across R4500 using req_ep;
      relate req_operation to req_ep across R4502;
    end for;
  else
    select one provision related by c_ir->C_P[R4009];
    for each signal in signals
      select one ep related by signal->C_EP[R4004];
      create object instance pro_ep of SPR_PEP;
      create object instance pro_signal of SPR_PS;
      pro_signal.Suc_Pars = ParseStatus::parseInitial;
      relate provision to ep across R4501 using pro_ep;
      relate pro_signal to pro_ep across R4503;
    end for;
    for each operation in operations
      select one ep related by operation->C_EP[R4004];
      create object instance pro_ep of SPR_PEP;
      create object instance pro_operation of SPR_PO;
      pro_operation.Suc_Pars = ParseStatus::parseInitial;
      relate provision to ep across R4501 using pro_ep;
      relate pro_operation to pro_ep across R4503;
    end for;
  end if;
end if;',
	1,
	'',
	"c1d107db-3920-45fc-8976-f5135aa4c119");
INSERT INTO O_TPARM
	VALUES ("9850e799-4e62-4c3f-b192-033885ef68e2",
	"4ed94333-e76e-470c-95ec-c351a39b2df5",
	'c_i',
	"80698720-cc57-44ba-8aa5-600c524db338",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("e17e61a5-2e2a-46f8-8bf8-60a79260f7b8",
	"4ed94333-e76e-470c-95ec-c351a39b2df5",
	'c_ir',
	"3068be83-fc38-4a02-a09f-a2dc428b84f6",
	0,
	'',
	"9850e799-4e62-4c3f-b192-033885ef68e2",
	'');
INSERT INTO O_TFR
	VALUES ("5a638f8c-37fc-48ad-85a7-117da5262634",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'InterfaceOperation_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'c_io = param.c_io;

// This is a heavily modified version  of OOAofOOA''s Interface Operation::initialize()
select one packageableElem related by c_io->C_EP[R4004]->C_I[R4003]->PE_PE[R8001];
select one package related by packageableElem->EP_PKG[R8000];
select one component related by packageableElem->C_C[R8003];

select one interface related by c_io->C_EP[R4004]->C_I[R4003];
self.Interface_addInterfaceOperationToOrder(c_i:interface, c_io:c_io);

systypes_pkg = self.systypes_pkg;
select any def_dt related by systypes_pkg->PE_PE[R8000]->S_DT[R8001] where ( selected.Name == "void" );
relate c_io to def_dt across R4008;

c_io.Name = param.name;
c_io.Direction = IFDirectionType::ClientServer;  // Note: in MASL convert we just always default the direction.
',
	1,
	'',
	"20563ecc-c594-48b2-ab21-316489af93a0");
INSERT INTO O_TPARM
	VALUES ("ef2ab14f-b464-494a-8d6e-75c207ac34c0",
	"5a638f8c-37fc-48ad-85a7-117da5262634",
	'c_io',
	"4e59980a-6ac2-4a28-8ad8-7f1ada83c53a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4e59980a-6ac2-4a28-8ad8-7f1ada83c53a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Interface Operation>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Component/Component.xtuml');
INSERT INTO O_TPARM
	VALUES ("b1e44a40-4c5e-4dec-9302-daece81240e6",
	"5a638f8c-37fc-48ad-85a7-117da5262634",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ef2ab14f-b464-494a-8d6e-75c207ac34c0",
	'');
INSERT INTO O_TFR
	VALUES ("102c4921-1e91-4570-87ba-0ccd6106d389",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Interface_newExecutableProperty',
	'',
	"5441230d-b4d6-495f-9e87-84acf5819d26",
	1,
	'c_i = param.c_i;

create object instance signal of C_EP;
signal.Name = param.ep_name;
relate c_i to signal across R4003;
select many references related by c_i->C_IR[R4012];
if(param.asynchronous)
  //create object instance asignal of C_AS;
  //relate signal to asignal across R4004;
  //asignal.initialize();
else
  create object instance ssignal of C_IO;
  relate signal to ssignal across R4004;
  self.InterfaceOperation_initialize(c_io:ssignal, name:param.ep_name);
end if;

return signal;',
	1,
	'',
	"02d4b2b3-e219-4c57-bfa3-f9f74d3ee861");
INSERT INTO O_TPARM
	VALUES ("2b7848d2-1f57-47fd-b47d-3add03222a89",
	"102c4921-1e91-4570-87ba-0ccd6106d389",
	'c_i',
	"80698720-cc57-44ba-8aa5-600c524db338",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("2c54836e-7547-4590-be29-e7a50e06f176",
	"102c4921-1e91-4570-87ba-0ccd6106d389",
	'ep_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2b7848d2-1f57-47fd-b47d-3add03222a89",
	'');
INSERT INTO O_TPARM
	VALUES ("0305e3a0-6b28-461e-9dec-6e1f7dccce1a",
	"102c4921-1e91-4570-87ba-0ccd6106d389",
	'asynchronous',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"2c54836e-7547-4590-be29-e7a50e06f176",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5441230d-b4d6-495f-9e87-84acf5819d26",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Executable Property>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Component/Component.xtuml');
INSERT INTO O_TFR
	VALUES ("eaeaa954-9f69-450a-a5a6-1b0d98435d31",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Interface_addInterfaceOperationToOrder',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'c_i = param.c_i;
interfaceOperation = param.c_io;

// Slightly modified version compared to OOA
if(not_empty interfaceOperation)
  select many peers related by c_i->C_EP[R4003]->C_IO[R4004];
  for each peer in peers
    if (peer != interfaceOperation)
      select one predecessor related by peer->C_IO[R4019.''precedes''];
      if (empty predecessor)
        relate interfaceOperation to peer across R4019.''succeeds'';
      end if;
    end if;
  end for;
end if;
',
	1,
	'',
	"c265e2d5-cf12-4883-bb00-198e83377ceb");
INSERT INTO O_TPARM
	VALUES ("3f0a949c-ae5b-44f0-ba87-4ca67b763463",
	"eaeaa954-9f69-450a-a5a6-1b0d98435d31",
	'c_i',
	"80698720-cc57-44ba-8aa5-600c524db338",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("71c4f6d8-076e-48d0-8b01-40d50ef46bc9",
	"eaeaa954-9f69-450a-a5a6-1b0d98435d31",
	'c_io',
	"4e59980a-6ac2-4a28-8ad8-7f1ada83c53a",
	0,
	'',
	"3f0a949c-ae5b-44f0-ba87-4ca67b763463",
	'');
INSERT INTO O_TFR
	VALUES ("4b15fc81-c210-44f8-9c04-0c7b1bf99672",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Attribute_addToIdentifier',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_attr = param.o_attr;

select any oid related by o_attr->O_OBJ[R102]->O_ID[R104] where ( selected.Oid_ID == param.oid );
create object instance oida of O_OIDA;
relate o_attr to oid across R105 using oida;
select many rto_set related by oid->R_RTO[R109];
for each rto in rto_set
  self.ReferredToClassInAssoc_addAttributeToIdentifier( r_rto:rto, oida:oida );
end for;',
	1,
	'',
	"a0c8981a-e050-48bb-9746-0a90ab04dce7");
INSERT INTO O_TPARM
	VALUES ("cb2ae4c9-5b59-44e2-91e3-8383b7e048cb",
	"4b15fc81-c210-44f8-9c04-0c7b1bf99672",
	'o_attr',
	"579b8247-e153-481d-8926-384cdc722464",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("19dae9c8-49d2-41cf-8ccd-4d0428fa168f",
	"4b15fc81-c210-44f8-9c04-0c7b1bf99672",
	'oid',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"cb2ae4c9-5b59-44e2-91e3-8383b7e048cb",
	'');
INSERT INTO O_TFR
	VALUES ("2b8ec32a-cfed-4c9c-81fa-61a4f530fe75",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Attribute_setType',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_attr = param.o_attr;
type_name = param.type_name;

// NOTE: This isn''t really a copied operation from the OOAofOOA, but we''re following the same paradigm for it
//   as other functions that are from the OOA

// Get a handle to the DT that is named as a parameter, output error if none found
//   TODO - This is a very broad selection.  Is that OK?  Can we assume that during convert we won''t see data that 
//     has multiple (different) types with the same name?  Keith thinks so.
select any s_dt from instances of S_DT where ( selected.Name == type_name );
if ( empty s_dt )
  // TODO - what should the ID be set to?
  TRACE::log( flavor:"failure", id:0, message:"could not find datatype  " + type_name + " to set for attribute " + o_attr.Name);
end if;

// Get a handle to the DT that is currently associated with the attribute
select one cur_s_dt related by o_attr->S_DT[R114];

// If the new DT does not equal the existing DT or is not MASLunique, continue
if ( s_dt != cur_s_dt and cur_s_dt.Name != "MASLunique" )
  // un-relate the existing DT across R114
  unrelate o_attr from cur_s_dt across R114;
  
  // relate the new attribute across R114
  relate o_attr to s_dt across R114;
end if;',
	1,
	'',
	"bf85ec58-a5ab-477b-8ece-12f3a5a109e7");
INSERT INTO O_TPARM
	VALUES ("1466d53f-f12e-4fca-8fc1-106ad988b02b",
	"2b8ec32a-cfed-4c9c-81fa-61a4f530fe75",
	'o_attr',
	"579b8247-e153-481d-8926-384cdc722464",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("cfc1eca9-f055-4701-9614-ab17f53be76a",
	"2b8ec32a-cfed-4c9c-81fa-61a4f530fe75",
	'type_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1466d53f-f12e-4fca-8fc1-106ad988b02b",
	'');
INSERT INTO O_TFR
	VALUES ("fa8fd3b5-5a41-4eb5-99e7-a6bc53a46707",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ModelClass_create_sm',
	'',
	"f6562655-0940-4f4f-a1ae-7094b79949a7",
	1,
	'o_obj = param.o_obj;

// This is a modified version of the OOAofOOA version of this function
if (param.sm_type == "ISM")
  select one ism related by o_obj->SM_ISM[R518];
  if (not_empty ism)
    select one sm_sm related by ism->SM_SM[R517];
    return sm_sm;
  else
    create object instance ism of SM_ISM;
    relate o_obj to ism across R518;
    create object instance sm of SM_SM;
    relate ism to sm across R517;
    create object instance moore of SM_MOORE;
    relate sm to moore across R510;
    // add current state attribute
    newAttr = self.ModelClass_newAttribute(o_obj:o_obj, attr_name:"current_state");

    // TODO - Another type issue here ... when creating an ISM, a new class attribute is created "current_state" whose
    //        type is state<State Model>, thus we need this type as a PEI that we can use during this assignment.
      // if the state model dt was not found check the system level
      // dts, traversing through a package or through the domain if it is the
      // formal content of a component.
      /*select one system related by o_obj->PE_PE[R8001]->
                                                    EP_PKG[R8000]->S_SYS[R1405];

      dt_id = GD::NULL_UNIQUE_ID();
      if not_empty system
        dt_id = system.getCoreTypeId(name:"state<State_Model>");
      end if;
      select any pe from instances of PE_PE where selected.Element_ID == dt_id;
      select one dt related by pe->S_DT[R8001];

    if (not_empty dt)
      select one oldDT related by attr->S_DT[R114];
      unrelate attr from oldDT across R114;
      relate attr to dt across R114;
    else
      // TODO - assign different ID?
      TRACE::log( flavor:"failure", id:59, message:"Unable to locate expected data type: state<State_Model> while creating state machine for " + o_obj.Name );
    end if;*/
    return sm;
  end if;
elif (param.sm_type == "ASM")
  select one sm_asm related by o_obj->SM_ASM[R519];
  if(not_empty sm_asm)
    select one sm_sm related by sm_asm->SM_SM[R517];
    return sm_sm;
  else
    create object instance sm_asm of SM_ASM;
    relate o_obj to sm_asm across R519;
    create object instance sm of SM_SM;
    relate sm_asm to sm across R517;
    create object instance moore of SM_MOORE;
    relate sm to moore across R510;
    return sm;
  end if;
end if;
select any sm_sm from instances of SM_SM where ( false );
return sm_sm;',
	1,
	'',
	"dc363b24-255d-4fa8-ba3e-633881fbaebf");
INSERT INTO O_TPARM
	VALUES ("4440cf90-e58b-442a-bcfe-57c371190c5b",
	"fa8fd3b5-5a41-4eb5-99e7-a6bc53a46707",
	'sm_type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a12afe92-a540-45bc-8b8c-8655252f986e",
	'');
INSERT INTO O_TPARM
	VALUES ("a12afe92-a540-45bc-8b8c-8655252f986e",
	"fa8fd3b5-5a41-4eb5-99e7-a6bc53a46707",
	'o_obj',
	"63f4ff99-f127-443b-a678-30ace41da702",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f6562655-0940-4f4f-a1ae-7094b79949a7",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<State Machine>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/State Machine/State Machine.xtuml');
INSERT INTO O_TFR
	VALUES ("bc18a8a6-8343-4640-9953-070d98414a12",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'StateMachine_newState',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'sm_sm = param.sm_sm;

create object instance st of SM_STATE;
relate sm_sm to st across R501;
self.StateMachineState_initialize(sm_state:st, name:param.name, type:param.type);',
	1,
	'',
	"9bf9cd87-5a44-46e2-b3c6-f4b6d456609d");
INSERT INTO O_TPARM
	VALUES ("eb358bbe-39dd-408b-9a64-352e1e9cde3f",
	"bc18a8a6-8343-4640-9953-070d98414a12",
	'sm_sm',
	"f6562655-0940-4f4f-a1ae-7094b79949a7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("6ffe93b8-03aa-4f14-8796-5c0c36edc240",
	"bc18a8a6-8343-4640-9953-070d98414a12",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"eb358bbe-39dd-408b-9a64-352e1e9cde3f",
	'');
INSERT INTO O_TPARM
	VALUES ("f7e8f766-4839-4e06-9421-9198487b6806",
	"bc18a8a6-8343-4640-9953-070d98414a12",
	'type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6ffe93b8-03aa-4f14-8796-5c0c36edc240",
	'');
INSERT INTO O_TFR
	VALUES ("8d27a753-f5b1-44d2-9c37-5af98d0b7339",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'StateMachineState_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'sm_state = param.sm_state;

// This is a heavily modified version of the function in the OOAofOOA
sm_state.Name = param.name;

// set this state''s number to a default value
sm_state.Numb = 1;

// for each state associated with this state''s state machine
select many states related by sm_state->SM_SM[R501]->SM_STATE[R501];
// If it is the assigner start state, the number must be 1. In this case, all other state numbers are incremented.
// This approach assumes that number 1 has already been taken. This is a safe assumption because the default
// value for Numb (see line 7 above) is 1. So if there are any states existing, at least one has the number 1.
if ( "assigner start" == param.type )
  for each state in states
	// if this state equals sm_state, skip it
	if (state.SMstt_ID == sm_state.SMstt_ID) continue; end if;
	
	// increment the number
	state.Numb = state.Numb + 1;
  end for;
// If not the assigner start state, iterate to find the next highest state number
else
  for each state in states
	// if this state equals sm_state, skip it
	if (state.SMstt_ID == sm_state.SMstt_ID) continue; end if;

	// if this other state''s number is greater than this state''s number
	if ( state.Numb >= sm_state.Numb )
	  // have this state''s number be just greater than this
	  // other state''s number
	  sm_state.Numb = state.Numb + 1;
	end if;
  end for;
end if;

// if it is a terminal state, set Final to 1. Else set it to 0
if ( "terminal" == param.type )
  sm_state.Final = 1;
else
  sm_state.Final = 0;
end if;

// Maslin NOTE: The order in this block of code is different than in OOAofOOA.  MC-Java does automatic
// maintenance of referential IDs, MC-3020 does not.  Thus, for MC-3020 we have to be careful about the 
// order the relates are done.
select one sm related by sm_state->SM_SM[R501];
create object instance act of SM_ACT;
relate act to sm across R515;
create object instance ah of SM_AH;
create object instance moah of SM_MOAH;
relate act to ah across R514;
relate ah to moah across R513;
select one msm related by sm->SM_MOORE[R510];
relate sm_state to msm across R511 using moah;
//
// create SEM entry instances
//
select many event_set related by sm->SM_EVT[R502]->SM_SEVT[R525];
for each event in event_set
  select any sem related by event->SM_SEME[R503] where (selected.SMstt_ID == sm_state.SMstt_ID);
  if ( empty sem )
	create object instance sem of SM_SEME;
	// TODO: get default subtype from preferences (SKB Note: this TODO is from the OOAofOOA, not MASLIN)
	create object instance ch of SM_CH;
	relate sm_state to event across R503 using sem;
	relate ch to sem across R504;
  end if;
end for;

act.Suc_Pars = ParseStatus::parseInitial;',
	1,
	'',
	"fcecf336-d019-41b1-8fed-2d87543e22ec");
INSERT INTO O_TPARM
	VALUES ("3f91fa97-9082-4afb-9851-a627ddd6bece",
	"8d27a753-f5b1-44d2-9c37-5af98d0b7339",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4471cf81-cb5c-4bb5-a78e-d1c61a1019ed",
	'');
INSERT INTO O_TPARM
	VALUES ("4471cf81-cb5c-4bb5-a78e-d1c61a1019ed",
	"8d27a753-f5b1-44d2-9c37-5af98d0b7339",
	'sm_state',
	"ce86dade-b263-4245-8001-19dd4123f4f9",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ce86dade-b263-4245-8001-19dd4123f4f9",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<State Machine State>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/State Machine/State Machine.xtuml');
INSERT INTO O_TPARM
	VALUES ("4600b01a-e18a-4e3c-9bfc-8d591c6a792d",
	"8d27a753-f5b1-44d2-9c37-5af98d0b7339",
	'type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3f91fa97-9082-4afb-9851-a627ddd6bece",
	'');
INSERT INTO O_TFR
	VALUES ("9bf9cd87-5a44-46e2-b3c6-f4b6d456609d",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'StateMachine_newEvent',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'sm_sm = param.sm_sm;

create object instance newEvent of SM_EVT;
relate sm_sm to newEvent across R502;
self.StateMachineEvent_initialize(sm_evt:newEvent, name:param.name);
',
	1,
	'',
	"bbd564a6-2b4f-4af1-8925-05597ade9485");
INSERT INTO O_TPARM
	VALUES ("62908e76-4dab-4aee-91a4-864c95ce4fae",
	"9bf9cd87-5a44-46e2-b3c6-f4b6d456609d",
	'sm_sm',
	"f6562655-0940-4f4f-a1ae-7094b79949a7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("8803b827-8934-4198-bcdd-56c4d4524fd8",
	"9bf9cd87-5a44-46e2-b3c6-f4b6d456609d",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"62908e76-4dab-4aee-91a4-864c95ce4fae",
	'');
INSERT INTO O_TFR
	VALUES ("7275e256-3909-4d82-8c71-c51ad5614ea7",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'StateMachineEvent_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'sm_evt = param.sm_evt;

// This is a fairly heavily modified version of the same function in OOAofOOA
sm_evt.Mning = param.name;

// set this event''s number to a default value
sm_evt.Numb = 1;

// give this event a unique number
self.StateMachineEvent_setUniqueNumber(sm_evt:sm_evt, checkForDuplicate:false);

select one sm related by sm_evt->SM_SM[R502];                                   
create object instance semEvt of SM_SEVT;
relate sm_evt to semEvt across R525;
create object instance locEvt of SM_LEVT;
relate semEvt to locEvt across R526;
//
self.SEMEvent_createDefaultMatrixEntries(sm_sevt:semEvt);
',
	1,
	'',
	"052ed84c-221e-4169-bb11-a21a84d84a7b");
INSERT INTO O_TPARM
	VALUES ("2727a3e8-9a4d-42d4-bb55-3fd47506d30c",
	"7275e256-3909-4d82-8c71-c51ad5614ea7",
	'sm_evt',
	"33eebb24-8068-410b-a905-37c4e5cc2fdb",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("33eebb24-8068-410b-a905-37c4e5cc2fdb",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<State Machine Event>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/State Machine/State Machine.xtuml');
INSERT INTO O_TPARM
	VALUES ("67b0f95f-8d83-4ada-9efe-fe6145c977f9",
	"7275e256-3909-4d82-8c71-c51ad5614ea7",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2727a3e8-9a4d-42d4-bb55-3fd47506d30c",
	'');
INSERT INTO O_TFR
	VALUES ("fcecf336-d019-41b1-8fed-2d87543e22ec",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'StateMachineEvent_setUniqueNumber',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'sm_evt = param.sm_evt;
checkForDuplicate = param.checkForDuplicate;

// for each event associated with this event''s state machine
select one sm related by sm_evt->SM_SM[R502];
select many events related by sm->SM_EVT[R502];
foundDuplicate = false;
originalNumb = sm_evt.Numb;
for each event in events
  // if this event is sm_evt, skip it
  if (event.SMevt_ID == sm_evt.SMevt_ID)  continue;  end if;

  if(event.Numb == sm_evt.Numb)
    foundDuplicate = true;
  end if;

  // if this other event''s number is greater than this event''s number
  if (event.Numb >= sm_evt.Numb)
    // have this event''s number be just greater than that of 
    // this other event
    sm_evt.Numb = event.Numb + 1;
  end if;
end for;
if(not foundDuplicate and param.checkForDuplicate)
  sm_evt.Numb = originalNumb;
end if;',
	1,
	'',
	"8b1c235a-9bcf-4b0f-91a0-a53ef24edc4b");
INSERT INTO O_TPARM
	VALUES ("b48d203a-25d7-41eb-bec6-fa61194538a9",
	"fcecf336-d019-41b1-8fed-2d87543e22ec",
	'sm_evt',
	"33eebb24-8068-410b-a905-37c4e5cc2fdb",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("13e0b14e-a2b8-4a85-b25c-52f9107c2e02",
	"fcecf336-d019-41b1-8fed-2d87543e22ec",
	'checkForDuplicate',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"b48d203a-25d7-41eb-bec6-fa61194538a9",
	'');
INSERT INTO O_TFR
	VALUES ("95d28c71-7112-48a3-9945-3db8666f33fa",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'SEMEvent_createDefaultMatrixEntries',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'sm_sevt = param.sm_sevt;

/*
Creates a can''t-happen matrix entry for this event for each state in this event''s 
state machine.
*/

// for each state in this event''s state machine
select many states related by sm_sevt->SM_EVT[R525]->SM_SM[R502]->SM_STATE[R501];
for each state in states
    select any entry related by sm_sevt->SM_SEME[R503] where (selected.SMstt_ID == state.SMstt_ID);
    if ( empty entry )
	  // create an event-matrix-entry to relate this state to this event
	  create object instance entry of SM_SEME;
	  relate state to sm_sevt across R503 using entry;
	  
	  // create a can''t-happen entry to classify the event-matrix
	  // entry created above
	  create object instance cantHappen of SM_CH;
	  relate cantHappen to entry across R504;
    end if;
end for;',
	1,
	'',
	"39307b35-30ec-4d13-95c6-ec00ad55cd77");
INSERT INTO O_TPARM
	VALUES ("ce7ac460-d5ae-4d86-86d2-4e244dba0a7e",
	"95d28c71-7112-48a3-9945-3db8666f33fa",
	'sm_sevt',
	"e62eb4e0-7b0c-4f70-877e-0192af434e3a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e62eb4e0-7b0c-4f70-877e-0192af434e3a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<SEM Event>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/State Machine/State Machine.xtuml');
INSERT INTO O_TFR
	VALUES ("7e69abb2-76bc-4021-8183-9dc2025688bb",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformTransition',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'current_class = self.current_class;

select any sm_sm from instances of SM_SM where ( false );

if ( true == self.processingISM )
  select one sm_sm related by current_class->SM_ISM[R518]->SM_SM[R517];
else
  select one sm_sm related by current_class->SM_ASM[R519]->SM_SM[R517];
end if;

// NON_EXISTENT: ''Non_Existent'' | ''Non_Existant'' | ''non_existent'';
if ( ("Non_Existent" == param.startState) or ("Non_Existant" == param.startState) or ("non_existent" == param.startState) )
  self.StateMachine_newCreationTransition(sm_sm: sm_sm, eventName:param.eventName, endState:param.endState);
else
  self.StateMachine_newTransition(sm_sm: sm_sm, eventName:param.eventName, startState:param.startState, endState:param.endState);
end if;
',
	1,
	'',
	"8bd3b9a0-f3ac-4342-8d1d-0d96cb608c48");
INSERT INTO O_TPARM
	VALUES ("d8b6a3cf-04fd-47d1-8e5b-186cdc6d49bf",
	"7e69abb2-76bc-4021-8183-9dc2025688bb",
	'eventName',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("78e3225e-60e8-49da-9fb1-cffd3900fe18",
	"7e69abb2-76bc-4021-8183-9dc2025688bb",
	'startState',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d8b6a3cf-04fd-47d1-8e5b-186cdc6d49bf",
	'');
INSERT INTO O_TPARM
	VALUES ("a3b278e6-0ee0-410b-b114-b793a8bcfa4e",
	"7e69abb2-76bc-4021-8183-9dc2025688bb",
	'endState',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"78e3225e-60e8-49da-9fb1-cffd3900fe18",
	'');
INSERT INTO O_TFR
	VALUES ("4976f346-397d-40d4-b939-c1ab6cc5bbea",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'StateMachine_newTransition',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'sm_sm = param.sm_sm;

// Similar to the same function in OOAofOOA but here we do some extra work to handle case where the endState is 
// not really a state but is "Ignore" or "Cannot_Happen"

select any fromState related by sm_sm->SM_STATE[R501] where (selected.Name == param.startState);
select any sm_evt related by sm_sm->SM_EVT[R502] where ( selected.Mning == param.eventName );

//IGNORE: ''Ignore'';
if ( "Ignore" == param.endState )
  // change the matrix entry for the event found above from a can''t happen to an ignore
  select any seme related by sm_evt->SM_SEVT[R525]->SM_SEME[R503] where (selected.SMstt_ID == fromState.SMstt_ID);
  self.StateEventMatrixEntry_migrateChToEi(sm_seme:seme);
//CANNOT_HAPPEN: ''Cannot_Happen'' | ''cannot_happen'';
elif ( "Cannot_Happen" == param.endState or "cannot_happen" == param.endState )
  // change the matrix entry for the event found above from an ignore to a can''t happen
  select any seme related by sm_evt->SM_SEVT[R525]->SM_SEME[R503] where (selected.SMstt_ID == fromState.SMstt_ID);
  self.StateEventMatrixEntry_migrateEiToCh(sm_seme:seme);
else
  select any toState related by sm_sm->SM_STATE[R501] where (selected.Name == param.endState);
  if (not_empty fromState and not_empty toState)
    create object instance tr of SM_TXN;
    create object instance net of SM_NETXN;
    relate tr to net across R507;
    relate net to fromState across R508;
    relate tr to toState across R506;
    relate sm_sm to tr across R505;
    self.Transition_initialize(sm_txn:tr);
    self.Transition_addEvent(sm_txn:tr, sm_sm:sm_sm, sm_evt:sm_evt);
  /*else
      TODO - LOG error message?*/
  end if;
end if;',
	1,
	'',
	"bc18a8a6-8343-4640-9953-070d98414a12");
INSERT INTO O_TPARM
	VALUES ("446e11af-bd56-4a5c-8b52-d70f13e1a063",
	"4976f346-397d-40d4-b939-c1ab6cc5bbea",
	'eventName',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9318a84f-7ca6-499e-a3e0-6925da2eef80",
	'');
INSERT INTO O_TPARM
	VALUES ("a1d66220-fa0b-4ede-9bae-c3c068d60fba",
	"4976f346-397d-40d4-b939-c1ab6cc5bbea",
	'startState',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"446e11af-bd56-4a5c-8b52-d70f13e1a063",
	'');
INSERT INTO O_TPARM
	VALUES ("8e305ec5-a8f4-4074-b246-c01ebb72b76b",
	"4976f346-397d-40d4-b939-c1ab6cc5bbea",
	'endState',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a1d66220-fa0b-4ede-9bae-c3c068d60fba",
	'');
INSERT INTO O_TPARM
	VALUES ("9318a84f-7ca6-499e-a3e0-6925da2eef80",
	"4976f346-397d-40d4-b939-c1ab6cc5bbea",
	'sm_sm',
	"f6562655-0940-4f4f-a1ae-7094b79949a7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("9e1603f8-30b3-45e7-a697-d89f16f10bf0",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Transition_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'sm_txn = param.sm_txn;

// Transition.initialize()
// Create the action home
create object instance ah of SM_AH;
create object instance tah of SM_TAH;
relate ah to tah across R513;
select one sm related by sm_txn->SM_SM[R505];  
create object instance act of SM_ACT;
act.Suc_Pars = ParseStatus::parseInitial;
relate act to ah across R514;
relate act to sm across R515;
relate sm_txn to tah across R530;
',
	1,
	'',
	"b9a56abe-561b-4c63-aae8-9127fa0316e7");
INSERT INTO O_TPARM
	VALUES ("a9787f3a-ea1e-4da7-983e-996a97efc9d0",
	"9e1603f8-30b3-45e7-a697-d89f16f10bf0",
	'sm_txn',
	"f1d56d88-4138-4bdf-a9a2-306b73878dab",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f1d56d88-4138-4bdf-a9a2-306b73878dab",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Transition>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/State Machine/State Machine.xtuml');
INSERT INTO O_TFR
	VALUES ("bbd564a6-2b4f-4af1-8925-05597ade9485",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'StateMachine_newCreationTransition',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'sm_sm = param.sm_sm;

//IGNORE: ''Ignore'';
if ( "Ignore" == param.endState )
  // TODO - handle setting the transition type on the event, look at StateMachineEvent ignoreOnState
  //   ...but do we care about this on creation events in xtUML land? 
//CANNOT_HAPPEN: ''Cannot_Happen'' | ''cannot_happen'';
elif ( "Cannot_Happen" == param.endState or "cannot_happen" == param.endState )
  // TODO - handle setting the transition type on the event, look at StateMachineEvent sayCantHappenOnState
  //   ...but do we care about this on creation events in xtUML land? 
else
  select any state related by sm_sm->SM_STATE[R501] where (selected.Name == param.endState);
  if (not_empty state)
    create object instance tr of SM_TXN;
    create object instance ct of SM_CRTXN;
    relate tr to ct across R507;
    relate tr to state across R506;
    relate sm_sm to tr across R505;
    self.Transition_initialize(sm_txn:tr);
	select any sm_evt related by sm_sm->SM_EVT[R502] where ( selected.Mning == param.eventName );
	if ( not_empty sm_evt )
      self.Transition_addEvent(sm_txn:tr, sm_sm:sm_sm, sm_evt:sm_evt);
    end if;
  /*else
      TODO - LOG error message?*/
  end if;
end if;',
	1,
	'',
	"8d27a753-f5b1-44d2-9c37-5af98d0b7339");
INSERT INTO O_TPARM
	VALUES ("ebfa211d-04c7-4122-8421-7b4986727737",
	"bbd564a6-2b4f-4af1-8925-05597ade9485",
	'sm_sm',
	"f6562655-0940-4f4f-a1ae-7094b79949a7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("534e77a1-f4c2-423a-bfb6-60c8e65abcb6",
	"bbd564a6-2b4f-4af1-8925-05597ade9485",
	'eventName',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ebfa211d-04c7-4122-8421-7b4986727737",
	'');
INSERT INTO O_TPARM
	VALUES ("c207bdac-25bf-4d73-933f-8924a1a5fa80",
	"bbd564a6-2b4f-4af1-8925-05597ade9485",
	'endState',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"534e77a1-f4c2-423a-bfb6-60c8e65abcb6",
	'');
INSERT INTO O_TFR
	VALUES ("b9a56abe-561b-4c63-aae8-9127fa0316e7",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Transition_addEvent',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'sm_txn = param.sm_txn;
sm_sm = param.sm_sm;
sm_evt = param.sm_evt;

// Modified version of the same function from OOAofOOA
select one no_evt_txn related by sm_txn->SM_NETXN[R507];
if ( not_empty no_evt_txn )
  select one orig_state related by no_evt_txn->SM_STATE[R508];
  unrelate no_evt_txn from orig_state across R508;
  unrelate no_evt_txn from sm_txn across R507;
  delete object instance no_evt_txn;
  create object instance ns_txn of SM_NSTXN;
  relate sm_txn to ns_txn across R507;
   
  select any seme related by orig_state->SM_SEME[R503] 
      where selected.SMevt_ID == sm_evt.SMevt_ID;
  self.StateEventMatrixEntry_disposeChOrEi(sm_seme:seme);
  relate ns_txn to seme across R504;
else
  select one ns_txn related by sm_txn->SM_NSTXN[R507];
  if ( not_empty ns_txn )
    select one seme related by ns_txn->SM_SEME[R504];
    select one orig_state related by seme->SM_STATE[R503];

    // change SEME caused by old event to be cant happen
    create object instance ch of SM_CH;
    unrelate ns_txn from seme across R504;
    relate seme to ch across R504;
     
    // find SEME caused by new event
    select any new_seme related by orig_state->SM_SEME[R503] 
        where selected.SMevt_ID == sm_evt.SMevt_ID;
    self.StateEventMatrixEntry_disposeChOrEi(sm_seme:new_seme);
    relate new_seme to ns_txn across R504;
    // state supplemental dataset should be unchanged
  else
    select one cr_txn related by sm_txn->SM_CRTXN[R507];
    select one levt related by cr_txn->SM_LEVT[R509];
    if ( not_empty levt )
      unrelate cr_txn from levt across R509;
    end if;
    select one new_evt related by sm_evt->SM_SEVT[R525]->SM_LEVT[R526];         
    relate cr_txn to new_evt across R509;
  end if;
end if;

',
	1,
	'',
	"0ff33986-594c-49e8-84a0-7eb628272d32");
INSERT INTO O_TPARM
	VALUES ("48f10510-5096-44fc-a719-204eda762c85",
	"b9a56abe-561b-4c63-aae8-9127fa0316e7",
	'sm_evt',
	"33eebb24-8068-410b-a905-37c4e5cc2fdb",
	0,
	'',
	"a9b9cd5b-3edb-475a-a2ca-cfb0cdc21618",
	'');
INSERT INTO O_TPARM
	VALUES ("a6c8f437-c153-493f-9d9a-cc3cb8e6f469",
	"b9a56abe-561b-4c63-aae8-9127fa0316e7",
	'sm_txn',
	"f1d56d88-4138-4bdf-a9a2-306b73878dab",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("a9b9cd5b-3edb-475a-a2ca-cfb0cdc21618",
	"b9a56abe-561b-4c63-aae8-9127fa0316e7",
	'sm_sm',
	"f6562655-0940-4f4f-a1ae-7094b79949a7",
	0,
	'',
	"a6c8f437-c153-493f-9d9a-cc3cb8e6f469",
	'');
INSERT INTO O_TFR
	VALUES ("c05e4e81-e31b-407e-82a8-6f734786b680",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Operation_newParameter',
	'',
	"eeb98cba-1a0c-4d36-80f1-c0199a301aaf",
	1,
	'o_tfr = param.o_tfr;

select any parm related by o_tfr->O_TPARM[R117] where ( selected.Name == param.parameter_name );

if ( empty parm )
  create object instance parm of O_TPARM;
  relate o_tfr to parm across R117;
  self.OperationParameter_initialize(o_tparm:parm, name:param.parameter_name);
  self.Operation_createParameterInInteractions(o_tparm: parm, o_tfr:o_tfr);
end if;

return parm;',
	1,
	'',
	"df742b16-077b-4e8d-acf5-363505b130c5");
INSERT INTO O_TPARM
	VALUES ("2ea81742-689c-4322-aafb-183681cd3584",
	"c05e4e81-e31b-407e-82a8-6f734786b680",
	'o_tfr',
	"5cb6d426-f094-4cad-8cdb-b16506c9f2e6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("e81a1f40-b737-4ec6-9b50-a26d49620f75",
	"c05e4e81-e31b-407e-82a8-6f734786b680",
	'parameter_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2ea81742-689c-4322-aafb-183681cd3584",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("eeb98cba-1a0c-4d36-80f1-c0199a301aaf",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Operation Parameter>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Subsystem/Subsystem.xtuml');
INSERT INTO O_TFR
	VALUES ("e7700947-8940-4165-936d-4d03f7965e7e",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'OperationParameter_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_tparm = param.o_tparm;

// Note: this is a heavily modified version of the function from OOAofOOA
select one operation related by o_tparm->O_TFR[R117];
self.Operation_addParameterToOrdering(o_tfr:operation, o_tparm:o_tparm);

// TODO - assign a default type to aid in testing.  Do we want to keep this (to // END)?
systypes_pkg = self.systypes_pkg;
select any def_dt related by systypes_pkg->PE_PE[R8000]->S_DT[R8001] where ( selected.Name == "string" );
// END

relate o_tparm to def_dt across R118;
o_tparm.Name = param.name;
',
	1,
	'',
	"0a620c79-b06e-461b-a454-d7457e58a1a0");
INSERT INTO O_TPARM
	VALUES ("c42b2a6f-1e21-44d9-91ea-ad04a012f86e",
	"e7700947-8940-4165-936d-4d03f7965e7e",
	'o_tparm',
	"eeb98cba-1a0c-4d36-80f1-c0199a301aaf",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("bc8a0a78-3f25-4090-a78c-79599ad890d7",
	"e7700947-8940-4165-936d-4d03f7965e7e",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c42b2a6f-1e21-44d9-91ea-ad04a012f86e",
	'');
INSERT INTO O_TFR
	VALUES ("fa586bd2-1a62-4b97-a659-eb8c7baa156b",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Operation_createParameterInInteractions',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_tparm = param.o_tparm;
o_tfr = param.o_tfr;

// for each message associated with this bridge
// create a message argument
select many messages related by o_tfr->MSG_O[R1011]->MSG_SM[R1020]->MSG_M[R1018];
for each message in messages
  create object instance arg of MSG_A;
  create object instance oa of MSG_OA;
  relate oa to o_tparm across R1015;
  relate oa to arg across R1013;
  relate message to arg across R1001;
end for;
',
	1,
	'',
	"9d4210cf-13a0-4a9c-a3e1-2351437a6a42");
INSERT INTO O_TPARM
	VALUES ("df6dba44-bcd7-4e46-b2a6-485ef003844f",
	"fa586bd2-1a62-4b97-a659-eb8c7baa156b",
	'o_tparm',
	"eeb98cba-1a0c-4d36-80f1-c0199a301aaf",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("32ecdcab-e89e-4856-a8ec-c66a2cbbffad",
	"fa586bd2-1a62-4b97-a659-eb8c7baa156b",
	'o_tfr',
	"5cb6d426-f094-4cad-8cdb-b16506c9f2e6",
	0,
	'',
	"df6dba44-bcd7-4e46-b2a6-485ef003844f",
	'');
INSERT INTO O_TFR
	VALUES ("9d4210cf-13a0-4a9c-a3e1-2351437a6a42",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Operation_addParameterToOrdering',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_tfr = param.o_tfr;
parameter = param.o_tparm;

if(not_empty parameter)
  select many peers related by o_tfr->O_TPARM[R117];
  for each peer in peers
    if (peer != parameter)
      select one predecessor related by peer->O_TPARM[R124.''precedes''];
      if (empty predecessor)
        relate parameter to peer across R124.''succeeds'';
      end if;
    end if;
  end for;
end if;',
	1,
	'',
	"b723c974-e873-4522-8eae-2657f6f89c20");
INSERT INTO O_TPARM
	VALUES ("73e8922e-3160-41ad-8cca-68d25a87239c",
	"9d4210cf-13a0-4a9c-a3e1-2351437a6a42",
	'o_tfr',
	"5cb6d426-f094-4cad-8cdb-b16506c9f2e6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("262b6740-2fe8-4a02-bc96-f2460b867f2d",
	"9d4210cf-13a0-4a9c-a3e1-2351437a6a42",
	'o_tparm',
	"eeb98cba-1a0c-4d36-80f1-c0199a301aaf",
	0,
	'',
	"73e8922e-3160-41ad-8cca-68d25a87239c",
	'');
INSERT INTO O_TFR
	VALUES ("59006327-25ec-491c-862a-bcb648543e48",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Function_newParameter',
	'',
	"a01a1995-8ff8-44fe-abb1-b11213d98016",
	1,
	's_sync = param.s_sync;

select any parm related by s_sync->S_SPARM[R24] where ( selected.Name == param.parameter_name );

if ( empty parm )
  create object instance parm of S_SPARM;
  relate s_sync to parm across R24;
  self.FunctionParameter_initialize(s_sparm:parm, name:param.parameter_name);
  self.Function_createMessageArgumentsForParameter(s_sync:s_sync, s_sparm:parm);
end if;

return parm;',
	1,
	'',
	"3bb45e5b-9cf4-4566-8bb6-47f1f59b17d2");
INSERT INTO O_TPARM
	VALUES ("e6c7ea19-8682-4da9-b6c0-ed0cf389ddca",
	"59006327-25ec-491c-862a-bcb648543e48",
	's_sync',
	"60690409-5a69-45db-896b-5a63a9103c18",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("e40a3897-701d-4b75-8343-42634d615a3e",
	"59006327-25ec-491c-862a-bcb648543e48",
	'parameter_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e6c7ea19-8682-4da9-b6c0-ed0cf389ddca",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a01a1995-8ff8-44fe-abb1-b11213d98016",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Function Parameter>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Domain/Domain.xtuml');
INSERT INTO O_TFR
	VALUES ("c4648b6f-189d-4a22-8512-1a81979ba4d5",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'FunctionParameter_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	's_sparm = param.s_sparm;

select one function related by s_sparm->S_SYNC[R24];
self.Function_addParameterToOrder(s_sync:function, s_sparm:s_sparm);

// TODO - assign a default type to aid in testing.  Do we want to keep this (to // END)?
systypes_pkg = self.systypes_pkg;
select any def_dt related by systypes_pkg->PE_PE[R8000]->S_DT[R8001] where ( selected.Name == "string" );
// END

relate s_sparm to def_dt across R26;
s_sparm.Name = param.name;
    ',
	1,
	'',
	"93050450-3368-4788-ba8d-1955efd49ed1");
INSERT INTO O_TPARM
	VALUES ("2164f926-dcf0-4d95-981b-80ffcafb027b",
	"c4648b6f-189d-4a22-8512-1a81979ba4d5",
	's_sparm',
	"a01a1995-8ff8-44fe-abb1-b11213d98016",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("37a578d8-5d36-4171-9299-9b25516fe275",
	"c4648b6f-189d-4a22-8512-1a81979ba4d5",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2164f926-dcf0-4d95-981b-80ffcafb027b",
	'');
INSERT INTO O_TFR
	VALUES ("535c79c8-822d-495a-8b3f-74d92ed73803",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Function_addParameterToOrder',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	's_sync = param.s_sync;
parameter = param.s_sparm;

if(not_empty parameter)
  select many peers related by s_sync->S_SPARM[R24];
  for each peer in peers
    if (peer != parameter)
      select one predecessor related by peer->S_SPARM[R54.''precedes''];
      if (empty predecessor)
        relate parameter to peer across R54.''succeeds'';
      end if;
    end if;
  end for;
end if;
',
	1,
	'',
	"77c5fd32-dff1-44a1-bb77-ac8d2ebf2e3c");
INSERT INTO O_TPARM
	VALUES ("b2804676-124f-447f-87fb-28a22ba7c9dc",
	"535c79c8-822d-495a-8b3f-74d92ed73803",
	's_sync',
	"60690409-5a69-45db-896b-5a63a9103c18",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("999999e3-d71e-4736-93c9-518a69aabf3e",
	"535c79c8-822d-495a-8b3f-74d92ed73803",
	's_sparm',
	"a01a1995-8ff8-44fe-abb1-b11213d98016",
	0,
	'',
	"b2804676-124f-447f-87fb-28a22ba7c9dc",
	'');
INSERT INTO O_TFR
	VALUES ("fb586e84-fe0c-437d-a171-fa3b7388d3b6",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Function_createMessageArgumentsForParameter',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	's_sync = param.s_sync;
parameter = param.s_sparm;

if(not_empty parameter)
  // for each message associated with this function
  // create a message argument
  select many messages related by s_sync->MSG_F[R1010]->MSG_SM[R1020]->MSG_M[R1018];
  for each message in messages
    create object instance arg of MSG_A;
    create object instance fa of MSG_FA;
    relate fa to parameter across R1016;
    relate fa to arg across R1013;
    relate message to arg across R1001;  
  end for;
end if;',
	1,
	'',
	"535c79c8-822d-495a-8b3f-74d92ed73803");
INSERT INTO O_TPARM
	VALUES ("4bae02c0-d341-42d8-8b66-d89295499d7c",
	"fb586e84-fe0c-437d-a171-fa3b7388d3b6",
	's_sync',
	"60690409-5a69-45db-896b-5a63a9103c18",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("d8c22c5e-9f70-4f5a-96f0-dd3503801c8a",
	"fb586e84-fe0c-437d-a171-fa3b7388d3b6",
	's_sparm',
	"a01a1995-8ff8-44fe-abb1-b11213d98016",
	0,
	'',
	"4bae02c0-d341-42d8-8b66-d89295499d7c",
	'');
INSERT INTO O_TFR
	VALUES ("77c5fd32-dff1-44a1-bb77-ac8d2ebf2e3c",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'FunctionParameter_setType',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	's_sparm = param.s_sparm;
type_name = param.type_name;

// NOTE: This isn''t really a copied operation from the OOAofOOA, but we''re following the same paradigm for it
//   as other functions that are from the OOA

// Get a handle to the DT that is named as a parameter, output error if none found
//   TODO - This is a very broad selection.  Is that OK?  Can we assume that during convert we won''t see data that 
//     has multiple (different) types with the same name?  Keith thinks so.
select any s_dt from instances of S_DT where ( selected.Name == type_name );
if ( empty s_dt )
  // TODO - what should the ID be set to?
  TRACE::log( flavor:"failure", id:0, message:"could not find datatype  " + type_name + " to set for attribute " + s_sparm.Name);
end if;

// Get a handle to the DT that is currently associated with the attribute
select one cur_s_dt related by s_sparm->S_DT[R26];

// If the new DT does not equal the existing DT, continue
if ( s_dt != cur_s_dt )
  // un-relate the existing DT across R26
  unrelate s_sparm from cur_s_dt across R26;
  
  // relate the new attribute across R26
  relate s_sparm to s_dt across R26;
end if;',
	1,
	'',
	"c4648b6f-189d-4a22-8512-1a81979ba4d5");
INSERT INTO O_TPARM
	VALUES ("ed8aaacc-d025-49fe-a4ac-9e4ecdbd0cc4",
	"77c5fd32-dff1-44a1-bb77-ac8d2ebf2e3c",
	's_sparm',
	"a01a1995-8ff8-44fe-abb1-b11213d98016",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("2fb53a0e-e51e-4845-9480-18dce9ed9165",
	"77c5fd32-dff1-44a1-bb77-ac8d2ebf2e3c",
	'type_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ed8aaacc-d025-49fe-a4ac-9e4ecdbd0cc4",
	'');
INSERT INTO O_TFR
	VALUES ("b723c974-e873-4522-8eae-2657f6f89c20",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'OperationParameter_setType',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_tparm = param.o_tparm;
type_name = param.type_name;

// NOTE: This isn''t really a copied operation from the OOAofOOA, but we''re following the same paradigm for it
//   as other functions that are from the OOA

// Get a handle to the DT that is named as a parameter, output error if none found
//   TODO - This is a very broad selection.  Is that OK?  Can we assume that during convert we won''t see data that 
//     has multiple (different) types with the same name?  Keith thinks so.
select any s_dt from instances of S_DT where ( selected.Name == type_name );
if ( empty s_dt )
  // TODO - what should the ID be set to?
  TRACE::log( flavor:"failure", id:0, message:"could not find datatype  " + type_name + " to set for attribute " + o_tparm.Name);
end if;

// Get a handle to the DT that is currently associated with the attribute
select one cur_s_dt related by o_tparm->S_DT[R118];

// If the new DT does not equal the existing DT, continue
if ( s_dt != cur_s_dt )
  // un-relate the existing DT across R118
  unrelate o_tparm from cur_s_dt across R118;
  
  // relate the new attribute across R118
  relate o_tparm to s_dt across R118;
end if;',
	1,
	'',
	"e7700947-8940-4165-936d-4d03f7965e7e");
INSERT INTO O_TPARM
	VALUES ("50504e2c-f800-4802-a0a0-5bb4190410d6",
	"b723c974-e873-4522-8eae-2657f6f89c20",
	'o_tparm',
	"eeb98cba-1a0c-4d36-80f1-c0199a301aaf",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("7fbf83ed-827c-4ce9-97df-9c9bc4889ba1",
	"b723c974-e873-4522-8eae-2657f6f89c20",
	'type_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"50504e2c-f800-4802-a0a0-5bb4190410d6",
	'');
INSERT INTO O_TFR
	VALUES ("d38ae9a8-5ce0-4042-a2cc-14aae4cbc971",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'clearRelationshipCache',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'self.current_rel.type = RELATIONSHIP_TYPE::NONE;
self.current_rel.number = "";
self.current_rel.usingObj = "";
self.current_rel.description = "";

select many parts from instances of ooaparticipation;
for each part in parts
  delete object instance part;
end for;',
	1,
	'',
	"afdf1a15-9d14-4cc7-807d-8326a83284ea");
INSERT INTO O_TFR
	VALUES ("d1b5e917-bf32-4867-853a-b46ead34387f",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Package_newAssociation',
	'',
	"4480b008-8c74-4f57-9256-08b7365520bc",
	1,
	'ep_pkg = param.ep_pkg;
select any fromOOAPart from instances of ooaparticipation where (selected.isFirst == true );
select any toOOAPart from instances of ooaparticipation where (selected.isFirst == false );

// What follows is a heavily modified version of OOAofOOA''s Package::newAssociation()
  
select any fromClass related by ep_pkg->PE_PE[R8000]->O_OBJ[R8001] where (selected.Name == fromOOAPart.className);
/* TODO - not handling association to imported class, don''t think we need to.
select any fromIClass related by ep_pkg->PE_PE[R8000]->O_IOBJ[R8001] where (selected.IObj_ID == param.from);
if (param.fromIsImported)
  if (not_empty fromIClass)
    select one fromClass related by fromIClass->O_OBJ[R101];
  end if;
end if;*/
select any toClass related by ep_pkg->PE_PE[R8000]->O_OBJ[R8001] where (selected.Name == toOOAPart.className);
/* TODO - not handling association to imported class, don''t think we need to.
select any toIClass related by ep_pkg->PE_PE[R8000]->O_IOBJ[R8001] where (selected.IObj_ID == param.to);
if (param.toIsImported)
  if (not_empty toIClass)
    select one toClass related by toIClass->O_OBJ[R101];
  end if;
end if;*/
//

select any assoc from instances of R_REL where false;
if (not_empty fromClass and not_empty toClass)
  create object instance assoc of R_REL;
  // create Packageable Element supertype and hook up to this package.
  create object instance pe of PE_PE;
  relate assoc to pe across R8001;
  relate pe to ep_pkg across R8000;
  pe.type = ElementTypeConstants::ASSOCIATION;
  self.PackageableElement_initialize(pe_pe:pe);
  self.Association_initialize(r_rel:assoc);
  create object instance simp of R_SIMP;
  relate simp to assoc across R206;
  //
  create object instance fromOIR of R_OIR;
  relate fromClass to assoc across R201 using fromOIR;
  create object instance fromRTO of R_RTO;
  relate fromOIR to fromRTO across R203;
  create object instance fromPART of R_PART;
  relate fromPART to fromRTO across R204;
  relate fromPART to simp across R207;
  /* TODO - not handling imported class associations
  if (param.fromIsImported)
    if (not_empty fromIClass)
      relate fromOIR to fromIClass across R202;
    end if;
  end if;*/
  fromPART.Mult = toOOAPart.multiplicity;
  fromPART.Cond = toOOAPart.conditionality;
  fromPART.Txt_Phrs = toOOAPart.phrase;
  //
  create object instance toOIR of R_OIR;
  relate toClass to assoc across R201 using toOIR;
  create object instance toRTO of R_RTO;
  relate toOIR to toRTO across R203;
  create object instance toPART of R_PART;
  relate toPART to toRTO across R204;
  relate toPART to simp across R207;
  /* TODO - not handling imported class associations
  if (param.toIsImported)
    if (not_empty toIClass)
      relate toOIR to toIClass across R202;
    end if;
  end if;*/
  // TODO - set phrase, cond, mult
  toPART.Mult = fromOOAPart.multiplicity;
  toPART.Cond = fromOOAPart.conditionality;
  toPART.Txt_Phrs = fromOOAPart.phrase;
end if;

return assoc;',
	1,
	'',
	"9c97aa3a-d0d2-409c-86d0-9194db2476c5");
INSERT INTO O_TPARM
	VALUES ("c43bdd14-a7b3-4c51-9705-c51442c57211",
	"d1b5e917-bf32-4867-853a-b46ead34387f",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4480b008-8c74-4f57-9256-08b7365520bc",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Association>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Association/Association.xtuml');
INSERT INTO O_TFR
	VALUES ("5cec88a1-a445-447f-89b0-5f866ba2805b",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Association_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_rel = param.r_rel;

relNumber = STRING::atoi(s:self.current_rel.number);
r_rel.Numb = relNumber;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("da6080e7-95eb-420a-8803-d5242efb9c93",
	"5cec88a1-a445-447f-89b0-5f866ba2805b",
	'r_rel',
	"4480b008-8c74-4f57-9256-08b7365520bc",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("a1b455eb-8d8e-44a5-a755-7bd2a08eaec7",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformAssociation',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Get the package with the same name as the component, this is where we put the "internal behavior"
current_component = self.current_component;
select any internals_pkg related by current_component->PE_PE[R8003]->EP_PKG[R8001] where (selected.Name == current_component.Name);

select any assoc from instances of R_REL where false;
if (  self.current_rel.type == RELATIONSHIP_TYPE::ASSOCIATIVE )
  // Associative links are simple associations that are then migrated to be associative.  So here we 
  // create the simple association first.
  assoc = self.Package_newAssociation(ep_pkg:internals_pkg);
  self.Package_newAssociative(ep_pkg:internals_pkg);
elif ( self.current_rel.type == RELATIONSHIP_TYPE::REGULAR )
  assoc = self.Package_newAssociation(ep_pkg:internals_pkg); 
elif ( self.current_rel.type == RELATIONSHIP_TYPE::SUBSUPER )
  assoc = self.Package_newSubsuper(ep_pkg:internals_pkg); 
end if;

// store the description
if ( not_empty assoc )
  assoc.Descrip = assoc.Descrip + self.current_rel.description;
end if;
',
	1,
	'',
	"10b41e09-87b2-4ef5-89ad-9ef4c39d9637");
INSERT INTO O_TFR
	VALUES ("e5ab0186-8756-4d6c-bb89-26bf2f9e1423",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Package_newAssociative',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'ep_pkg = param.ep_pkg;

// What follows is a heavily modified version of OOAofOOA''s Package::newAssociative()
select any fromClass related by ep_pkg->PE_PE[R8000]->O_OBJ[R8001] where (selected.Name == self.current_rel.usingObj);

/*  TODO - skipping imported classes for now
if (param.fromIsImportedClass)
  select any fromIClass related by self->PE_PE[R8000]->O_IOBJ[R8001] where (selected.IObj_ID == param.from);
  if (not_empty fromIClass)
    select one fromClass related by fromIClass->O_OBJ[R101];
  end if;
end if;*/
relNumber = STRING::atoi(s:self.current_rel.number); 
select any toAssoc related by ep_pkg->PE_PE[R8000]->R_REL[R8001] where (selected.Numb == relNumber);
// get the already related class in relationship instances
select many classes related by toAssoc->R_OIR[R201]->O_OBJ[R201];
for each clazz in classes
  if (clazz == fromClass)
    // A class cannot be it''s own link class
    // TODO - not doing anything with return value, should we?  - return false;
    return;
  end if;
end for;
if (empty fromClass or empty toAssoc)
  // One of the elements was not found
  // TODO - not doing anything with return value, should we?  - return false;
  return;
end if;
select one simp related by toAssoc->R_SIMP[R206];
if (empty simp)
  // Only simple associations can have link classes attached. 
  // TODO - not doing anything with return value, should we?  - return false;
  return;
else
  /* TODO - not handling imported link classes
  if (param.fromIsImportedClass)
    simp.migrateToLinked(using: fromClass.Obj_ID, imported_id: param.from);
  else*/
    select any usingClass related by ep_pkg->PE_PE[R8000]->O_OBJ[R8001] where (selected.Name == self.current_rel.usingObj);
    self.SimpleAssociation_migrateToLinked(r_simp:simp, using: usingClass);
  //end if;
  // TODO - not doing anything with return value, should we?  - return true;
  return;
end if;',
	1,
	'',
	"d1b5e917-bf32-4867-853a-b46ead34387f");
INSERT INTO O_TPARM
	VALUES ("6c4fdbc7-00fb-4e26-a50e-3ba5331e8088",
	"e5ab0186-8756-4d6c-bb89-26bf2f9e1423",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("01970c74-b239-4dd8-bda0-c67f9d21607a",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'SimpleAssociation_migrateToLinked',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_simp = param.r_simp;

// create the class as link
create object instance assr of R_ASSR;

// Unformalize r_simp if it is formalized
if (self.SimpleAssociation_isFormalized(r_simp:r_simp))
  self.SimpleAssociation_unformalize(r_simp:r_simp);
end if;
select one toAssoc related by r_simp->R_REL[R206];
fromClass = param.using;
// migrate the simple association to a linked association
create object instance assoc of R_ASSOC;
unrelate r_simp from toAssoc across R206;
relate assoc to toAssoc across R206;
//
select many parts related by r_simp->R_PART[R207];
if (cardinality parts == 1)
  // this association is formalized 
  // migrate from participant to oneside
  select any part related by r_simp->R_PART[R207];
  select one rto related by part->R_RTO[R204];
  unrelate part from rto across R204;
  unrelate r_simp from part across R207;
  create object instance aone of R_AONE;
  aone.Mult = part.Mult;
  aone.Cond = part.Cond;
  aone.Txt_Phrs = part.Txt_Phrs;
  relate rto to aone across R204;
  delete object instance part;
  // link the one side to the new linked association
  relate aone to assoc across R209;
  // migrate from formalizer to otherside
  select one form related by r_simp->R_FORM[R208];
  select one rgo related by form->R_RGO[R205];
  unrelate form from rgo across R205;
  unrelate r_simp from form across R208;
  select one oir related by rgo->R_OIR[R203];
  unrelate oir from rgo across R203;
  self.ReferringClassInAssoc_dispose(r_rgo:rgo);
  create object instance othRto of R_RTO;
  relate oir to othRto across R203;
  create object instance aoth of R_AOTH;
  aoth.Mult = form.Mult;
  aoth.Cond = form.Cond;
  aoth.Txt_Phrs = form.Txt_Phrs;
  delete object instance form;
  relate othRto to aoth across R204;
  // link the other side to the new linked association
  relate aoth to assoc across R210;
  select one refClass related by oir->O_OBJ[R201];
else
  // this association is unformalized
  doingOneSide = true;
  for each part in parts
    if (doingOneSide)
      // migrate from participant to oneside
      select one rto related by part->R_RTO[R204];
      unrelate part from rto across R204;
      unrelate r_simp from part across R207;
      create object instance aone of R_AONE;
      aone.Mult = part.Mult;
      aone.Cond = part.Cond;
      aone.Txt_Phrs = part.Txt_Phrs;
      delete object instance part;
      relate rto to aone across R204;
      // link the one side to the new linked association
      relate aone to assoc across R209;
      doingOneSide = false;
    else
      // migrate from participant to otherside
      select one rto related by part->R_RTO[R204];
      unrelate part from rto across R204;
      unrelate r_simp from part across R207;
      create object instance aoth of R_AOTH;
      aoth.Mult = part.Mult;
      aoth.Cond = part.Cond;
      aoth.Txt_Phrs = part.Txt_Phrs;
      delete object instance part;
      relate rto to aoth across R204;
      // link the other side to the new linked association
      relate aoth to assoc across R210;
    end if;
  end for;
end if;
// link the fromClass to the association
create object instance oir of R_OIR;
relate fromClass to toAssoc across R201 using oir;
// create the referring class in association
create object instance rgo of R_RGO;
relate rgo to oir across R203;
relate rgo to assr across R205;
// link it with the linked association
relate assr to assoc across R211;
/* TODO - not doing anything about imported link classes at this time.  Circle back to this
if ( param.imported_id != GD::NULL_UNIQUE_ID() )
  // link class is an imported class
  select any imp_class related by fromClass->O_IOBJ[R101] 
        where selected.IObj_ID == param.imported_id;
  relate imp_class to oir across R202;
end if;*/
delete object instance r_simp;
',
	1,
	'',
	"2218adac-8f24-412c-8e58-e59dd6530054");
INSERT INTO O_TPARM
	VALUES ("c711d136-d115-4ce1-9816-38573d2745e9",
	"01970c74-b239-4dd8-bda0-c67f9d21607a",
	'using',
	"63f4ff99-f127-443b-a678-30ace41da702",
	0,
	'',
	"07ee2a3a-b7f9-4f4d-a4f5-99050056c225",
	'');
INSERT INTO O_TPARM
	VALUES ("07ee2a3a-b7f9-4f4d-a4f5-99050056c225",
	"01970c74-b239-4dd8-bda0-c67f9d21607a",
	'r_simp',
	"322c65da-132b-421a-a1b1-f757cb0acff7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("322c65da-132b-421a-a1b1-f757cb0acff7",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Simple Association>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Association/Association.xtuml');
INSERT INTO O_TFR
	VALUES ("2218adac-8f24-412c-8e58-e59dd6530054",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'SimpleAssociation_isFormalized',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'r_simp = param.r_simp;

select one form related by r_simp->R_FORM[R208];
if ( not_empty form )
  select any rto related by r_simp->R_PART[R207]->R_RTO[R204];
  select any rtida related by rto->O_RTIDA[R110];
  if ( empty rtida )
    select one assoc related by r_simp->R_REL[R206];
  end if;
  return true;
end if;
return false;
',
	1,
	'',
	"d0873ada-8a66-46eb-8826-5de36bc7e925");
INSERT INTO O_TPARM
	VALUES ("477653e6-0331-473e-979b-cfc420d3cca6",
	"2218adac-8f24-412c-8e58-e59dd6530054",
	'r_simp',
	"322c65da-132b-421a-a1b1-f757cb0acff7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("cbcea1c4-3923-4c24-9dfd-471bb8c6ec10",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'SimpleAssociation_unformalize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_simp = param.r_simp;

select any part_rto related by r_simp->R_PART[R207]->R_RTO[R204];  // there is only one

self.ReferredToClassInAssoc_unformalize(r_rto:part_rto);

// migrate formalizer back to Class As Simple Participant
select one form related by r_simp->R_FORM[R208];
self.ClassAsSimpleFormalizer_migrateToParticipant(r_form:form);


',
	1,
	'',
	"01970c74-b239-4dd8-bda0-c67f9d21607a");
INSERT INTO O_TPARM
	VALUES ("19e9d774-4d71-487f-987b-6cbc774642a2",
	"cbcea1c4-3923-4c24-9dfd-471bb8c6ec10",
	'r_simp',
	"322c65da-132b-421a-a1b1-f757cb0acff7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("e4bdc5ff-cd55-457f-a5d3-3c9753f8e304",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ReferredToClassInAssoc_unformalize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_rto = param.r_rto;

select many rtida_set related by r_rto->O_RTIDA[R110];
for each rtida in rtida_set
  select many ref_set related by rtida->O_REF[R111];
  for each ref in ref_set
    self.AttributeReferenceInClass_migrateRefAttrOrDispose(o_ref:ref);  
  end for;
  select one oida related by rtida->O_OIDA[R110];
  unrelate oida from r_rto across R110 using rtida;
  delete object instance rtida;
end for;

select one oid related by r_rto->O_ID[R109];
unrelate oid from r_rto across R109;
',
	1,
	'',
	"10ea8696-d15f-4bc1-9e5d-a4a5ebc9bc7f");
INSERT INTO O_TPARM
	VALUES ("c05f8e20-6b7d-4d77-a33d-35927ca2f309",
	"e4bdc5ff-cd55-457f-a5d3-3c9753f8e304",
	'r_rto',
	"893ea6d3-466d-498e-b58a-cf5966da5549",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("893ea6d3-466d-498e-b58a-cf5966da5549",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Referred To Class in Assoc>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Association/Association.xtuml');
INSERT INTO O_TFR
	VALUES ("f7d11722-b6db-4a91-80c5-9d36afc0263f",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ClassAsSimpleFormalizer_migrateToParticipant',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_form = param.r_form;

create object instance rto of R_RTO;
create object instance part of R_PART;

part.Mult = r_form.Mult;
part.Cond = r_form.Cond;
part.Txt_Phrs = r_form.Txt_Phrs;

select one rgo related by r_form->R_RGO[R205];
select one oir related by rgo->R_OIR[R203];
select one simp related by r_form->R_SIMP[R208];

relate oir to rto across R203;
relate rto to part across R204;
relate part to simp across R207;

// and dispose r_form from supertype
self.ReferringClassInAssoc_dispose(r_rgo:rgo);
',
	1,
	'',
	"b8efe921-434b-45cf-ada8-f8d6e3742675");
INSERT INTO O_TPARM
	VALUES ("41f91bbb-84f6-4e87-85ef-e64d96fcf873",
	"f7d11722-b6db-4a91-80c5-9d36afc0263f",
	'r_form',
	"9a6e9e32-b2f0-4344-b3a3-123b16423c3d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9a6e9e32-b2f0-4344-b3a3-123b16423c3d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Class As Simple Formalizer>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Association/Association.xtuml');
INSERT INTO O_TFR
	VALUES ("39307b35-30ec-4d13-95c6-ec00ad55cd77",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ReferringClassInAssoc_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_rgo = param.r_rgo;

// Association Subsystem
select one link related by r_rgo->R_ASSR[R205];
select one sub related by r_rgo->R_SUB[R205];
select one form related by r_rgo->R_FORM[R205];
if (not_empty link)
 self.ClassAsLink_dispose(r_assr:link);
elif (not_empty sub)
  // TODO - complete this work later - sub.dispose();
elif (not_empty form)
  self.ClassAsSimpleFormalizer_dispose(r_form:form);
end if;
select one cia related by r_rgo->R_OIR[R203];
if ( not_empty cia )
  unrelate r_rgo from cia across R203;
end if;
//
// Subsystem Subsystem
self.ReferringClassInAssoc_clearReferences(r_rgo:r_rgo);
//
// Finally delete self
delete object instance self;',
	1,
	'',
	"3d837957-0a89-4567-9fc3-b1c7b37b2220");
INSERT INTO O_TPARM
	VALUES ("8baa908c-2eb0-44d1-9379-d99a52c4e4f7",
	"39307b35-30ec-4d13-95c6-ec00ad55cd77",
	'r_rgo',
	"f6b00fbb-5d4e-4e79-bd36-f3289da7ee17",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f6b00fbb-5d4e-4e79-bd36-f3289da7ee17",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Referring Class In Assoc>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Association/Association.xtuml');
INSERT INTO O_TFR
	VALUES ("3d837957-0a89-4567-9fc3-b1c7b37b2220",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ReferringClassInAssoc_clearReferences',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_rgo = param.r_rgo;

select many refs related by r_rgo->O_REF[R111];
for each ref in refs
  self.AttributeReferenceInClass_migrateRefAttrOrDispose(o_ref:ref);
end for;
',
	1,
	'',
	"0fa4ac75-d42c-41dd-afaa-0446f593aed8");
INSERT INTO O_TPARM
	VALUES ("004c6777-d856-40da-88a2-222157232bc0",
	"3d837957-0a89-4567-9fc3-b1c7b37b2220",
	'r_rgo',
	"f6b00fbb-5d4e-4e79-bd36-f3289da7ee17",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("a0c8981a-e050-48bb-9746-0a90ab04dce7",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'AttributeReferenceInClass_migrateRefAttrOrDispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_ref = param.o_ref;

select many siblings related by o_ref->O_RATTR[R108]->O_REF[R108];
if (cardinality siblings == 1)
  // This referential is not going to refer to anything after this . . . 
  select one rattr related by o_ref->O_RATTR[R108];
  select any idattr related by rattr->O_ATTR[R106]->O_OIDA[R105];
  if (empty idattr)
    // this referential has no references left and it''s not part of an identifier
    // it should be removed
    select one attr related by rattr->O_ATTR[R106];
    self.Attribute_dispose(o_attr:attr);
  else
    select any rattr_ref related by idattr->O_RTIDA[R110];
    if ( not_empty rattr_ref )
      // rattr''s identifier is used to formalize another relationship
      // we need to keep it as a base attribute
      self.ReferentialAttribute_migrateToBase(o_rattr:rattr);
    else
      select one attr related by rattr->O_ATTR[R106];
      self.Attribute_dispose(o_attr:attr);
    end if;
  end if;
else
  self.AttributeReferenceInClass_dispose(o_ref:o_ref);
end if;
',
	1,
	'',
	"45e0bc8e-5e04-43ce-ae2b-4769bfd0a9a7");
INSERT INTO O_TPARM
	VALUES ("9b11fda0-3695-4201-b316-486575c88d96",
	"a0c8981a-e050-48bb-9746-0a90ab04dce7",
	'o_ref',
	"f5752494-b9cf-4fc7-b96d-4b64d6be0431",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f5752494-b9cf-4fc7-b96d-4b64d6be0431",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Attribute Reference in Class>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Subsystem/Subsystem.xtuml');
INSERT INTO O_TFR
	VALUES ("45e0bc8e-5e04-43ce-ae2b-4769bfd0a9a7",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'AttributeReferenceInClass_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_ref = param.o_ref;

select one next_ref related by o_ref->O_REF[R112.''precedes''];
select one prior_ref related by o_ref->O_REF[R112.''succeeds''];
if ( not_empty next_ref and not_empty prior_ref )
  // in the middle of the chain
  unrelate o_ref from next_ref across R112.''precedes'';
  unrelate prior_ref from o_ref across R112.''precedes'';
  relate prior_ref to next_ref across R112.''precedes'';
else
  if ( not_empty prior_ref and empty next_ref )
    // we''re last in list
    unrelate prior_ref from o_ref across R112.''precedes'';
  else
    // we''re first in list
    unrelate o_ref from next_ref across R112.''precedes'';
  end if;
end if;
select one owningReferential related by o_ref->O_RATTR[R108];
if not_empty owningReferential
 unrelate o_ref from owningReferential across R108;
end if;
select one rtida related by o_ref->O_RTIDA[R111];
select one rgo related by o_ref->R_RGO[R111];
select one rto related by rtida->R_RTO[R110];
unrelate rtida from rgo across R111 using o_ref;
delete object instance o_ref;',
	1,
	'',
	"5cec88a1-a445-447f-89b0-5f866ba2805b");
INSERT INTO O_TPARM
	VALUES ("1047c833-212f-43eb-9c5c-00f784e8efae",
	"45e0bc8e-5e04-43ce-ae2b-4769bfd0a9a7",
	'o_ref',
	"f5752494-b9cf-4fc7-b96d-4b64d6be0431",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("91dc75c2-9edd-4caa-ab33-32d0edaded3a",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Attribute_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_attr = param.o_attr;

// Subsystem Subsystem
select many oidas related by o_attr->O_OIDA[R105];
for each oida in oidas
  self.ClassIdentifierAttribute_dispose(o_oida:oida);
end for;
select one battr related by o_attr->O_BATTR[R106];
if (not_empty battr)
  self.BaseAttribute_dispose(o_battr:battr);
else
  select one rattr related by o_attr->O_RATTR[R106];
  self.ReferentialAttribute_dispose(o_rattr:rattr);
end if;
select one dt related by o_attr->S_DT[R114];
if ( not_empty dt )
  unrelate o_attr from dt across R114;
end if;
select one owningClass related by o_attr->O_OBJ[R102];
select one nextAttr related by o_attr->O_ATTR[R103.''precedes''];
if(not_empty nextAttr)
  select one prevAttr related by o_attr->O_ATTR[R103.''succeeds''];
  if ( empty prevAttr )
    // this attribute is at the top of the list
    unrelate o_attr from nextAttr across R103.''precedes'';
  else
    // otherwise this attribute is somewhere in the middle
    // or at the end
    select many attrs related by owningClass->O_ATTR[R102];
    for each attr in attrs
      select one thisAttr related by attr->O_ATTR[R103.''precedes''];
      if (o_attr == thisAttr)
        // now tell the next attribute that this is not
        // the attribute that it succeeds anymore
        unrelate o_attr from nextAttr across R103.''precedes'';
        // and tell this attribute that it no longer succeeds
        // any attribute. 
        // *NOTE* this is not really required for deletion but
        // more for restoration
        unrelate o_attr from attr across R103.''succeeds'';
        // finally connect the two attributes that this
        // attribute was between
        relate nextAttr to attr across R103.''succeeds'';
        break;
      end if;
    end for;
  end if;
else
  // we are at the end of the list
  select one priorAttr related by o_attr->O_ATTR[R103.''succeeds''];
  if ( not_empty priorAttr )
    unrelate o_attr from priorAttr across R103.''succeeds'';
  end if;
end if;
unrelate o_attr from owningClass across R102;
//
// Value Subsystem
select many selref_set related by o_attr->V_SLR[R812];
for each selref in selref_set
  unrelate o_attr from selref across R812;
end for;
select many attrvals related by o_attr->V_AVL[R806];
for each attrval in attrvals
  unrelate o_attr from attrval across R806;
end for;
//
// Finally delete o_attr
delete object instance o_attr;',
	1,
	'',
	"4b15fc81-c210-44f8-9c04-0c7b1bf99672");
INSERT INTO O_TPARM
	VALUES ("a4646400-e6e6-4bd8-8663-3a78f050a21e",
	"91dc75c2-9edd-4caa-ab33-32d0edaded3a",
	'o_attr',
	"579b8247-e153-481d-8926-384cdc722464",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("43829a09-886f-4a7f-9089-61faea422330",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ClassIdentifierAttribute_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_oida = param.o_oida;

select one attr related by o_oida->O_ATTR[R105];
select one id related by o_oida->O_ID[R105];
unrelate attr from id across R105 using o_oida;
select many rtidas related by o_oida->O_RTIDA[R110];
for each rtida in rtidas
  self.ReferredToIdentifierAttribute_dispose(o_rtida:rtida);
end for;
delete object instance o_oida;',
	1,
	'',
	"40c5e56c-f33a-4486-9063-f073fc5ea3ac");
INSERT INTO O_TPARM
	VALUES ("411e91e0-5194-4143-9556-ebc4bb816753",
	"43829a09-886f-4a7f-9089-61faea422330",
	'o_oida',
	"08de18fb-cb5f-4d53-9826-375c4dad56f7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("08de18fb-cb5f-4d53-9826-375c4dad56f7",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Class Identifier Attribute>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Subsystem/Subsystem.xtuml');
INSERT INTO O_TFR
	VALUES ("0fa4ac75-d42c-41dd-afaa-0446f593aed8",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ReferredToIdentifierAttribute_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_rtida = param.o_rtida;

select many refs related by o_rtida->O_REF[R111];
for each ref in refs
  self.AttributeReferenceInClass_migrateRefAttrOrDispose(o_ref:ref);
end for;
select one oida related by o_rtida->O_OIDA[R110];
select one rto related by o_rtida->R_RTO[R110];
unrelate oida from rto across R110 using o_rtida;
delete object instance o_rtida;',
	1,
	'',
	"e4bdc5ff-cd55-457f-a5d3-3c9753f8e304");
INSERT INTO O_TPARM
	VALUES ("e0edfae5-e6e0-433f-a206-751e73f6ed7f",
	"0fa4ac75-d42c-41dd-afaa-0446f593aed8",
	'o_rtida',
	"f026ef24-b484-4ab0-8a8b-5f0709c3d576",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f026ef24-b484-4ab0-8a8b-5f0709c3d576",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Referred To Identifier Attribute>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Subsystem/Subsystem.xtuml');
INSERT INTO O_TFR
	VALUES ("a0d04799-d672-4ed8-8a3c-9d45696ac060",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ReferentialAttribute_migrateToBase',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_rattr = param.o_rattr;

select one attr related by o_rattr->O_ATTR[R106];
unrelate o_rattr from attr across R106;
// Make the new base attribute have the same
// data type as the original
select one battr related by o_rattr->O_BATTR[R113];
if (not_empty battr)
  unrelate o_rattr from battr across R113;
  // Migrate the data type of o_rattr to the type of the old referred to attribute
  select one battrType related by battr->O_ATTR[R106]->S_DT[R114];
  select one attrType related by attr->S_DT[R114];
  unrelate attr from attrType across R114;
  relate attr to battrType across R114;
end if;
create object instance battr of O_BATTR;
relate attr to battr across R106;
create object instance nbattr of O_NBATTR;
relate nbattr to battr across R107;
// Now change the base attribute of all referring
// referentials to this new base.
select many rtoRefs related by attr->O_OIDA[R105]->
                             O_RTIDA[R110]->O_REF[R111]->O_RATTR[R108];
for each ref in rtoRefs
  select one oldBattr related by ref->O_BATTR[R113];
  unrelate ref from oldBattr across R113;
  relate ref to battr across R113;
end for;
self.ReferentialAttribute_dispose(o_rattr:o_rattr);
',
	1,
	'',
	"6639b67e-29d6-4046-8d4f-46a7711d0b75");
INSERT INTO O_TPARM
	VALUES ("82d5a0bf-409f-4fed-850a-f20d749db9cd",
	"a0d04799-d672-4ed8-8a3c-9d45696ac060",
	'o_rattr',
	"9bb4b389-b488-46e0-aeca-fc90df7b856a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9bb4b389-b488-46e0-aeca-fc90df7b856a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Referential Attribute>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Subsystem/Subsystem.xtuml');
INSERT INTO O_TFR
	VALUES ("6639b67e-29d6-4046-8d4f-46a7711d0b75",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ReferentialAttribute_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_rattr = param.o_rattr;

select one battr related by o_rattr->O_BATTR[R113];
if (not_empty battr)
  unrelate o_rattr from battr across R113;
end if;
select many refs related by o_rattr->O_REF[R108];
for each ref in refs
  unrelate o_rattr from ref across R108;
  self.AttributeReferenceInClass_dispose(o_ref:ref);
end for;
select one attr related by o_rattr->O_ATTR[R106];
if ( not_empty attr )
  unrelate o_rattr from attr across R106;
end if;
delete object instance o_rattr;',
	1,
	'',
	"2e4a3346-5501-4069-8902-2df8989ed4d1");
INSERT INTO O_TPARM
	VALUES ("a304f5af-7269-4bdf-9617-ba9504dd4150",
	"6639b67e-29d6-4046-8d4f-46a7711d0b75",
	'o_rattr',
	"9bb4b389-b488-46e0-aeca-fc90df7b856a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("0e9377a2-daec-4c38-9d8b-4bb5213742c2",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'BaseAttribute_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_battr = param.o_battr;

select one dbattr related by o_battr->O_DBATTR[R107];
if (not_empty dbattr)
  self.DerivedBaseAttribute_dispose(o_dbattr:dbattr);
else
  select one nbattr related by o_battr->O_NBATTR[R107];
  if (not_empty nbattr)
    self.NewBaseAttribute_dispose(o_nbattr:nbattr);
  end if;
end if;
select many rattrs related by o_battr->O_RATTR[R113];
for each rattr in rattrs
  unrelate o_battr from rattr across R113;
end for;
select one attr related by o_battr->O_ATTR[R106];
if (not_empty attr)
  unrelate o_battr from attr across R106;
end if;
delete object instance o_battr;
',
	1,
	'',
	"2b8ec32a-cfed-4c9c-81fa-61a4f530fe75");
INSERT INTO O_TPARM
	VALUES ("dcb9355e-f719-4a23-b651-f9a5d524f861",
	"0e9377a2-daec-4c38-9d8b-4bb5213742c2",
	'o_battr',
	"ffe937d5-4336-4bcd-906f-9fd5b8ec2a51",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ffe937d5-4336-4bcd-906f-9fd5b8ec2a51",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Base Attribute>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Subsystem/Subsystem.xtuml');
INSERT INTO O_TFR
	VALUES ("c96782bb-4ef4-46d8-bbb5-0989d88ef9b7",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'DerivedBaseAttribute_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_dbattr = param.o_dbattr;

select one battr related by o_dbattr->O_BATTR[R107];
unrelate o_dbattr from battr across R107;
//Body Subsystem
select one body related by o_dbattr->ACT_DAB[R693]->ACT_ACT[R698];
if (not_empty body)
  // TODO - not sure if this really needs to be called... If it does then it sets off a 
  //   chain of a lot more dispose operations for bodies that will also need to be implemented
  //   and called.  For now I''m skipping it.
  //body.dispose();
end if;
//
// Finally delete o_dbattr
delete object instance o_dbattr;
',
	1,
	'',
	"62cc7ec1-12c6-444f-8e9c-8bf257676b92");
INSERT INTO O_TPARM
	VALUES ("db55ef13-222f-4cd8-b188-a5192979828b",
	"c96782bb-4ef4-46d8-bbb5-0989d88ef9b7",
	'o_dbattr',
	"4f9e319a-3e53-416e-834c-97575e36b5fd",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4f9e319a-3e53-416e-834c-97575e36b5fd",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Derived Base Attribute>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Subsystem/Subsystem.xtuml');
INSERT INTO O_TFR
	VALUES ("0fbf0e7d-26c3-4c87-b4fc-c9bf58b1656e",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'NewBaseAttribute_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_nbattr = param.o_nbattr;

select one battr related by o_nbattr->O_BATTR[R107];
unrelate o_nbattr from battr across R107;
delete object instance o_nbattr;
',
	1,
	'',
	"0bdc1bb3-9d41-48aa-a6ea-85d1a00c0e90");
INSERT INTO O_TPARM
	VALUES ("ef19cd52-b9e8-42ff-a79f-2e4850f92f9c",
	"0fbf0e7d-26c3-4c87-b4fc-c9bf58b1656e",
	'o_nbattr',
	"7e942884-55b0-420b-97d7-19d2928132e8",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("7e942884-55b0-420b-97d7-19d2928132e8",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<New Base Attribute>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Subsystem/Subsystem.xtuml');
INSERT INTO O_TFR
	VALUES ("9aff835c-7ded-4deb-9d72-a49a9a8e9b41",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ClassAsLink_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_assr = param.r_assr;

select one rassoc related by r_assr->R_ASSOC[R211];
if (not_empty rassoc)
  // TODO - add this in later, not needed right now.... - rassoc.migrateToSimple();
  unrelate r_assr from rassoc across R211;
end if;
select one rgo related by r_assr->R_RGO[R205];
unrelate r_assr from rgo across R205;
delete object instance r_assr;
',
	1,
	'',
	"56895ed1-1be3-4da9-90db-433447ebba5f");
INSERT INTO O_TPARM
	VALUES ("8cc5448a-29aa-4994-bbf3-bce56ad658c8",
	"9aff835c-7ded-4deb-9d72-a49a9a8e9b41",
	'r_assr',
	"054a18f5-5e57-449b-b46f-5da2e9690ba5",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("054a18f5-5e57-449b-b46f-5da2e9690ba5",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Class As Link>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Association/Association.xtuml');
INSERT INTO O_TFR
	VALUES ("b8efe921-434b-45cf-ada8-f8d6e3742675",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ClassAsSimpleFormalizer_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	1,
	'',
	"9aff835c-7ded-4deb-9d72-a49a9a8e9b41");
INSERT INTO O_TPARM
	VALUES ("d5ce28d4-ad22-4474-a700-5a88ff5ab320",
	"b8efe921-434b-45cf-ada8-f8d6e3742675",
	'r_form',
	"9a6e9e32-b2f0-4344-b3a3-123b16423c3d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("a10bcbd7-d0c1-4c7f-9af4-6820fada6371",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ModelClass_newInstanceReferenceDataType',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_obj = param.o_obj;

// Model Class::newInstanceReferenceDataType()
select one packageableElem related by o_obj->PE_PE[R8001];
select one package related by packageableElem->EP_PKG[R8000];
select one component related by packageableElem->C_C[R8003];

  // Make sure the IRDTs don''t already exist before creating new ones.  Check
  // the single and set version and create whatever does not exist.
  select any existing_irdt related by o_obj->S_IRDT[R123] where selected.isSet == false;
  if (empty existing_irdt)
    create object instance pe of PE_PE;
    relate pe to package across R8000;
    self.PackageableElement_initialize(pe_pe:pe);
    pe.type = ElementTypeConstants::DATATYPE;
    create object instance dt of S_DT;
    relate pe to dt across R8001;
    create object instance irdt of S_IRDT;
    irdt.isSet = false;
    relate dt to irdt across R17;

    self.Datatype_initialize(s_dt:dt, name:"inst_ref<" + o_obj.Name + ">");
    relate o_obj to irdt across R123;
  end if;

  select any existing_irdt_set related by o_obj->S_IRDT[R123] where selected.isSet == true;
  if (empty existing_irdt_set)
    create object instance pe of PE_PE;
    relate pe to package across R8000;
    self.PackageableElement_initialize(pe_pe:pe);
    pe.type = ElementTypeConstants::DATATYPE;
    create object instance dt2 of S_DT;
    relate pe to dt2 across R8001;
    create object instance irsdt of S_IRDT;
    irsdt.isSet = true;
    relate irsdt to dt2 across R17;

    self.Datatype_initialize(s_dt:dt2, name:"inst_ref_set<" + o_obj.Name + ">");
    relate o_obj to irsdt across R123;
  end if;  

',
	1,
	'',
	"d16c3058-c420-428a-ab22-69a134a0c5d4");
INSERT INTO O_TPARM
	VALUES ("9652ef07-49f9-49d1-933a-fffd16f76750",
	"a10bcbd7-d0c1-4c7f-9af4-6820fada6371",
	'o_obj',
	"63f4ff99-f127-443b-a678-30ace41da702",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("b5509850-1970-4266-848e-a4e910bab8bf",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'StateEventMatrixEntry_disposeChOrEi',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'sm_seme = param.sm_seme;

select one chevt related by sm_seme->SM_CH[R504];
if (not_empty chevt)
  unrelate sm_seme from chevt across R504;
  delete object instance chevt;
end if;
select one igevt related by sm_seme->SM_EIGN[R504];
if (not_empty igevt)
  unrelate sm_seme from igevt across R504;
  delete object instance igevt;
end if;
',
	1,
	'',
	"cbcea1c4-3923-4c24-9dfd-471bb8c6ec10");
INSERT INTO O_TPARM
	VALUES ("3e3fda04-9438-4d5e-bbfa-5dbdcac1a034",
	"b5509850-1970-4266-848e-a4e910bab8bf",
	'sm_seme',
	"96262711-9aa1-476f-a01e-e61adb9c3647",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("96262711-9aa1-476f-a01e-e61adb9c3647",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<State Event Matrix Entry>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/State Machine/State Machine.xtuml');
INSERT INTO O_TFR
	VALUES ("b871c364-3966-4276-a029-7f208d618293",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'StateEventMatrixEntry_migrateChToEi',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'sm_seme = param.sm_seme;

select one ch related by sm_seme->SM_CH[R504];
if ( not_empty ch )
  create object instance ei of SM_EIGN;
  unrelate sm_seme from ch across R504;
  relate sm_seme to ei across R504;
  delete object instance ch;
end if;
',
	1,
	'',
	"b5509850-1970-4266-848e-a4e910bab8bf");
INSERT INTO O_TPARM
	VALUES ("3f33ccf1-2f6b-401c-b6aa-e670b5567f46",
	"b871c364-3966-4276-a029-7f208d618293",
	'sm_seme',
	"96262711-9aa1-476f-a01e-e61adb9c3647",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("becb75b7-ab37-4f29-8752-db272d0c670e",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'StateEventMatrixEntry_migrateEiToCh',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'sm_seme = param.sm_seme;

select one ei related by sm_seme->SM_EIGN[R504];
if ( not_empty ei )
  create object instance ch of SM_CH;
  unrelate sm_seme from ei across R504;
  relate sm_seme to ch across R504;
  delete object instance ei;
end if;
',
	1,
	'',
	"b871c364-3966-4276-a029-7f208d618293");
INSERT INTO O_TPARM
	VALUES ("964dd5d3-48e3-4768-bdc3-f6642f0f3054",
	"becb75b7-ab37-4f29-8752-db272d0c670e",
	'sm_seme',
	"96262711-9aa1-476f-a01e-e61adb9c3647",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("afdf1a15-9d14-4cc7-807d-8326a83284ea",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'batchFormalize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select many forms from instances of formalization;
num_forms = cardinality forms;
passes = 0;

// Because of possible dependencies, it is required to pass over the list
// of formalizations N times where N is the number of formalizations
// The worst case scenario is if each formalization is dependent on the next
while ( passes < num_forms )

  for each form in forms

	if ( 0 == form.type )
	  select one simpForm related by form->simpleFormalization[R3810];
	  id = simpForm.getID();
	  if ( -1 != id )	// the formalization is complete
		simp = simpForm.rel;
		select any r_part related by simp->R_PART[R207] where ( selected.Obj_ID == simpForm.part_obj_id );
		
		// formalize the relationship
		self.SimpleAssociation_formalize(r_simp:simp, r_part:r_part, id_id:id);
		
		// there is some post processing that needs to be done for each referentialAttribute
		// in the formalization
		// * rename the referential attribute properly
		// * if needed, add the referential attribute to an identifier
		// * check for a duplicate that needs to be combined
		select many ras related by form->referentialAttribute[R3811];
		for each ra in ras
		  // select the correspoinding new referential attribute
		  select any o_attr related by simp->R_FORM[R208]->R_RGO[R205]->R_OIR[R203]->O_OBJ[R201]->O_ATTR[R102]->O_RATTR[R106]->O_ATTR[R106] where ( selected.Root_Nam == ra.attrName );
		  select many o_attrs related by simp->R_FORM[R208]->R_RGO[R205]->R_OIR[R203]->O_OBJ[R201]->O_ATTR[R102]->O_RATTR[R106]->O_ATTR[R106];
		  ra.postProcess( o_attr:o_attr, o_attrs:o_attrs, ooapopulation:self );
		end for;
		
		// post processing for the formalizing object
		// * remove any base attributes that have a referential attribute of the same name
		select one form_obj related by simp->R_FORM[R208]->R_RGO[R205]->R_OIR[R203]->O_OBJ[R201];
		self.ModelClass_removeDuplicateAttrs(o_obj:form_obj);
		
		form.dispose();

	  else
		//TRACE::log( flavor:"failure", id:17, message:"Incomplete formalization on simple association" );
	  end if;
	elif ( 1 == form.type )
	  select one subsupForm related by form->subsuperFormalization[R3810];
	  id = subsupForm.getID();
	  //id = 0;
	  if ( -1 != id )	// the formalization is complete
	    subsuper = subsupForm.rel;
	    
	    // formalize the relationship
	    self.SubtypeSupertypeAssociation_formalize( r_subsup:subsuper, id:id );
	    
		// there is some post processing that needs to be done for each referentialAttribute
		// in the formalization
		// * rename the referential attribute properly
		// * if needed, add the referential attribute to an identifier
		// * check for a duplicate that needs to be combined
		select many ras related by form->referentialAttribute[R3811];
		for each ra in ras
		  // select each subtype object
		  select many subs related by subsuper->R_SUB[R213]->R_RGO[R205]->R_OIR[R203]->O_OBJ[R201];
		  for each sub in subs;
			// select the correspoinding new referential attribute
			select any o_attr related by sub->O_ATTR[R102]->O_RATTR[R106]->O_ATTR[R106] where ( selected.Root_Nam == ra.attrName );
			select many o_attrs related by sub->O_ATTR[R102]->O_RATTR[R106]->O_ATTR[R106];
			ra.postProcess( o_attr:o_attr, o_attrs:o_attrs, ooapopulation:self );
		  end for;
		end for;
		
		// post processing for the formalizing object
		// * remove any base attributes that have a referential attribute of the same name
		select many subs related by subsuper->R_SUB[R213]->R_RGO[R205]->R_OIR[R203]->O_OBJ[R201];
		for each sub in subs;
		  self.ModelClass_removeDuplicateAttrs(o_obj:sub);
		end for;
		
		form.dispose();
	  else
		//TRACE::log( flavor:"failure", id:17, message:"Incomplete formalization on subsuper association" );
	  end if;
	elif ( 2 == form.type )
	  select one assocForm related by form->assocFormalization[R3810];
	  one_id = assocForm.getID( target:0 );
	  other_id = assocForm.getID( target:1 );
	  if ( -1 != one_id and -1 != other_id )	// the formalization is complete
	    linked = assocForm.rel;
	    
	    // formalize the relationship
	    self.LinkedAssociation_formalize( r_assoc:linked, one_id:one_id, oth_id:other_id );
	    
		// there is some post processing that needs to be done for each referentialAttribute
		// in the formalization
		// * rename the referential attribute properly
		// * if needed, add the referential attribute to an identifier
		// * check for a duplicate that needs to be combined
		select one assr_obj related by linked->R_ASSR[R211]->R_RGO[R205]->R_OIR[R203]->O_OBJ[R201];
		select many ras related by form->referentialAttribute[R3811];
		for each ra in ras
		  // select the correspoinding new referential attribute
		  select any o_attr related by assr_obj->O_ATTR[R102]->O_RATTR[R106]->O_ATTR[R106] where ( selected.Root_Nam == ra.attrName );
		  select many o_attrs related by assr_obj->O_ATTR[R102]->O_RATTR[R106]->O_ATTR[R106];
		  ra.postProcess( o_attr:o_attr, o_attrs:o_attrs, ooapopulation:self );
		end for;
		
		// post processing for the formalizing object
		// * remove any base attributes that have a referential attribute of the same name
		self.ModelClass_removeDuplicateAttrs(o_obj:assr_obj);
		
		form.dispose();
	  else
		//TRACE::log( flavor:"failure", id:17, message:"Incomplete formalization on subsuper association" );
	  end if;
	end if;

  end for;

  // increment counter
  passes = passes + 1;

  // re-select the formalizations
  select many forms from instances of formalization;

end while;

if ( not_empty forms )
  TRACE::log( flavor:"failure", id:17, message:"Incomplete formalizations still exist" );
end if;',
	1,
	'',
	"9e1603f8-30b3-45e7-a697-d89f16f10bf0");
INSERT INTO O_TFR
	VALUES ("5834dfc6-c4a1-4b08-8149-5d52a504af4d",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformReferential',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any ooapopulation from instances of ooapopulation;

// Create a new object in the referential cache
create object instance ra of referentialAttribute;
ra.attrName = param.attrName;
ra.relationship = param.relationship;
ra.roleOrObj = param.roleOrObj;
ra.objectName = param.objName;
ra.o_obj = ooapopulation.current_class;
ra.o_attr = ooapopulation.current_attribute;

// Find out if the attribute was specified as being part of an identifier.  Cache
// that info.
ra.identifier1 = false;
ra.identifier2 = false;
ra.identifier3 = false;

o_attr = ooapopulation.current_attribute;
select many o_ids related by o_attr->O_OIDA[R105]->O_ID[R105];
for each o_id in o_ids
  if ( 0 == o_id.Oid_ID )
	ra.identifier1 = true;
  elif ( 1 == o_id.Oid_ID )
	ra.identifier2 = true;
  elif ( 2 == ooapopulation.processingIdentifier )
	ra.identifier3 = true;
  end if;
end for;

// add the referential attribute to a formalization
o_obj = ra.o_obj;
relNum = STRING::substr(s:ra.relationship,begin:1,end:-1);
relNumber = STRING::atoi(s:relNum); 
select any rel related by o_obj->PE_PE[R8001]->EP_PKG[R8000]->PE_PE[R8000]->R_REL[R8001] where (selected.Numb == relNumber);
select one simp related by rel->R_SIMP[R206];
if ( not_empty simp )
  // Get the correct participant
  select any r_part from instances of R_PART where false;
  if ( "" != ra.objectName )  	// get participant by role phrase AND object name
    select any ref_obj related by simp->R_PART[R207]->R_RTO[R204]->R_OIR[R203]->O_OBJ[R201] where (selected.Name == ra.objectName);
    select any r_part related by simp->R_PART[R207] where ( selected.Txt_Phrs == ra.roleOrObj and selected.Obj_ID == ref_obj.Obj_ID );
  else
    select any ref_obj related by simp->R_PART[R207]->R_RTO[R204]->R_OIR[R203]->O_OBJ[R201] where (selected.Name == ra.roleOrObj);
    if ( not_empty ref_obj ) 	// if we found an object by name, use the object name to get the r_part
      select any r_part related by simp->R_PART[R207] where ( selected.Obj_ID == ref_obj.Obj_ID );
    else						// otherwise, select by phrase only
      select any r_part related by simp->R_PART[R207] where ( selected.Txt_Phrs == ra.roleOrObj );
    end if;
  end if;
  
  // look for an existing formalization
  select any simpForm from instances of simpleFormalization where ( selected.rel == simp and
  																	selected.form_obj_id == o_obj.Obj_ID and
  																	selected.part_obj_id == r_part.Obj_ID );
  select one form related by simpForm->formalization[R3810];
  if ( empty form ) // create a formalization if it doesn''t exist
    create object instance form of formalization;
    form.type = 0;
    create object instance simpForm of simpleFormalization;
    simpForm.rel = simp;
    simpForm.form_obj_id = o_obj.Obj_ID;
    simpForm.part_obj_id = r_part.Obj_ID;
    relate form to simpForm across R3810;
  end if;
  
  // add this referential attribute to the formalization
  relate ra to form across R3811;

else
  select one subsuper related by rel->R_SUBSUP[R206];
  if ( not_empty subsuper )
    // look for an existing formalization
    select any subsupForm from instances of subsuperFormalization where ( selected.rel == subsuper );
	select one form related by subsupForm->formalization[R3810];
	if ( empty form ) // create a formalization if it doesn''t exist
	  create object instance form of formalization;
	  form.type = 1;
	  create object instance subsupForm of subsuperFormalization;
	  subsupForm.rel = subsuper;
	  relate form to subsupForm across R3810;
	end if;

    // add this referential attribute to the formalization
    relate ra to form across R3811;
  else
    select one linked related by rel->R_ASSOC[R206];
	if ( not_empty linked )
	  // look for an existing formalization
	  select any assocForm from instances of assocFormalization where ( selected.rel == linked );
	  select one form related by assocForm->formalization[R3810];
	  if ( empty form ) // create a formalization if it doesn''t exist
		create object instance form of formalization;
		form.type = 2;
		create object instance assocForm of assocFormalization;
		assocForm.rel = linked;
		relate form to assocForm across R3810;
	  end if;

	  // add this referential attribute to the formalization
	  relate ra to form across R3811;
	end if;
  end if;
end if;',
	1,
	'',
	"a442a038-3373-4282-a5fc-098af44e9cbe");
INSERT INTO O_TPARM
	VALUES ("1ab36396-b867-4684-9305-4291eda9ce6f",
	"5834dfc6-c4a1-4b08-8149-5d52a504af4d",
	'attrName',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("a77354c1-c3a6-40cd-930d-d334ae3f1ca7",
	"5834dfc6-c4a1-4b08-8149-5d52a504af4d",
	'relationship',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1ab36396-b867-4684-9305-4291eda9ce6f",
	'');
INSERT INTO O_TPARM
	VALUES ("c9b2199a-7c9f-4092-b2a0-11ea434d798c",
	"5834dfc6-c4a1-4b08-8149-5d52a504af4d",
	'roleOrObj',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a77354c1-c3a6-40cd-930d-d334ae3f1ca7",
	'');
INSERT INTO O_TPARM
	VALUES ("d2c392a8-80d4-4203-94cc-2837c07a66f8",
	"5834dfc6-c4a1-4b08-8149-5d52a504af4d",
	'objName',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c9b2199a-7c9f-4092-b2a0-11ea434d798c",
	'');
INSERT INTO O_TFR
	VALUES ("d0873ada-8a66-46eb-8826-5de36bc7e925",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'SimpleAssociation_formalize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_simp = param.r_simp;
part = param.r_part;

// OOA functionality
if ( self.SimpleAssociation_isFormalized(r_simp:r_simp) )
  self.SimpleAssociation_unformalize(r_simp:r_simp);
end if;

// migrate participant to Class As Simple Formalizer
// select using OIR_ID so that we get a different instance in the reflexive case
select any form_part related by r_simp->R_PART[R207]
  where selected.OIR_ID != part.OIR_ID;
self.ClassAsSimpleParticipant_migrateToFormalizer(r_part:form_part);
select one form related by r_simp->R_FORM[R208];

select one part_rto related by part->R_RTO[R204];
select one part_obj related by part_rto->R_OIR[R203]->O_OBJ[R201];
select any oid related by part_obj->O_ID[R104] where selected.Oid_ID == param.id_id; 
relate oid to part_rto across R109;

select many oida_set related by oid->O_OIDA[R105];

select one form_rgo related by form->R_RGO[R205];
select one form_obj related by form_rgo->R_OIR[R203]->O_OBJ[R201];
select one r_rel related by form_rgo->R_OIR[R203]->R_REL[R201];
for each oida in oida_set
  new_o_rattr = self.ClassIdentifierAttribute_addReference(o_oida:oida, rel:r_rel,
    part_rto:part_rto, part_obj:part_obj,
    form_rgo:form_rgo, form_obj:form_obj,
    id: -1);
end for;
',
	1,
	'',
	"95d28c71-7112-48a3-9945-3db8666f33fa");
INSERT INTO O_TPARM
	VALUES ("ddbf4305-efd4-43e4-8826-5fad03b8e69f",
	"d0873ada-8a66-46eb-8826-5de36bc7e925",
	'r_simp',
	"322c65da-132b-421a-a1b1-f757cb0acff7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("bdf2ee84-ac59-4ae1-b4ab-752e3196f386",
	"d0873ada-8a66-46eb-8826-5de36bc7e925",
	'r_part',
	"11f40760-1dd1-4b08-9393-18b2e8520e6c",
	0,
	'',
	"ddbf4305-efd4-43e4-8826-5fad03b8e69f",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("11f40760-1dd1-4b08-9393-18b2e8520e6c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Class As Simple Participant>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Association/Association.xtuml');
INSERT INTO O_TPARM
	VALUES ("233e2a00-c275-4822-8859-a00c6aff24af",
	"d0873ada-8a66-46eb-8826-5de36bc7e925",
	'id_id',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"bdf2ee84-ac59-4ae1-b4ab-752e3196f386",
	'');
INSERT INTO O_TFR
	VALUES ("fe0b6659-9eb7-44fb-8056-da9a39f98e8d",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ClassAsSimpleParticipant_migrateToFormalizer',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_part = param.r_part;

create object instance rgo of R_RGO;
create object instance form of R_FORM;

form.Mult = r_part.Mult;
form.Cond = r_part.Cond;
form.Txt_Phrs = r_part.Txt_Phrs;

select one rto related by r_part->R_RTO[R204];
select one oir related by rto->R_OIR[R203];
select one simp related by r_part->R_SIMP[R207];

relate oir to rgo across R203;
relate rgo to form across R205;
relate form to simp across R208;

// and dispose r_part from supertype
self.ReferredToClassInAssoc_dispose(r_rto:rto);
',
	1,
	'',
	"cd36a8cf-ad89-4f7b-b1fd-23c959355b0a");
INSERT INTO O_TPARM
	VALUES ("c3247215-52ec-479b-8637-a6c64d74fe9a",
	"fe0b6659-9eb7-44fb-8056-da9a39f98e8d",
	'r_part',
	"11f40760-1dd1-4b08-9393-18b2e8520e6c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("10ea8696-d15f-4bc1-9e5d-a4a5ebc9bc7f",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ReferredToClassInAssoc_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_rto = param.r_rto;

// Association Subsystem
select one zuper related by r_rto->R_SUPER[R204];
select one one related by r_rto->R_AONE[R204];
select one other related by r_rto->R_AOTH[R204];
select one part related by r_rto->R_PART[R204];
if (not_empty zuper)
  self.ClassAsSupertype_dispose(r_super:zuper);
elif (not_empty one)
  self.ClassAsAssociatedOneSide_dispose(r_aone:one);
elif (not_empty other)
  self.ClassAsAssociatedOtherSide_dispose(r_aoth:other);
elif (not_empty part)
  self.ClassAsSimpleParticipant_dispose(r_part:part);
end if;
select one cia related by r_rto->R_OIR[R203];
if ( not_empty cia )
  unrelate r_rto from cia across R203;
end if;
//
// Subsystem Subsystem
select one oid related by r_rto->O_ID[R109];
if (not_empty oid)
  unrelate r_rto from oid across R109;
end if;
select many rtidas related by r_rto->O_RTIDA[R110];
for each rtida in rtidas
  self.ReferredToIdentifierAttribute_dispose(o_rtida:rtida);
end for;
//
// Finally delete r_rto
delete object instance r_rto;
',
	1,
	'',
	"45db7a44-57f6-46ce-9d82-b22a6c1d990a");
INSERT INTO O_TPARM
	VALUES ("76ce64f0-4d71-48e1-955b-9375437ca774",
	"10ea8696-d15f-4bc1-9e5d-a4a5ebc9bc7f",
	'r_rto',
	"893ea6d3-466d-498e-b58a-cf5966da5549",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("a1a1e6f2-4005-4644-8022-99b459b559e6",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ClassAsSupertype_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_super = param.r_super;

select one rsubsup related by r_super->R_SUBSUP[R212];
unrelate r_super from rsubsup across R212;
select one rto related by r_super->R_RTO[R204];
unrelate r_super from rto across R204;
delete object instance r_super;
',
	1,
	'',
	"fe0b6659-9eb7-44fb-8056-da9a39f98e8d");
INSERT INTO O_TPARM
	VALUES ("02a05f09-f5a5-4ce8-b6c9-a97f0d714a4b",
	"a1a1e6f2-4005-4644-8022-99b459b559e6",
	'r_super',
	"558a05a8-1353-47b4-8d4d-04018ea4b537",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("558a05a8-1353-47b4-8d4d-04018ea4b537",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Class As Supertype>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Association/Association.xtuml');
INSERT INTO O_TFR
	VALUES ("edfd5ba3-065f-4a44-99ca-954c03b4d920",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ClassAsAssociatedOneSide_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_aone = param.r_aone;

select one rassoc related by r_aone->R_ASSOC[R209];
unrelate r_aone from rassoc across R209;
select one rto related by r_aone->R_RTO[R204];
unrelate r_aone from rto across R204;
delete object instance r_aone;
',
	1,
	'',
	"0e9377a2-daec-4c38-9d8b-4bb5213742c2");
INSERT INTO O_TPARM
	VALUES ("8e333781-8c1a-46c6-b40c-3e5001ec9406",
	"edfd5ba3-065f-4a44-99ca-954c03b4d920",
	'r_aone',
	"37e868cd-e616-45a0-aa57-7a32350b86f4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("37e868cd-e616-45a0-aa57-7a32350b86f4",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Class As Associated One Side>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Association/Association.xtuml');
INSERT INTO O_TFR
	VALUES ("56895ed1-1be3-4da9-90db-433447ebba5f",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ClassAsAssociatedOtherSide_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_aoth = param.r_aoth;

select one rassoc related by r_aoth->R_ASSOC[R210];
unrelate r_aoth from rassoc across R210;
select one rto related by r_aoth->R_RTO[R204];
unrelate r_aoth from rto across R204;
delete object instance r_aoth;
',
	1,
	'',
	"edfd5ba3-065f-4a44-99ca-954c03b4d920");
INSERT INTO O_TPARM
	VALUES ("16088bc8-120c-4823-9dc1-52174df2a3b6",
	"56895ed1-1be3-4da9-90db-433447ebba5f",
	'r_aoth',
	"ddf50731-13d8-4e02-932f-347f2ddc3444",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ddf50731-13d8-4e02-932f-347f2ddc3444",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Class As Associated Other Side>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Association/Association.xtuml');
INSERT INTO O_TFR
	VALUES ("cd36a8cf-ad89-4f7b-b1fd-23c959355b0a",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ClassAsSimpleParticipant_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_part = param.r_part;

select one rsimp related by r_part->R_SIMP[R207];
unrelate r_part from rsimp across R207;
select one rto related by r_part->R_RTO[R204];
unrelate r_part from rto across R204;
delete object instance r_part;
',
	1,
	'',
	"f7d11722-b6db-4a91-80c5-9d36afc0263f");
INSERT INTO O_TPARM
	VALUES ("82400607-9b58-46e5-976a-5eee7ac40a94",
	"cd36a8cf-ad89-4f7b-b1fd-23c959355b0a",
	'r_part',
	"11f40760-1dd1-4b08-9393-18b2e8520e6c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("40c5e56c-f33a-4486-9063-f073fc5ea3ac",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ClassIdentifierAttribute_addReference',
	'',
	"9bb4b389-b488-46e0-aeca-fc90df7b856a",
	1,
	'oida = param.o_oida;
rel = param.rel;
rto = param.part_rto;
rto_obj = param.part_obj;
rgo = param.form_rgo;
rgo_obj = param.form_obj;
id = param.id;

// This is a heavily modified version of the function from OOA
// TODO - fix up, clean up
//select any rel from instances of R_REL where selected.Rel_ID == param.rel_id;
//select any rgo related by rel->R_OIR[R201]->R_RGO[R203] 
//    where selected.Obj_ID == param.rgo_obj_id and selected.OIR_ID == param.rgo_oir_id;
//select one rgo_obj related by rgo->R_OIR[R203]->O_OBJ[R201];

/*
newAttr_id = rgo_obj.newReferentialAttribute(ref_obj_id: oida.Obj_ID, 
    ref_oid_id: oida.Oid_ID, ref_attr_id: oida.Attr_ID, id: param.id );

select any ref_attr related by rgo_obj->O_ATTR[R102]->O_RATTR[R106]
    where selected.Attr_ID == newAttr_id;*/
ref_attr = self.ModelClass_newReferentialAttribute(o_obj:rgo_obj, o_oida:oida, id:param.id); 

//select any rto related by rel->R_OIR[R201]->R_RTO[R203] 
//    where selected.Obj_ID == param.rto_obj_id and selected.OIR_ID == param.rto_oir_id;

// An rtida instance may already exist if we''re adding 
// the second (or subsequent) subtype to an inheritance 
// association
select any rtida related by oida->O_RTIDA[R110] 
    where selected.Rel_ID == rel.Rel_ID and selected.OIR_ID == rto.OIR_ID;
if ( empty rtida )
  create object instance rtida of O_RTIDA;
  relate oida to rto across R110 using rtida;
end if;

create object instance ref of O_REF;
relate ref to ref_attr across R108;
relate rtida to rgo across R111 using ref;

return ref_attr;
',
	1,
	'',
	"a1a1e6f2-4005-4644-8022-99b459b559e6");
INSERT INTO O_TPARM
	VALUES ("624c4636-70ff-4e4b-8d98-dda5da9110c4",
	"40c5e56c-f33a-4486-9063-f073fc5ea3ac",
	'rel',
	"4480b008-8c74-4f57-9256-08b7365520bc",
	0,
	'',
	"3dd7832d-d9c8-455e-b9de-7ea604dc3d2b",
	'');
INSERT INTO O_TPARM
	VALUES ("0110c209-f838-41ce-8b1f-975b1d6a167c",
	"40c5e56c-f33a-4486-9063-f073fc5ea3ac",
	'part_rto',
	"893ea6d3-466d-498e-b58a-cf5966da5549",
	0,
	'',
	"624c4636-70ff-4e4b-8d98-dda5da9110c4",
	'');
INSERT INTO O_TPARM
	VALUES ("ee02106b-11da-4182-9488-e0a16b2c0bcb",
	"40c5e56c-f33a-4486-9063-f073fc5ea3ac",
	'part_obj',
	"63f4ff99-f127-443b-a678-30ace41da702",
	0,
	'',
	"0110c209-f838-41ce-8b1f-975b1d6a167c",
	'');
INSERT INTO O_TPARM
	VALUES ("bf8fc872-cdf2-4bfd-aa8a-a93bbcd0c637",
	"40c5e56c-f33a-4486-9063-f073fc5ea3ac",
	'form_rgo',
	"f6b00fbb-5d4e-4e79-bd36-f3289da7ee17",
	0,
	'',
	"ee02106b-11da-4182-9488-e0a16b2c0bcb",
	'');
INSERT INTO O_TPARM
	VALUES ("d0e90708-6cfe-4fe1-8cf0-0994638efb60",
	"40c5e56c-f33a-4486-9063-f073fc5ea3ac",
	'form_obj',
	"63f4ff99-f127-443b-a678-30ace41da702",
	0,
	'',
	"bf8fc872-cdf2-4bfd-aa8a-a93bbcd0c637",
	'');
INSERT INTO O_TPARM
	VALUES ("3dd7832d-d9c8-455e-b9de-7ea604dc3d2b",
	"40c5e56c-f33a-4486-9063-f073fc5ea3ac",
	'o_oida',
	"08de18fb-cb5f-4d53-9826-375c4dad56f7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("7cc93b5d-fa05-476d-8b72-20b6565bd18d",
	"40c5e56c-f33a-4486-9063-f073fc5ea3ac",
	'id',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"d0e90708-6cfe-4fe1-8cf0-0994638efb60",
	'');
INSERT INTO O_TFR
	VALUES ("96e13109-b598-4fd0-be21-6bd307704f41",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ModelClass_newReferentialAttribute',
	'',
	"9bb4b389-b488-46e0-aeca-fc90df7b856a",
	1,
	'o_obj = param.o_obj;
ref_oida = param.o_oida;
id = param.id;

//select any ref_obj related by o_obj->PE_PE[R8001]->EP_PKG[R8000]->S_SYS[R1405]->EP_PKG[R1405]->PE_PE[R8000]->O_OBJ[R8001]
//    where selected.Obj_ID == param.ref_obj_id;

    
//select any ref_oid related by ref_obj->O_ID[R104] 
//    where selected.Oid_ID == param.ref_oid_id;
//select any ref_oida related by ref_oid->O_OIDA[R105] 
//    where selected.Attr_ID == param.ref_attr_id;
select one ref_oid related by ref_oida->O_ID[R105];

select one id_attr related by ref_oida->O_ATTR[R105];

select one base_attr related by id_attr->O_BATTR[R106];
if ( empty base_attr )
  select one base_attr related by id_attr->O_RATTR[R106]->O_BATTR[R113];
end if;

//newAttr_id = o_obj.newAttribute();
//select any attr related by o_obj->O_ATTR[R102] where selected.Attr_ID == newAttr_id;
attr = self.ModelClass_newAttribute( o_obj:o_obj, attr_name:"placeholder" );
self.Attribute_migrateBaseToReferential( o_attr:attr );
attr.Root_Nam = id_attr.Root_Nam;

select one ref_attr related by attr->O_RATTR[R106];
relate ref_attr to base_attr across R113;

if ( param.id != -1 )
  select any assr_id related by o_obj->O_ID[R104] where selected.Oid_ID == param.id;
  create object instance assr_oida of O_OIDA;
   relate attr to assr_id across R105 using assr_oida;
end if;
return ref_attr;
',
	1,
	'',
	"b44f67b8-f281-4aa2-9adc-27b62605a7c1");
INSERT INTO O_TPARM
	VALUES ("9e1dc67a-bdf6-4b98-9c89-547aa17f5c30",
	"96e13109-b598-4fd0-be21-6bd307704f41",
	'o_obj',
	"63f4ff99-f127-443b-a678-30ace41da702",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("086edc69-ce12-4285-8527-3755213c3450",
	"96e13109-b598-4fd0-be21-6bd307704f41",
	'o_oida',
	"08de18fb-cb5f-4d53-9826-375c4dad56f7",
	0,
	'',
	"9e1dc67a-bdf6-4b98-9c89-547aa17f5c30",
	'');
INSERT INTO O_TPARM
	VALUES ("64fb917e-8871-4df6-a166-43a1ae0d9488",
	"96e13109-b598-4fd0-be21-6bd307704f41",
	'id',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"086edc69-ce12-4285-8527-3755213c3450",
	'');
INSERT INTO O_TFR
	VALUES ("de57cf0d-e159-4b31-907e-bba1cb341479",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Component_initializeRequirement',
	'',
	"3068be83-fc38-4a02-a09f-a2dc428b84f6",
	1,
	'c_c = param.c_c;

// The OOA version of this function does _a lot_ more work than we have to do here.
create object instance requirement of C_R;
create object instance interfaceRef of C_IR;
create object instance port of C_PO;
relate requirement to interfaceRef across R4009;
relate interfaceRef to port across R4016;
relate port to c_c across R4010;
if ( "" == param.if_name )
  requirement.InformalName = "Unnamed_Interface";
else
  requirement.InformalName = param.if_name;
end if;
self.Port_initialize(c_po:port, name:param.port_name);

return interfaceRef;',
	1,
	'',
	"75b3e1c3-8e2f-4809-bd60-ff2d77a2f06d");
INSERT INTO O_TPARM
	VALUES ("c594153e-1c12-416a-b872-48fa7c3b623f",
	"de57cf0d-e159-4b31-907e-bba1cb341479",
	'c_c',
	"67f93d18-1045-4c6c-b0d5-a692023c471c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("180f2b75-6dd7-4f78-8b4d-fa093d818b15",
	"de57cf0d-e159-4b31-907e-bba1cb341479",
	'port_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c594153e-1c12-416a-b872-48fa7c3b623f",
	'');
INSERT INTO O_TPARM
	VALUES ("33bd7b77-b2d7-4531-ae7d-4d7a20a3fe55",
	"de57cf0d-e159-4b31-907e-bba1cb341479",
	'if_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"180f2b75-6dd7-4f78-8b4d-fa093d818b15",
	'');
INSERT INTO O_TFR
	VALUES ("8bd3b9a0-f3ac-4342-8d1d-0d96cb608c48",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformTerminatorService',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'c_i = self.current_interface;

if ( empty c_i )
  select any c_c from instances of C_C where ( selected.Name == param.domain );
  select any c_po related by c_c->C_PO[R4010] where ( selected.Name == param.terminator );
  select any c_i related by c_po->C_IR[R4016]->C_I[R4012];
end if;

c_ep = self.Interface_newExecutableProperty(c_i:c_i, ep_name:param.name, asynchronous:false);
c_ep.Direction = IFDirectionType::ClientServer;
self.current_executable_property = c_ep;',
	1,
	'',
	"fd3b1e58-e9c3-41df-a82e-724733a56a61");
INSERT INTO O_TPARM
	VALUES ("0a664570-6408-484b-8463-e0c8da3d5823",
	"8bd3b9a0-f3ac-4342-8d1d-0d96cb608c48",
	'visibility',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("0edd8974-5b0d-401b-b533-41dc264c2239",
	"8bd3b9a0-f3ac-4342-8d1d-0d96cb608c48",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0a664570-6408-484b-8463-e0c8da3d5823",
	'');
INSERT INTO O_TPARM
	VALUES ("b955bc98-b515-4914-9a0a-120c8df82e66",
	"8bd3b9a0-f3ac-4342-8d1d-0d96cb608c48",
	'domain',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0edd8974-5b0d-401b-b533-41dc264c2239",
	'');
INSERT INTO O_TPARM
	VALUES ("b4fa0f2e-9bd6-420b-a586-2abe56036bd4",
	"8bd3b9a0-f3ac-4342-8d1d-0d96cb608c48",
	'terminator',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b955bc98-b515-4914-9a0a-120c8df82e66",
	'');
INSERT INTO O_TFR
	VALUES ("7c945081-3482-4e6c-ae0f-158868c18ca3",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'populate_project',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'// Populate OOAofOOA.

element = param.element;
value = param.value;
ooapopulation = param.ooapopulation;

if ( "project" == element )
  if ( "" != param.value[0] )
    ooapopulation.transformProject(name:param.value[0]);
    ooapopulation.processingProject = true;
  end if;
elif ( "domain" == element )
  if ( "" == param.value[0] )
    // If we are processing a project, all domains we see are handled as imported components, so clear that cache attribute
    select any cl_ic from instances of CL_IC where (false);
    ooapopulation.current_imported_component = cl_ic;
  else
    ooapopulation.transformDomain(name:param.value[0]);
  end if;
elif ( "terminator" == element )
  if ( "" == param.value[0] )
    select any c_i from instances of C_I where (false);
    ooapopulation.current_interface = c_i;
  else
    ooapopulation.transformTerminator(name:param.value[0]);
  end if;
elif ( "routine" == element )
  //  See if we''re processing inside a domain or terminator.  Then call the appropriate conversion function.
  if ( "" == param.value[3] )
    // check for duplicate routines
    ooapopulation.mergeDuplicateRoutines();

    // copy the codeblock into the description of the provision
	c_c = ooapopulation.current_component;
	c_ep = ooapopulation.current_executable_property;
	select one c_i related by c_ep->C_I[R4003];
	if_name = "";
	if ( not_empty c_i )
	  if_name = c_i.Name;
	end if;
	select any c_p related by c_c->C_PO[R4010]->C_IR[R4016]->C_P[R4009] where (selected.InformalName == if_name);
	if ( not_empty c_p and c_ep.Descrip != "" )
	  c_p.Descrip = c_p.Descrip + "routine:" + ooapopulation.ExecutableProperty_getSignature( c_ep:c_ep) +
								  "," + c_ep.Descrip;
	end if;

    select any c_ep from instances of C_EP where ( false );
    ooapopulation.current_executable_property = c_ep;
  else
    c_i = ooapopulation.current_interface;
    reset_current_interface = false;
    if ( empty c_i )
      comp_if_name = param.value[0] + param.value[1];
      select any c_i from instances of C_I where ( selected.Name == comp_if_name );
      ooapopulation.current_interface = c_i;
      reset_current_interface = true;  // if we have to artificially set the current_interface we have to flag to unset it
    end if;

    ooapopulation.transformTerminatorService(visibility:param.value[2], name:param.value[3], domain:param.value[0], terminator:param.value[1]);

    // if we artificially set the current interface, we have to unset it so we don''t mess
    // up the next routine
    if ( reset_current_interface )
      select any c_i from instances of C_I where false;
      ooapopulation.current_interface = c_i;
    end if;
  end if;
elif ( "parameter" == element )
  if ( "" == param.value[0] )
    select any c_pp from instances of C_PP where (false);
    ooapopulation.current_interface_param = c_pp;
  else
    ooapopulation.transformParameter(name:param.value[0], direction:param.value[1]);
  end if;
elif ( "typeref" == element )
  if ( "" != param.value[0] )
    ooapopulation.transformType(name:param.value[0], visibility:"public", definition:"tmp");
    
    c_pp = ooapopulation.current_interface_param;
    c_ep = ooapopulation.current_executable_property;
    select one c_io related by c_ep->C_IO[R4004];
    if ( not_empty c_pp )
      ooapopulation.InterfaceParameter_setType(c_pp:ooapopulation.current_interface_param, type_name:param.value[0]);
    elif ( not_empty c_io )
      ooapopulation.InterfaceOperation_setReturnType(c_io:c_io, type_name:param.value[0]);
    end if;

  end if;
elif ( "codeblock" == element )
  c_ep = ooapopulation.current_executable_property;
  if ( not_empty c_ep )
    c_ep.Descrip = "<codeblock>" + param.value[0] + "</codeblock>";
  end if;
elif ( "pragma" == element )
  if ( "" == param.value[0] )
    select any pragma from instances of ooapragma where (false);
    ooapopulation.current_pragma = pragma;
  else
  	select one parent_element related by ooapopulation->ooaelement[R3801]->ooaelement[R3805.''child of''];
  	if ( not_empty parent_element )
      if ( ooaelement::ismarkable( type: parent_element.type ) )		// ignore pragma if we are not on a markable element
        select one markable related by parent_element->ooamarkable[R3806];
        ooapopulation.current_pragma = ooapragma::populate( name:value[0], list:value[1], markable:markable );
      end if;
  	else
      TRACE::log( flavor:"failure", id:56, message:"Element stack is malformed." );
      ooaelement::trace( population: ooapopulation );
    end if;
  end if;
elif ( "pragmaitem" == element )
  select one current_element related by ooapopulation->ooaelement[R3801];
  if ( not_empty current_element )
    if ( "pragma" == current_element.type )	// ignore if not child of pragma
      ooapragma_item::populate( value:value[0], pragma:ooapopulation.current_pragma );
    end if;
  else
    TRACE::log( flavor:"failure", id:57, message:"Element stack is malformed." );
    ooaelement::trace( population: ooapopulation );
  end if;
else
  // TRACE::log( flavor:"failure", id:59, message:"maslin unrecognized element:  " + element );
end if;
',
	1,
	'',
	"87050544-e583-4582-86a9-367a73543eb0");
INSERT INTO O_TPARM
	VALUES ("1019d8f1-50db-4525-8efa-ab5f93cf5b84",
	"7c945081-3482-4e6c-ae0f-158868c18ca3",
	'element',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("3ac4b005-6f40-497e-844c-7fe3cb6e0c7b",
	"7c945081-3482-4e6c-ae0f-158868c18ca3",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'[8]',
	"1019d8f1-50db-4525-8efa-ab5f93cf5b84",
	'');
INSERT INTO S_DIM
	VALUES (8,
	0,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"3ac4b005-6f40-497e-844c-7fe3cb6e0c7b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"d2cfb710-a113-4fe9-8f3b-85e2616544a5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("620ecd02-3e75-44f2-a4e3-9108c1091bfc",
	"7c945081-3482-4e6c-ae0f-158868c18ca3",
	'ooapopulation',
	"6b004b50-6faf-4d6c-84e5-1972ed5ff094",
	0,
	'',
	"3ac4b005-6f40-497e-844c-7fe3cb6e0c7b",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6b004b50-6faf-4d6c-84e5-1972ed5ff094",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<ooapopulation>',
	'',
	'',
	'../masl2xtuml.xtuml');
INSERT INTO O_TFR
	VALUES ("72bf6324-6202-4d48-8dba-ffe5e88ace77",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Interface_newParameter',
	'',
	"4d4c0ef2-2520-4dbe-8096-a56393ea3f85",
	1,
	'c_ep = param.c_ep;

select any parm related by c_ep->C_PP[R4006] where ( selected.Name == param.parameter_name );

if ( empty parm )
  create object instance parm of C_PP;
  relate c_ep to parm across R4006;
  self.InterfaceParameter_initialize(c_pp:parm, name:param.parameter_name);
  self.Interface_createMessageArgumentsForParameter(c_ep:c_ep, c_pp:parm);
end if;

return parm;',
	1,
	'',
	"102c4921-1e91-4570-87ba-0ccd6106d389");
INSERT INTO O_TPARM
	VALUES ("88268d5f-5c1f-40b0-ae54-8bd552b3522e",
	"72bf6324-6202-4d48-8dba-ffe5e88ace77",
	'c_ep',
	"5441230d-b4d6-495f-9e87-84acf5819d26",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("9cf548b1-de4d-4ae7-b59a-283c6b5c1abe",
	"72bf6324-6202-4d48-8dba-ffe5e88ace77",
	'parameter_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"88268d5f-5c1f-40b0-ae54-8bd552b3522e",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4d4c0ef2-2520-4dbe-8096-a56393ea3f85",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Property Parameter>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Component/Component.xtuml');
INSERT INTO O_TFR
	VALUES ("a727dbb8-0c72-49e4-b399-6803d51938b0",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'InterfaceParameter_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'c_pp = param.c_pp;

select one c_ep related by c_pp->C_EP[R4006];
self.Interface_addParameterToOrder(c_ep:c_ep, c_pp:c_pp);

// TODO - assign a default type to aid in testing.  Do we want to keep this (to // END)?
systypes_pkg = self.systypes_pkg;
select any def_dt related by systypes_pkg->PE_PE[R8000]->S_DT[R8001] where ( selected.Name == "string" );
// END

relate c_pp to def_dt across R4007;
c_pp.Name = param.name;
    ',
	1,
	'',
	"1efd86a6-157e-45d7-b72b-803940139b28");
INSERT INTO O_TPARM
	VALUES ("739aa9b1-3f98-4f25-b5cf-ef6c614912a7",
	"a727dbb8-0c72-49e4-b399-6803d51938b0",
	'c_pp',
	"4d4c0ef2-2520-4dbe-8096-a56393ea3f85",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("28aaafac-9408-4a27-a736-8f98ed8ea77f",
	"a727dbb8-0c72-49e4-b399-6803d51938b0",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"739aa9b1-3f98-4f25-b5cf-ef6c614912a7",
	'');
INSERT INTO O_TFR
	VALUES ("1b49dbff-ae0d-4560-a737-ca98e9122e43",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Interface_addParameterToOrder',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'c_ep = param.c_ep;
parameter = param.c_pp;

if(not_empty parameter)
  select many peers related by c_ep->C_PP[R4006];
  for each peer in peers
    if (peer != parameter)
      select one predecessor related by peer->C_PP[R4021.''precedes''];
      if (empty predecessor)
        relate parameter to peer across R4021.''succeeds'';
      end if;
    end if;
  end for;
end if;
',
	1,
	'',
	"eaeaa954-9f69-450a-a5a6-1b0d98435d31");
INSERT INTO O_TPARM
	VALUES ("08fa4e62-6e37-4413-9009-ff0107d35e4b",
	"1b49dbff-ae0d-4560-a737-ca98e9122e43",
	'c_ep',
	"5441230d-b4d6-495f-9e87-84acf5819d26",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("ea69c2fc-2c65-4ab5-a8af-683acfd6d824",
	"1b49dbff-ae0d-4560-a737-ca98e9122e43",
	'c_pp',
	"4d4c0ef2-2520-4dbe-8096-a56393ea3f85",
	0,
	'',
	"08fa4e62-6e37-4413-9009-ff0107d35e4b",
	'');
INSERT INTO O_TFR
	VALUES ("02d4b2b3-e219-4c57-bfa3-f9f74d3ee861",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Interface_createMessageArgumentsForParameter',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'c_ep = param.c_ep;
parameter = param.c_pp;

if(not_empty parameter)
  // for each message associated with this interface
  // create a message argument
  select many messages related by c_ep->C_AS[R4004]->MSG_SIG[R1021]->
                                                    MSG_AM[R1019]->MSG_M[R1018];
  if(empty messages)
    select many messages related by c_ep->C_IO[R4004]->MSG_IOP[R1022]->
    											    MSG_SM[R1020]->MSG_M[R1018];
  end if;
  for each message in messages
    create object instance arg of MSG_A;
    create object instance oa of MSG_EPA;
    relate oa to parameter across R1023;
    relate oa to arg across R1013;
    relate message to arg across R1001;
  end for;
end if;',
	1,
	'',
	"1b49dbff-ae0d-4560-a737-ca98e9122e43");
INSERT INTO O_TPARM
	VALUES ("f0a003ef-3444-4070-9a3f-f81cd040a8ae",
	"02d4b2b3-e219-4c57-bfa3-f9f74d3ee861",
	'c_ep',
	"5441230d-b4d6-495f-9e87-84acf5819d26",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("f47f6ab4-0952-4d54-895a-061b4bfc8ef8",
	"02d4b2b3-e219-4c57-bfa3-f9f74d3ee861",
	'c_pp',
	"4d4c0ef2-2520-4dbe-8096-a56393ea3f85",
	0,
	'',
	"f0a003ef-3444-4070-9a3f-f81cd040a8ae",
	'');
INSERT INTO O_TFR
	VALUES ("c1d107db-3920-45fc-8976-f5135aa4c119",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'InterfaceParameter_setType',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'c_pp = param.c_pp;
type_name = param.type_name;

// NOTE: This isn''t really a copied operation from the OOAofOOA, but we''re following the same paradigm for it
//   as other functions that are from the OOA

// Get a handle to the DT that is named as a parameter, output error if none found
//   TODO - This is a very broad selection.  Is that OK?  Can we assume that during convert we won''t see data that 
//     has multiple (different) types with the same name?  Keith thinks so.
select any s_dt from instances of S_DT where ( selected.Name == type_name );
if ( empty s_dt )
  // TODO - what should the ID be set to?
  TRACE::log( flavor:"failure", id:0, message:"could not find datatype  " + type_name + " to set for attribute " + c_pp.Name);
end if;

// Get a handle to the DT that is currently associated with the attribute
select one cur_s_dt related by c_pp->S_DT[R4007];

// If the new DT does not equal the existing DT, continue
if ( s_dt != cur_s_dt )
  // un-relate the existing DT across R4007
  unrelate c_pp from cur_s_dt across R4007;
  
  // relate the new attribute across R4007
  relate c_pp to s_dt across R4007;
end if;',
	1,
	'',
	"a727dbb8-0c72-49e4-b399-6803d51938b0");
INSERT INTO O_TPARM
	VALUES ("58a063db-aee8-48d5-bc20-c2eea0380815",
	"c1d107db-3920-45fc-8976-f5135aa4c119",
	'c_pp',
	"4d4c0ef2-2520-4dbe-8096-a56393ea3f85",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("a1bfbad2-a96b-408c-a149-bcca9d74ccf3",
	"c1d107db-3920-45fc-8976-f5135aa4c119",
	'type_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"58a063db-aee8-48d5-bc20-c2eea0380815",
	'');
INSERT INTO O_TFR
	VALUES ("8b1c235a-9bcf-4b0f-91a0-a53ef24edc4b",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'StateMachineEvent_newParameter',
	'',
	"9067a5b1-aa5d-499a-b13e-9bde5fc3e2cd",
	1,
	'sm_evt = param.sm_evt;

// State Machine Event.newDataItem()
create object instance newEvtdi of SM_EVTDI;
relate sm_evt to newEvtdi across R532;
select one sm related by sm_evt->SM_SM[R502];
relate newEvtdi to sm across R516;
self.StateMachineEventDataItem_initialize( sm_evtdi:newEvtdi, parameter_name:param.parameter_name );
self.StateMachineEvent_createMessageArgumentsForParameter(sm_evtdi:newEvtdi, sm_evt:sm_evt);

return newEvtdi;',
	1,
	'',
	"7275e256-3909-4d82-8c71-c51ad5614ea7");
INSERT INTO O_TPARM
	VALUES ("0141f038-b38f-4bff-bb25-22bf626c4ef3",
	"8b1c235a-9bcf-4b0f-91a0-a53ef24edc4b",
	'sm_evt',
	"33eebb24-8068-410b-a905-37c4e5cc2fdb",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("550bb9fa-f209-4b9c-a0dd-b60b38d42c8f",
	"8b1c235a-9bcf-4b0f-91a0-a53ef24edc4b",
	'parameter_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0141f038-b38f-4bff-bb25-22bf626c4ef3",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9067a5b1-aa5d-499a-b13e-9bde5fc3e2cd",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<State Machine Event Data Item>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/State Machine/State Machine.xtuml');
INSERT INTO O_TFR
	VALUES ("6581bffc-c6e4-4de2-ad2d-b2d5132aa19b",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'StateMachineEventDataItem_initialize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'sm_evtdi = param.sm_evtdi;

select one sm_evt related by sm_evtdi->SM_EVT[R532];
self.StateMachineEvent_addDataItemToOrder( sm_evtdi:sm_evtdi, sm_evt:sm_evt );

// TODO - assign a default type to aid in testing.  Do we want to keep this (to // END)?
systypes_pkg = self.systypes_pkg;
select any def_dt related by systypes_pkg->PE_PE[R8000]->S_DT[R8001] where ( selected.Name == "string" );
// END

relate sm_evtdi to def_dt across R524;
sm_evtdi.Name = param.parameter_name;',
	1,
	'',
	"becb75b7-ab37-4f29-8752-db272d0c670e");
INSERT INTO O_TPARM
	VALUES ("eb9fa192-45c6-4ef1-bc6e-9ed4cadab872",
	"6581bffc-c6e4-4de2-ad2d-b2d5132aa19b",
	'sm_evtdi',
	"9067a5b1-aa5d-499a-b13e-9bde5fc3e2cd",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("39e21943-9ce6-4a6a-8fe8-2a1a511cc4c6",
	"6581bffc-c6e4-4de2-ad2d-b2d5132aa19b",
	'parameter_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"eb9fa192-45c6-4ef1-bc6e-9ed4cadab872",
	'');
INSERT INTO O_TFR
	VALUES ("ef68ef19-5a14-4301-b2e6-e3447b1266c6",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'StateMachineEvent_addDataItemToOrder',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'item = param.sm_evtdi;
sm_evt = param.sm_evt;

if(not_empty item)
  select many peers related by sm_evt->SM_EVTDI[R532];
  for each peer in peers
    if (peer != item)
      select one predecessor related by peer->SM_EVTDI[R533.''precedes''];
      if (empty predecessor)
        relate item to peer across R533.''succeeds'';
      end if;
    end if;
  end for;
end if;',
	1,
	'',
	"1e8441cf-3fcf-4a4c-893b-31493ce59d96");
INSERT INTO O_TPARM
	VALUES ("aba16aea-19f0-41fb-ac45-a3d6b02a16ca",
	"ef68ef19-5a14-4301-b2e6-e3447b1266c6",
	'sm_evtdi',
	"9067a5b1-aa5d-499a-b13e-9bde5fc3e2cd",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("bd742c75-87f7-4486-ae67-91c7522006db",
	"ef68ef19-5a14-4301-b2e6-e3447b1266c6",
	'sm_evt',
	"33eebb24-8068-410b-a905-37c4e5cc2fdb",
	0,
	'',
	"aba16aea-19f0-41fb-ac45-a3d6b02a16ca",
	'');
INSERT INTO O_TFR
	VALUES ("052ed84c-221e-4169-bb11-a21a84d84a7b",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'StateMachineEvent_createMessageArgumentsForParameter',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'parameter = param.sm_evtdi;
sm_evt = param.sm_evt;

if(not_empty parameter)
  // for each message associated with this
  // event, create a message argument.
  select many messages related by sm_evt->MSG_E[R1009]->MSG_AM[R1019]
                                                                 ->MSG_M[R1018];
  for each message in messages
    create object instance arg of MSG_A;
    create object instance ea of MSG_EA;
    relate ea to parameter across R1017;
    relate ea to arg across R1013;
    relate message to arg across R1001;
  end for;
end if;
',
	1,
	'',
	"ef68ef19-5a14-4301-b2e6-e3447b1266c6");
INSERT INTO O_TPARM
	VALUES ("b62445e9-cf46-4de4-ab69-672bebe498ec",
	"052ed84c-221e-4169-bb11-a21a84d84a7b",
	'sm_evtdi',
	"9067a5b1-aa5d-499a-b13e-9bde5fc3e2cd",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("42aea807-c519-4855-8a8f-e0cf0b5ee0b2",
	"052ed84c-221e-4169-bb11-a21a84d84a7b",
	'sm_evt',
	"33eebb24-8068-410b-a905-37c4e5cc2fdb",
	0,
	'',
	"b62445e9-cf46-4de4-ab69-672bebe498ec",
	'');
INSERT INTO O_TFR
	VALUES ("1e8441cf-3fcf-4a4c-893b-31493ce59d96",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'StateMachineEventDataItem_setType',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'sm_evtdi = param.sm_evtdi;
type_name = param.type_name;

// NOTE: This isn''t really a copied operation from the OOAofOOA, but we''re following the same paradigm for it
//   as other functions that are from the OOA

// Get a handle to the DT that is named as a parameter, output error if none found
//   TODO - This is a very broad selection.  Is that OK?  Can we assume that during convert we won''t see data that 
//     has multiple (different) types with the same name?  Keith thinks so.
select any s_dt from instances of S_DT where ( selected.Name == type_name );
if ( empty s_dt )
  // TODO - what should the ID be set to?
  TRACE::log( flavor:"failure", id:0, message:"could not find datatype  " + type_name + " to set for attribute " + sm_evtdi.Name);
end if;

// Get a handle to the DT that is currently associated with the attribute
select one cur_s_dt related by sm_evtdi->S_DT[R524];

// If the new DT does not equal the existing DT, continue
if ( s_dt != cur_s_dt )
  // un-relate the existing DT across R524
  unrelate sm_evtdi from cur_s_dt across R524;
  
  // relate the new attribute across R524
  relate sm_evtdi to s_dt across R524;
end if;',
	1,
	'',
	"6581bffc-c6e4-4de2-ad2d-b2d5132aa19b");
INSERT INTO O_TPARM
	VALUES ("c7d6f017-8718-4a7f-be22-c4e61f6df311",
	"1e8441cf-3fcf-4a4c-893b-31493ce59d96",
	'sm_evtdi',
	"9067a5b1-aa5d-499a-b13e-9bde5fc3e2cd",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("168a9644-5135-4ce7-8008-7683b0661c10",
	"1e8441cf-3fcf-4a4c-893b-31493ce59d96",
	'type_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c7d6f017-8718-4a7f-be22-c4e61f6df311",
	'');
INSERT INTO O_TFR
	VALUES ("3ae49a72-f7e0-4a00-aaad-f0574cb325be",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Package_newSubsuper',
	'',
	"4480b008-8c74-4f57-9256-08b7365520bc",
	1,
	'ep_pkg = param.ep_pkg;
select any fromOOAPart from instances of ooaparticipation where (selected.isFirst == true );
select many toOOAParts from instances of ooaparticipation where (selected.isFirst == false );

// What follows is a heavily modified version of OOAofOOA''s Package::newAssociation()
// TODO - LPS handle imported classes?
  
select any assoc from instances of R_REL where false;
select any fromClass related by ep_pkg->PE_PE[R8000]->O_OBJ[R8001] where (selected.Name == fromOOAPart.className);
if ( not_empty fromClass )
  create object instance assoc of R_REL;
  // create Packageable Element supertype and hook up to this package.
  create object instance pe of PE_PE;
  relate assoc to pe across R8001;
  relate pe to ep_pkg across R8000;
  pe.type = ElementTypeConstants::ASSOCIATION;
  self.PackageableElement_initialize(pe_pe:pe);
  self.Association_initialize(r_rel:assoc);
  create object instance subsuper of R_SUBSUP;
  relate subsuper to assoc across R206;
  //
  create object instance fromOIR of R_OIR;
  relate fromClass to assoc across R201 using fromOIR;
  create object instance fromRTO of R_RTO;
  relate fromOIR to fromRTO across R203;
  create object instance fromSUPER of R_SUPER;
  relate fromSUPER to fromRTO across R204;
  relate fromSUPER to subsuper across R212;
  //

  for each toOOAPart in toOOAParts
	select any toClass related by ep_pkg->PE_PE[R8000]->O_OBJ[R8001] where (selected.Name == toOOAPart.className);
	//
	if ( not_empty toClass )
	  create object instance toOIR of R_OIR;
	  relate toClass to assoc across R201 using toOIR;
	  create object instance toRGO of R_RGO;
	  relate toOIR to toRGO across R203;
	  create object instance toSUB of R_SUB;
	  relate toSUB to toRGO across R205;
	  relate toSUB to subsuper across R213;
	end if;

  end for;

end if;

return assoc;
',
	1,
	'',
	"94ecebda-10c4-43bf-b76c-0901fd3873c5");
INSERT INTO O_TPARM
	VALUES ("430b2eed-ba2d-44a4-bbbc-002925e4dc59",
	"3ae49a72-f7e0-4a00-aaad-f0574cb325be",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("0526c2c0-d3b5-4cf5-b9d0-2e6496657123",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Function_setReturnType',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	's_sync = param.s_sync;
type_name = param.type_name;

// Get a handle to the DT that is named as a parameter, output error if none found
//   TODO - This is a very broad selection.  Is that OK?  Can we assume that during convert we won''t see data that 
//     has multiple (different) types with the same name?  Keith thinks so.
select any s_dt from instances of S_DT where ( selected.Name == type_name );
if ( empty s_dt )
  // TODO - what should the ID be set to?
  TRACE::log( flavor:"failure", id:0, message:"could not find datatype  " + type_name + " to set for function " + s_sync.Name);
else

  // unrelated the old return type type
  select one old_s_dt related by s_sync->S_DT[R25];
  if ( not_empty old_s_dt )
	unrelate old_s_dt from s_sync across R25;
  end if;
  
  // relate the new return type
  relate s_dt to s_sync across R25;

end if;',
	1,
	'',
	"59006327-25ec-491c-862a-bcb648543e48");
INSERT INTO O_TPARM
	VALUES ("8c224593-c482-4874-a9e6-73b28d3e094e",
	"0526c2c0-d3b5-4cf5-b9d0-2e6496657123",
	's_sync',
	"60690409-5a69-45db-896b-5a63a9103c18",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("6c4e7949-6c0a-4b37-9cd2-917965e91880",
	"0526c2c0-d3b5-4cf5-b9d0-2e6496657123",
	'type_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8c224593-c482-4874-a9e6-73b28d3e094e",
	'');
INSERT INTO O_TFR
	VALUES ("1c15c7e3-850c-4202-aa6d-1eff282a7b8e",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Operation_setReturnType',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_tfr = param.o_tfr;
type_name = param.type_name;

// Get a handle to the DT that is named as a parameter, output error if none found
//   TODO - This is a very broad selection.  Is that OK?  Can we assume that during convert we won''t see data that 
//     has multiple (different) types with the same name?  Keith thinks so.
select any s_dt from instances of S_DT where ( selected.Name == type_name );
if ( empty s_dt )
  // TODO - what should the ID be set to?
  TRACE::log( flavor:"failure", id:0, message:"could not find datatype  " + type_name + " to set for operation " + o_tfr.Name);
else

  // unrelated the old return type type
  select one old_s_dt related by o_tfr->S_DT[R116];
  if ( not_empty old_s_dt )
	unrelate old_s_dt from o_tfr across R116;
  end if;
  
  // relate the new return type
  relate s_dt to o_tfr across R116;

end if;',
	1,
	'',
	"c05e4e81-e31b-407e-82a8-6f734786b680");
INSERT INTO O_TPARM
	VALUES ("7e03ec81-57fd-4fbe-ac0a-a30384f769c0",
	"1c15c7e3-850c-4202-aa6d-1eff282a7b8e",
	'o_tfr',
	"5cb6d426-f094-4cad-8cdb-b16506c9f2e6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("bbebe915-6dd6-45b3-a7dd-fef6bcead0a0",
	"1c15c7e3-850c-4202-aa6d-1eff282a7b8e",
	'type_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7e03ec81-57fd-4fbe-ac0a-a30384f769c0",
	'');
INSERT INTO O_TFR
	VALUES ("1efd86a6-157e-45d7-b72b-803940139b28",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'InterfaceOperation_setReturnType',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'c_io = param.c_io;
type_name = param.type_name;

// Get a handle to the DT that is named as a parameter, output error if none found
//   TODO - This is a very broad selection.  Is that OK?  Can we assume that during convert we won''t see data that 
//     has multiple (different) types with the same name?  Keith thinks so.
select any s_dt from instances of S_DT where ( selected.Name == type_name );
if ( empty s_dt )
  // TODO - what should the ID be set to?
  TRACE::log( flavor:"failure", id:0, message:"could not find datatype  " + type_name + " to set for function " + c_io.Name);
else

  // unrelated the old return type type
  select one old_s_dt related by c_io->S_DT[R4008];
  if ( not_empty old_s_dt )
	unrelate old_s_dt from c_io across R4008;
  end if;
  
  // relate the new return type
  relate s_dt to c_io across R4008;

end if;',
	1,
	'',
	"5a638f8c-37fc-48ad-85a7-117da5262634");
INSERT INTO O_TPARM
	VALUES ("a026b572-0f74-4261-b6ae-f3e0d1c0b98b",
	"1efd86a6-157e-45d7-b72b-803940139b28",
	'c_io',
	"4e59980a-6ac2-4a28-8ad8-7f1ada83c53a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("2884dc3d-93e2-44d6-a0a1-044cc961c001",
	"1efd86a6-157e-45d7-b72b-803940139b28",
	'type_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a026b572-0f74-4261-b6ae-f3e0d1c0b98b",
	'');
INSERT INTO O_TFR
	VALUES ("45db7a44-57f6-46ce-9d82-b22a6c1d990a",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ReferredToClassInAssoc_addAttributeToIdentifier',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_rto = param.r_rto;
oida = param.oida;

if ( not_empty oida )
  select many rgo_set related by r_rto->R_OIR[R203]->R_REL[R201]->R_OIR[R201]->R_RGO[R203]
    where ( selected.OIR_ID != r_rto.OIR_ID and selected.Rel_ID == r_rto.Rel_ID );
  for each rgo in rgo_set
    select any ref_attr_id related by rgo->O_REF[R111]->O_RATTR[R108]->O_ATTR[R106]->O_OIDA[R105];
    id_id = -1;
    if ( not_empty ref_attr_id )
      select one assoc related by rgo->R_OIR[R203]->R_REL[R201]->R_ASSOC[R206];
      select one subsup related by rgo->R_OIR[R203]->R_REL[R201]->R_SUBSUP[R206];
      if not_empty assoc or not_empty subsup
        // these associations require the referentials be part of the
        // identifier.
         id_id = ref_attr_id.Oid_ID;
      end if;
    end if;
    select one r_rel related by rgo->R_OIR[R203]->R_REL[R201];
    select one part_obj related by r_rto->R_OIR[R203]->O_OBJ[R201];
    select one form_obj related by rgo->R_OIR[R203]->O_OBJ[R201];
    new_o_rattr = self.ClassIdentifierAttribute_addReference(o_oida:oida, rel:r_rel,
      part_rto:r_rto, part_obj:part_obj,
      form_rgo:rgo, form_obj:form_obj,
      id: id_id);
    if ( id_id != -1 )
      // we''ve updated the id for the rgo
      // check if we need to update any referentials referring
      // to the rgo''s identifier
      select many rto_set related by ref_attr_id->O_ID[R105]->R_RTO[R109];
      for each rto in rto_set
        select any oida related by rto->O_ID[R109]->O_OIDA[R105] where selected.Attr_ID == new_o_rattr.Attr_ID;
        self.ReferredToClassInAssoc_addAttributeToIdentifier(r_rto:rto, oida:oida);
      end for;
    end if;
  end for;
end if;',
	1,
	'',
	"8f67f4c9-a1e6-4dc9-bc51-e0f103cd0c3f");
INSERT INTO O_TPARM
	VALUES ("dbec50fb-c029-4cab-b9f7-82f90c3a7677",
	"45db7a44-57f6-46ce-9d82-b22a6c1d990a",
	'oida',
	"08de18fb-cb5f-4d53-9826-375c4dad56f7",
	0,
	'',
	"9bd58609-6d06-4c59-88bb-d61600a00187",
	'');
INSERT INTO O_TPARM
	VALUES ("9bd58609-6d06-4c59-88bb-d61600a00187",
	"45db7a44-57f6-46ce-9d82-b22a6c1d990a",
	'r_rto',
	"893ea6d3-466d-498e-b58a-cf5966da5549",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("bf85ec58-a5ab-477b-8ece-12f3a5a109e7",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Attribute_migrateBaseToReferential',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_attr = param.o_attr;

select one battr related by o_attr->O_BATTR[R106];
if ( not_empty battr )
  self.BaseAttribute_dispose(o_battr:battr);
end if;
create object instance rattr of O_RATTR;
rattr.Ref_Mode = 0;  // LPS set to 0 to use local attribute name
relate o_attr to rattr across R106;

// LPS - we leave the datatype unset because the datatype same_as<Base Attribute>
// does not exist. Instead it is incorporated into the instance dumper of O_ATTR
// to insert the correct unique ID if the O_ATTR is related to an O_RATTR
//self.ReferentialAttribute_setDatatype(o_rattr:rattr);
',
	1,
	'',
	"c59ea70d-68ee-4b9e-a501-5920a749fab1");
INSERT INTO O_TPARM
	VALUES ("33e28d9d-7672-4082-bf2d-ab4e783682ad",
	"bf85ec58-a5ab-477b-8ece-12f3a5a109e7",
	'o_attr',
	"579b8247-e153-481d-8926-384cdc722464",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("8f67f4c9-a1e6-4dc9-bc51-e0f103cd0c3f",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ReferentialAttribute_setDatatype',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_rattr = param.o_rattr;

// assure that the datatype is the correct one for
// referential attributes
select one attr related by o_rattr->O_ATTR[R106];
select one dt related by attr->S_DT[R114];
if ( not_empty dt )
  if ( dt.Name == "same_as<Base_Attribute>" )
    return;
  else
    unrelate attr from dt across R114;
  end if;
end if;


select one pkg related by attr->O_OBJ[R102]->PE_PE[R8001]->EP_PKG[R8000];


  select one system related by pkg->S_SYS[R1405];
  //dt_id = GD::NULL_UNIQUE_ID();
  //if not_empty system
  // dt_id = system.getCoreTypeId(name:"same_as<Base_Attribute>");
  //end if;
  //select any pe from instances of PE_PE where selected.Element_ID == dt_id;
  //select one ref_attr_dt related by pe->S_DT[R8001]; 
  ref_attr_dt = self.SystemModel_getCoreTypeId(s_sys:system, name:"same_as<Base_Attribute>");
  if (empty ref_attr_dt)
    TRACE::log(flavor:"failure", id:42, message:
                  "Unable to locate expected data type: same_as<Base_Attribute>");
  else
    relate attr to ref_attr_dt across R114;
  end if;

',
	1,
	'',
	"a0d04799-d672-4ed8-8a3c-9d45696ac060");
INSERT INTO O_TPARM
	VALUES ("d43a4e7e-f295-4538-8816-06cd3672d1d3",
	"8f67f4c9-a1e6-4dc9-bc51-e0f103cd0c3f",
	'o_rattr',
	"9bb4b389-b488-46e0-aeca-fc90df7b856a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("f5223167-a55c-4363-aa92-45c59ad16ea7",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'SystemModel_getCoreTypeId',
	'',
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	1,
	's_sys = param.s_sys;

// LPS - This is copied from the OOAofOOA, but it is now a misnomer because it is returning an inst_ref and not an ID

select any coreDt from instances of S_DT where false;
// System.getCoreTypeId()
if s_sys.useGlobals
  select any coreDt related by s_sys->G_EIS[R9100]->PE_PE[R9100]->S_DT[R8001]
                                              where selected.Name == param.name;
end if;

return coreDt;',
	1,
	'',
	"e48a4cae-58eb-40d8-ab5c-d620de2116cc");
INSERT INTO O_TPARM
	VALUES ("90f14067-ed06-4f23-9da0-fbde2177c504",
	"f5223167-a55c-4363-aa92-45c59ad16ea7",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"55808cbf-50f8-47d7-99b2-19b416e2206d",
	'');
INSERT INTO O_TPARM
	VALUES ("55808cbf-50f8-47d7-99b2-19b416e2206d",
	"f5223167-a55c-4363-aa92-45c59ad16ea7",
	's_sys',
	"4b886601-55ee-4d42-a1f8-f5c45d459db2",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("2e4a3346-5501-4069-8902-2df8989ed4d1",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ReferentialAttribute_combine_refs',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'o_rattr = param.o_rattr;
other_attr = param.other_attr;

select one other_rattr related by other_attr->O_RATTR[R106];
select many other_ref_set related by other_rattr->O_REF[R108];
   
   // find last O_REF in o_rattr''s ref list R112
   select any ref related by o_rattr->O_REF[R108];
   select one next_ref related by ref->O_REF[R112.''precedes''];
   while (not_empty next_ref)
     select one next_ref related by ref->O_REF[R112.''precedes''];
     if (not_empty next_ref)
       ref = next_ref;
     end if;
   end while;
   
   for each other_ref in other_ref_set
     unrelate other_ref from other_rattr across R108;
     relate other_ref to o_rattr across R108;  
     // add other_ref to o_rattr''s ref list R112
     relate other_ref to ref across R112.''succeeds'';
     ref = other_ref;    
   end for;
   select any oida related by other_attr->O_OIDA[R105];
   if ( not_empty oida )  // attribute is identifying
     self.ReferentialAttribute_migrateToBase( o_rattr:other_rattr );
   else
     self.Attribute_dispose( o_attr:other_attr );
   end if;',
	1,
	'',
	"266785e6-6f30-49ff-9b55-a610912a3a66");
INSERT INTO O_TPARM
	VALUES ("e491513b-88fa-4392-af93-9def02121fd2",
	"2e4a3346-5501-4069-8902-2df8989ed4d1",
	'o_rattr',
	"9bb4b389-b488-46e0-aeca-fc90df7b856a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("d28cf9d1-7fe3-4d10-bee2-15bd88065dcc",
	"2e4a3346-5501-4069-8902-2df8989ed4d1",
	'other_attr',
	"579b8247-e153-481d-8926-384cdc722464",
	0,
	'',
	"e491513b-88fa-4392-af93-9def02121fd2",
	'');
INSERT INTO O_TFR
	VALUES ("e52ea129-bc92-40af-8fb9-524ceac7d822",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'SubtypeSupertypeAssociation_formalize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_subsup = param.r_subsup;

if ( self.SubtypeSupertypeAssociation_isFormalized(r_subsup:r_subsup) )
  self.SubtypeSupertypeAssociation_unformalize(r_subsup:r_subsup);
end if;

select one sup_rto related by r_subsup->R_SUPER[R212]->R_RTO[R204];
select one sup_obj related by sup_rto->R_OIR[R203]->O_OBJ[R201];
select any oid related by sup_obj->O_ID[R104] where selected.Oid_ID == param.id;
relate oid to sup_rto across R109;

select many oida_set related by oid->O_OIDA[R105];
select many sub_rgo_set related by r_subsup->R_SUB[R213]->R_RGO[R205];
// always create the O_RTIDA instances even if the
// association doesn''t have any subclasses defined at the moment
for each oida in oida_set 
  create object instance rtida of O_RTIDA;
  relate oida to sup_rto across R110 using rtida;
end for;
for each sub_rgo in sub_rgo_set
  select one sub_obj related by sub_rgo->R_OIR[R203]->O_OBJ[R201];
  // unused_oid = sub_obj.findUnusedIdentifier(); LPS - we do not need to automatically ad to an identifier because this
  // will be done later by the rest of the MASL convert
  for each oida in oida_set 
    select one rel related by r_subsup->R_REL[R206];
    select one sub_obj related by sub_rgo->R_OIR[R203]->O_OBJ[R201];
    newAttr = self.ClassIdentifierAttribute_addReference(o_oida:oida, rel: rel,
        part_rto: sup_rto, part_obj: sup_obj, 
        form_rgo: sub_rgo, form_obj: sub_obj,
        id: -1);
        //id: unused_oid);
  end for;
end for;
',
	1,
	'',
	"4976f346-397d-40d4-b939-c1ab6cc5bbea");
INSERT INTO O_TPARM
	VALUES ("a6a6045d-f2fc-4eab-9dab-8ca30d39ddf9",
	"e52ea129-bc92-40af-8fb9-524ceac7d822",
	'id',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"c9a4b9e7-8b0a-4664-972e-c7b00c6f7e2d",
	'');
INSERT INTO O_TPARM
	VALUES ("c9a4b9e7-8b0a-4664-972e-c7b00c6f7e2d",
	"e52ea129-bc92-40af-8fb9-524ceac7d822",
	'r_subsup',
	"8f3b0ab8-e566-4e03-9159-7047140c04a7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("8f3b0ab8-e566-4e03-9159-7047140c04a7",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Subtype Supertype Association>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Association/Association.xtuml');
INSERT INTO O_TFR
	VALUES ("99555050-1f87-4204-b0c5-e018b7bf25c8",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'SubtypeSupertypeAssociation_isFormalized',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'r_subsup = param.r_subsup;
select one rto related by r_subsup->R_SUPER[R212]->R_RTO[R204];
select any rtida related by rto->O_RTIDA[R110];
return not_empty rtida;
',
	1,
	'',
	"e52ea129-bc92-40af-8fb9-524ceac7d822");
INSERT INTO O_TPARM
	VALUES ("7e61512d-6236-45ea-ae23-803897ae1dbf",
	"99555050-1f87-4204-b0c5-e018b7bf25c8",
	'r_subsup',
	"8f3b0ab8-e566-4e03-9159-7047140c04a7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("e48a4cae-58eb-40d8-ab5c-d620de2116cc",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'SubtypeSupertypeAssociation_unformalize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_subsup = param.r_subsup;

select one sup_rto related by r_subsup->R_SUPER[R212]->R_RTO[R204];
select one sup_oir related by sup_rto->R_OIR[R203];

self.ReferredToClassInAssoc_unformalize(r_rto:sup_rto);

// have to relate again due to propagation of previous unrelates
relate sup_oir to sup_rto across R203;

',
	1,
	'',
	"99555050-1f87-4204-b0c5-e018b7bf25c8");
INSERT INTO O_TPARM
	VALUES ("12a26683-138a-4233-bebc-0a1534bf93d4",
	"e48a4cae-58eb-40d8-ab5c-d620de2116cc",
	'r_subsup',
	"8f3b0ab8-e566-4e03-9159-7047140c04a7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("0bdc1bb3-9d41-48aa-a6ea-85d1a00c0e90",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ModelClass_removeDuplicateAttrs',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// This is not from the OOAofOOA. This is to support formalization
o_obj = param.o_obj;

// post processing for the formalizing object
// * remove any base attributes that have a referential attribute of the same name
select many battrs related by o_obj->O_ATTR[R102]->O_BATTR[R106]->O_ATTR[R106];
select many rattrs related by o_obj->O_ATTR[R102]->O_RATTR[R106]->O_ATTR[R106];
for each battr in battrs
  for each rattr in rattrs
	if ( rattr.Root_Nam == battr.Root_Nam )
	  self.Attribute_dispose( o_attr:battr ); // delete any base attribute that has the same name as a referential attribute
	end if;
  end for;
end for;',
	1,
	'',
	"96e13109-b598-4fd0-be21-6bd307704f41");
INSERT INTO O_TPARM
	VALUES ("ee27c9be-3a92-4b18-bab7-05d380deb78b",
	"0bdc1bb3-9d41-48aa-a6ea-85d1a00c0e90",
	'o_obj',
	"63f4ff99-f127-443b-a678-30ace41da702",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("cc75ac49-bb5f-40d6-80c1-cc9b23513189",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'LinkedAssociation_formalize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_assoc = param.r_assoc;

if ( self.LinkedAssociation_isFormalized(r_assoc:r_assoc) )
  self.LinkedAssociation_unformalize(r_assoc:r_assoc);
end if;

select one aone_rto related by r_assoc->R_AONE[R209]->R_RTO[R204];
select one aone_obj related by aone_rto->R_OIR[R203]->O_OBJ[R201];
select any aone_oid related by aone_obj->O_ID[R104] where selected.Oid_ID == param.one_id;
relate aone_oid to aone_rto across R109;

select one aoth_rto related by r_assoc->R_AOTH[R210]->R_RTO[R204];
select one aoth_obj related by aoth_rto->R_OIR[R203]->O_OBJ[R201];
select any aoth_oid related by aoth_obj->O_ID[R104] where selected.Oid_ID == param.oth_id;
relate aoth_oid to aoth_rto across R109;

select one assr_rgo related by r_assoc->R_ASSR[R211]->R_RGO[R205];
select one assr_obj related by assr_rgo->R_OIR[R203]->O_OBJ[R201];
// unused_oid = assr_obj.findUnusedIdentifier(); LPS - we do not need to automatically ad to an identifier because this
// will be done later by the rest of the MASL convert

select one rel related by r_assoc->R_REL[R206];
select many aone_oida_set related by aone_oid->O_OIDA[R105];
for each oida in aone_oida_set
    newAttr = self.ClassIdentifierAttribute_addReference(o_oida:oida, rel:rel,
        part_rto: aone_rto, part_obj: aone_obj, 
        form_rgo: assr_rgo, form_obj: assr_obj,
        id: -1);
        //id: unused_oid);
end for;

select many aoth_oida_set related by aoth_oid->O_OIDA[R105];
for each oida in aoth_oida_set
    newAttr = self.ClassIdentifierAttribute_addReference(o_oida:oida, rel:rel,
        part_rto: aoth_rto, part_obj: aoth_obj, 
        form_rgo: assr_rgo, form_obj: assr_obj,
        id: -1);
        //id: unused_oid);
end for;
',
	1,
	'',
	"72bf6324-6202-4d48-8dba-ffe5e88ace77");
INSERT INTO O_TPARM
	VALUES ("7847e24e-1701-4e4f-bea3-f32a7480776b",
	"cc75ac49-bb5f-40d6-80c1-cc9b23513189",
	'one_id',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"0f74d1ed-44ad-4b86-9636-5920222b4e10",
	'');
INSERT INTO O_TPARM
	VALUES ("2de7a292-180f-4f4c-8a65-2a5053042684",
	"cc75ac49-bb5f-40d6-80c1-cc9b23513189",
	'oth_id',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7847e24e-1701-4e4f-bea3-f32a7480776b",
	'');
INSERT INTO O_TPARM
	VALUES ("0f74d1ed-44ad-4b86-9636-5920222b4e10",
	"cc75ac49-bb5f-40d6-80c1-cc9b23513189",
	'r_assoc',
	"7f02c6dd-ea5d-4892-801e-a1515764350f",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("7f02c6dd-ea5d-4892-801e-a1515764350f",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Linked Association>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Association/Association.xtuml');
INSERT INTO O_TFR
	VALUES ("be35c7fe-77a5-459d-8c2a-4d0aef77aa59",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'LinkedAssociation_isFormalized',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'r_assoc = param.r_assoc;

select one rto1 related by r_assoc->R_AONE[R209]->R_RTO[R204];
select any rtida1 related by rto1->O_RTIDA[R110];
select one rto2 related by r_assoc->R_AOTH[R210]->R_RTO[R204];
select any rtida2 related by rto2->O_RTIDA[R110];
return not_empty rtida1 and not_empty rtida2;
',
	1,
	'',
	"cc75ac49-bb5f-40d6-80c1-cc9b23513189");
INSERT INTO O_TPARM
	VALUES ("a8f16ce2-bc4d-4fb9-a511-cbc64f6f3171",
	"be35c7fe-77a5-459d-8c2a-4d0aef77aa59",
	'r_assoc',
	"7f02c6dd-ea5d-4892-801e-a1515764350f",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("f8e9c620-45ae-495d-98b3-effcb38fc212",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'LinkedAssociation_unformalize',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'r_assoc = param.r_assoc;

select one aone_rto related by r_assoc->R_AONE[R209]->R_RTO[R204];
select one aone_oir related by aone_rto->R_OIR[R203];
select one aoth_rto related by r_assoc->R_AOTH[R210]->R_RTO[R204];
select one aoth_oir related by aoth_rto->R_OIR[R203];

self.ReferredToClassInAssoc_unformalize(r_rto:aone_rto);
self.ReferredToClassInAssoc_unformalize(r_rto:aoth_rto);

// have to relate again due to propagation of previous unrelates
relate aone_oir to aone_rto across R203;
relate aoth_oir to aoth_rto across R203;


',
	1,
	'',
	"be35c7fe-77a5-459d-8c2a-4d0aef77aa59");
INSERT INTO O_TPARM
	VALUES ("70badf68-6929-4815-ade3-9bf77294291b",
	"f8e9c620-45ae-495d-98b3-effcb38fc212",
	'r_assoc',
	"7f02c6dd-ea5d-4892-801e-a1515764350f",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("2a7c6bb3-a25a-4f91-879b-e7d0557c7647",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformDescription',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'element = param.element;
text = param.text;
tag = param.tag;

// choose where to put the description based on the element type
if ( "attribute" == element.type )
  attr = self.current_attribute;
  if ( not_empty attr )
    attr.Descrip = attr.Descrip + text;
  end if;
elif ( "terminator" == element.type )
  interface = self.current_interface;
  select any term related by interface->C_IR[R4012]->C_R[R4009];
  if ( not_empty term )
    term.Descrip = term.Descrip + text;
  end if;
elif ( "state" == element.type )
  state = self.current_state;
  select one sm_act related by state->SM_MOAH[R511]->SM_AH[R513]->SM_ACT[R514];
  if ( not_empty sm_act )
    sm_act.Descrip = sm_act.Descrip + text;
  end if;
elif ( "routine" == element.type )
  routine1 = self.current_domain_function;
  if ( not_empty routine1 )
	routine1.Descrip = routine1.Descrip + text;
  else
    routine2 = self.current_executable_property;
    select one c_io related by routine2->C_IO[R4004];
	if ( not_empty c_io )
	  c_io.Descrip = c_io.Descrip + text;
	end if;
  end if;
elif ( "operation" == element.type )
  operation = self.current_class_op;
  if ( not_empty operation )
	operation.Descrip = operation.Descrip + text;
  end if;
elif ( "type" == element.type )
  type = self.current_type;
  if ( not_empty type )
	type.Descrip = type.Descrip + text;
  end if;
elif ( "domain" == element.type )
  if ( self.processingProject )
    domain = self.current_imported_component;
    if ( not_empty domain )
      domain.Descrip = domain.Descrip + text;
    end if;
  else
    domain = self.current_component;
    if ( not_empty domain )
      domain.Descrip = domain.Descrip + text;
    end if;
  end if;
elif ( "event" == element.type )
  evt = self.current_event;
  if ( not_empty evt )
	evt.Descrip = evt.Descrip + text;
  end if;
elif ( "object" == element.type )
  obj = self.current_class;
  if ( not_empty obj )
    obj.Descrip = obj.Descrip + text;
  end if;
elif ( "project" == element.type )
  project = self.current_component;
  if ( not_empty project )
    project.Descrip = project.Descrip + text;
  end if;
elif ( "subsuper" == element.type or "regularrel" == element.type or "associative" == element.type )
  self.current_rel.description = self.current_rel.description + text;
else
  // TRACE::log( flavor:"warning", id:11, message:"description found for unsupported element" + element.type );
end if;',
	1,
	'',
	"9438bf8f-4666-499e-9822-00e7b064286f");
INSERT INTO O_TPARM
	VALUES ("79528561-419f-40d2-84d7-937fc54f5dc0",
	"2a7c6bb3-a25a-4f91-879b-e7d0557c7647",
	'element',
	"67d44486-874e-43aa-a2a2-0487451e2390",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("67d44486-874e-43aa-a2a2-0487451e2390",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<ooaelement>',
	'',
	'',
	'../../marking/marking.xtuml');
INSERT INTO O_TPARM
	VALUES ("a95eb209-08f1-46f8-8298-29c16605c8c8",
	"2a7c6bb3-a25a-4f91-879b-e7d0557c7647",
	'text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"79528561-419f-40d2-84d7-937fc54f5dc0",
	'');
INSERT INTO O_TPARM
	VALUES ("017dedaa-ec0d-453e-9ed8-007277813d34",
	"2a7c6bb3-a25a-4f91-879b-e7d0557c7647",
	'tag',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a95eb209-08f1-46f8-8298-29c16605c8c8",
	'');
INSERT INTO O_TFR
	VALUES ("3a4da8df-5db0-459c-90a7-bc2da0000b34",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'mergeDuplicateRoutines',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// search for all S_SYNCs or C_EPs in the scope and compare signatures. If the
// signatures are the same, copy the codeblock from this routine and dispose

function = self.current_domain_function;
message = self.current_executable_property;

if ( not_empty function )
  select many s_syncs related by function->PE_PE[R8001]->EP_PKG[R8000]->PE_PE[R8000]->S_SYNC[R8001];
  for each s_sync in s_syncs
    if ( s_sync != function and self.Function_getSignature( s_sync:function ) == self.Function_getSignature( s_sync:s_sync ) )
      // copy over the codeblock
      s_sync.Action_Semantics_internal = function.Action_Semantics_internal;
      // dispose corresponding interface message
      self.ExecutableProperty_dispose( c_ep:message );
      // dispose the function
      self.Function_dispose( s_sync:function );
      break;
    end if;
  end for;
elif ( not_empty message )
select many c_eps related by message->C_I[R4003]->C_EP[R4003];
  for each c_ep in c_eps
    if ( c_ep != message and self.ExecutableProperty_getSignature( c_ep:message ) == self.ExecutableProperty_getSignature( c_ep:c_ep ) )

      // copy over the codeblock
      string = message.Descrip;
      start_index = STRING::indexof( haystack:string, needle:"<codeblock>" );
      end_index = STRING::indexof( haystack:string, needle:"</codeblock>" );
      message_cb = "";
      if ( -1 != start_index and -1 != end_index )
        message_cb = "codeblock:" + STRING::substr( s:string, begin:start_index+11, end:end_index ) + "\n";
      end if;

      if ( self.processingProject )	// if we are processing a project, there will be no spr_ro
        c_ep.Descrip = message_cb;
      else
		select any spr_ro related by c_ep->SPR_REP[R4500]->SPR_RO[R4502];
		if ( not_empty spr_ro )
		  spr_ro.Action_Semantics_internal = spr_ro.Action_Semantics_internal + message_cb;
		end if;
  	  end if;
      // dispose interface message
      self.ExecutableProperty_dispose( c_ep:message );
      
      // update current 
      self.current_executable_property = c_ep;
      break;
    end if;
  end for;
end if;',
	1,
	'',
	"85af0f68-95cb-4732-9da6-e249f3041ef5");
INSERT INTO O_TFR
	VALUES ("676154e8-5428-4e24-ab8c-e663a7b91b45",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Function_getSignature',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'/**
 *  Return a string representation of this functions signature
 *  Heavily adapted from OOAofOOA - LPS
 */
s_sync = param.s_sync;
 
signature = "";

// Get return type
select one returntype related by s_sync->S_DT[R25];
signature = signature + returntype.Name + " ";
 
// Get name
signature = signature + s_sync.Name;

// Get parameters
// Get the first parameter.
select any parameter related by s_sync->S_SPARM[R24];
first_param = parameter;
while ( not_empty parameter )
  first_param = parameter;
  select one parameter related by parameter->S_SPARM[R54.''succeeds''];
end while;

if( not_empty first_param )
  signature = signature + "(";
end if;
separator = "";
parameter = first_param;
while ( not_empty parameter )
  select one type related by parameter->S_DT[R26];
  signature = signature + separator + type.Name;
  separator = ", ";
  select one parameter related by parameter->S_SPARM[R54.''precedes''];
end while;
if( not_empty first_param )
  signature = signature + ")";
end if;
return signature;',
	1,
	'',
	"46562546-0255-4276-b15c-afac908ce778");
INSERT INTO O_TPARM
	VALUES ("c970a691-f127-490f-8d1e-eb1db1604940",
	"676154e8-5428-4e24-ab8c-e663a7b91b45",
	's_sync',
	"60690409-5a69-45db-896b-5a63a9103c18",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("46562546-0255-4276-b15c-afac908ce778",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Function_dispose',
	'The dispose operation for this class.  It also disposes of the associated Function in Package.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Copied from OOAofOOA - LPS
s_sync = param.s_sync;

// Domain Subsystem
select one pe related by s_sync->PE_PE[R8001];
if(not_empty pe)
  // PE_PE.dispose() will call back into this function at which time the
  // rest of the activity will execute.
  self.PackageableElement_dispose(pe_pe:pe);
  return;
end if;
select many fparms related by s_sync->S_SPARM[R24];
for each fparm in fparms
  self.FunctionParameter_dispose(s_sparm:fparm);
end for;
select one dt related by s_sync->S_DT[R25];
unrelate s_sync from dt across R25;
//
//Body Subsystem
/*
select one body related by s_sync->ACT_FNB[R695]->ACT_ACT[R698];
if (not_empty body)
  body.dispose();
end if;
//
// Invocation Subsystem
select many invs related by s_sync->ACT_FNC[R675];
for each inv in invs
  unrelate s_sync from inv across R675;
end for;
//
// Value Subsystem
select many fvs related by s_sync->V_FNV[R827];
for each fv in fvs
  unrelate s_sync from fv across R827;
end for;
//
// Wiring Subsystem
select many aws related by s_sync->S_AW[R3201];
for each aw in aws
  unrelate s_sync from aw across R3201;
end for;
// for each message that this function
// is associated with
select many fms related by s_sync->MSG_F[R1010];
for each fm in fms
  select one message related by fm->MSG_SM[R1020];
  message.unformalize();
end for;
*/
select many dims related by s_sync->S_DIM[R51];
for each dim in dims
  unrelate s_sync from dim across R51;
  delete object instance dim;
end for;
//
// Finally delete s_sync
delete object instance s_sync;',
	1,
	'',
	"fb586e84-fe0c-437d-a171-fa3b7388d3b6");
INSERT INTO O_TPARM
	VALUES ("7b27431c-f67a-462e-ae46-9037e1f0681c",
	"46562546-0255-4276-b15c-afac908ce778",
	's_sync',
	"60690409-5a69-45db-896b-5a63a9103c18",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("4674a4f2-d6c3-40d5-a1ce-972563d69338",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'PackageableElement_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Copied from OOAofOOA - LPS
// Only kept bits for deleting things we need to deleting possible same named activities

// Packageable Element.dispose()
pe_pe = param.pe_pe;
 
select many ele_vis_links related by pe_pe->PE_VIS[R8002];
for each ele_vis_link in ele_vis_links
  select one pkg related by ele_vis_link->EP_PKG[R8002];
  unrelate pe_pe from pkg across R8002 using ele_vis_link;
  select one searchResultset related by ele_vis_link->PE_SRS[R8006];
  unrelate ele_vis_link from searchResultset across R8006;  
  delete object instance ele_vis_link;
end for;
select many com_vis_links related by pe_pe->PE_CVS[R8004];
for each com_vis_link in com_vis_links
  select one component related by com_vis_link->C_C[R8004];
  unrelate pe_pe from component across R8004 using com_vis_link;
  delete object instance com_vis_link;
end for;
/*
select one modelClass related by pe_pe->O_OBJ[R8001];
if not_empty modelClass
  unrelate modelClass from pe_pe across R8001;
  modelClass.dispose();
end if;
select one dt related by pe_pe->S_DT[R8001];
if not_empty dt
  // note we do not tear down this association
  // as the S_DT.dispose() call requires it to
  // be setup, it will tear it down
  dt.dispose();
end if;
select one intPart related by pe_pe->SQ_P[R8001];
if not_empty intPart
  unrelate intPart from pe_pe across R8001;
  intPart.dispose();
end if;
select one ucAssoc related by pe_pe->UC_UCA[R8001];
if not_empty ucAssoc
  unrelate ucAssoc from pe_pe across R8001;
  ucAssoc.dispose();
end if;
select one actNode related by pe_pe->A_N[R8001];
if not_empty actNode
  unrelate actNode from pe_pe across R8001;
  actNode.dispose();
end if;
select one comp related by pe_pe->C_C[R8001];
if not_empty comp
  unrelate comp from pe_pe across R8001;
  comp.dispose();
end if;
select one ic related by pe_pe->CL_IC[R8001];
if not_empty ic
  unrelate ic from pe_pe across R8001;
  ic.dispose();
end if;
select one interface related by pe_pe->C_I[R8001];
if not_empty interface
  unrelate interface from pe_pe across R8001;
  interface.dispose();
end if;
select one pkg related by pe_pe->EP_PKG[R8001];
if not_empty pkg
  unrelate pkg from pe_pe across R8001;
  pkg.dispose();
end if;
select one csp related by pe_pe->CNST_CSP[R8001];
if not_empty csp
  unrelate csp from pe_pe across R8001;
  csp.dispose();
end if;
select one ap related by pe_pe->A_AP[R8001];
if not_empty ap
  unrelate ap from pe_pe across R8001;
  ap.dispose();
end if;
select one edge related by pe_pe->A_E[R8001];
if not_empty edge
  unrelate edge from pe_pe across R8001;
  edge.dispose();
end if;
select one msg related by pe_pe->MSG_M[R8001];
if not_empty msg
  unrelate msg from pe_pe across R8001;
  msg.dispose();
end if;
select one rel related by pe_pe->R_REL[R8001];
if not_empty rel
  unrelate rel from pe_pe across R8001;
  rel.dispose();
end if;
select one icomp related by pe_pe->O_IOBJ[R8001];
if not_empty icomp
  unrelate icomp from pe_pe across R8001;
  icomp.dispose();
end if;
*/
select one sync related by pe_pe->S_SYNC[R8001];
if not_empty sync
  unrelate sync from pe_pe across R8001;
  self.Function_dispose( s_sync:sync );
end if;
/*
select one ee related by pe_pe->S_EE[R8001];
if not_empty ee
  unrelate ee from pe_pe across R8001;
  ee.dispose();
end if;
select one sat related by pe_pe->C_SF[R8001];
if not_empty sat
  unrelate sat from pe_pe across R8001;
  sat.dispose();
end if;
select one delg related by pe_pe->C_DG[R8001];
if not_empty delg
  unrelate delg from pe_pe across R8001;
  delg.dispose();
end if;
*/
select many bodyInElements related by pe_pe->ACT_BIE[R640];
for each bie in bodyInElements
  select one body related by bie->ACT_ACT[R640];
  unrelate pe_pe from body across R640 using bie;
  delete object instance bie;
end for;

select one package related by pe_pe->EP_PKG[R8000];
if not_empty package
  unrelate pe_pe from package across R8000 ;
end if;

select one component related by pe_pe->C_C[R8003];
if(not_empty component)
  unrelate pe_pe from component across R8003;
end if;

select many elemInSystems related by pe_pe->G_EIS[R9100];
for each elemInSystem in elemInSystems
  select one system related by elemInSystem->S_SYS[R9100];
  unrelate pe_pe from system across R9100 using elemInSystem;
  delete object instance elemInSystem;
end for;

delete object instance pe_pe;',
	1,
	'',
	"3ae49a72-f7e0-4a00-aaad-f0574cb325be");
INSERT INTO O_TPARM
	VALUES ("cd4a9aa0-b911-4794-a6a9-1d0797e5f2cf",
	"4674a4f2-d6c3-40d5-a1ce-972563d69338",
	'pe_pe',
	"e988e223-9ca4-4b6f-a675-001eefe3aa24",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("93050450-3368-4788-ba8d-1955efd49ed1",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'FunctionParameter_dispose',
	'The dispose operation for this class.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Copied from OOAofOOA - LPS
// Function Parameter.dispose()
//
s_sparm = param.s_sparm;

// Domain Subsystem
select one func related by s_sparm->S_SYNC[R24];
unrelate s_sparm from func across R24;
select one dt related by s_sparm->S_DT[R26];
unrelate s_sparm from dt across R26;
//
select one successor related by s_sparm->S_SPARM[R54.''precedes''];
select one predecessor related by s_sparm->S_SPARM[R54.''succeeds''];
if (not empty successor)
  unrelate s_sparm from successor across R54.''precedes'';
end if;
if (not empty predecessor)
  unrelate s_sparm from predecessor across R54.''succeeds'';
end if;
if (not_empty successor and not_empty predecessor)
  relate successor to predecessor across R54.''succeeds'';
end if;
/*
//
// Value Subsystem
select many pvs related by s_sparm->V_PVL[R832];
for each pv in pvs
  unrelate s_sparm from pv across R832;
end for;
//
// Local Subsystem
select many lcls related by s_sparm->L_LCL[R3007];
for each lcl in lcls
  unrelate s_sparm from lcl across R3007;
  lcl.dispose();
end for;
// dispose each message argument
// associated with this parm
select many args related by s_sparm->MSG_FA[R1016];
for each arg in args
  arg.dispose();
end for;
*/
select many dims related by s_sparm->S_DIM[R52];
for each dim in dims
  unrelate s_sparm from dim across R52;
  delete object instance dim;
end for;
//
// Finally, delete s_sparm
delete object instance s_sparm;',
	1,
	'',
	"175697c1-feb8-4ef7-b9f4-1b38b7e692f6");
INSERT INTO O_TPARM
	VALUES ("6d20b7e1-f789-405d-a769-80b9b7549aa3",
	"93050450-3368-4788-ba8d-1955efd49ed1",
	's_sparm',
	"a01a1995-8ff8-44fe-abb1-b11213d98016",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("c701802d-b68a-4783-ba95-ea711cd074a7",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ExecutableProperty_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// copied from the OOAofOOA - LPS
c_ep = param.c_ep;

select one asynchronousSignal related by c_ep->C_AS[R4004];
select one synchronousSignal related by c_ep->C_IO[R4004];
if(not_empty asynchronousSignal)
  unrelate c_ep from asynchronousSignal across R4004;
  self.InterfaceSignal_dispose( c_as:asynchronousSignal );
elif(not_empty synchronousSignal)
  unrelate c_ep from synchronousSignal across R4004;
  self.InterfaceOperation_dispose( c_io:synchronousSignal );
end if;
select many parms related by c_ep->C_PP[R4006];
for each parm in parms
  unrelate c_ep from parm across R4006;
  self.PropertyParameter_dispose( c_pp:parm );
end for;
select one interface related by c_ep->C_I[R4003];
if(not_empty interface)
  unrelate c_ep from interface across R4003;
end if;
delete object instance c_ep;',
	1,
	'',
	"c96782bb-4ef4-46d8-bbb5-0989d88ef9b7");
INSERT INTO O_TPARM
	VALUES ("0c74c4dd-3a42-4c6b-b397-c6800aa0c901",
	"c701802d-b68a-4783-ba95-ea711cd074a7",
	'c_ep',
	"5441230d-b4d6-495f-9e87-84acf5819d26",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("c265e2d5-cf12-4883-bb00-198e83377ceb",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'InterfaceSignal_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// copied from the OOAofOOA - LPS
c_as = param.c_as;

select one ep related by c_as->C_EP[R4004];
if(not_empty ep)
  self.ExecutableProperty_dispose( c_ep:ep );
end if;
select one successor related by c_as->C_AS[R4020.''precedes''];
select one predecessor related by c_as->C_AS[R4020.''succeeds''];
if (not empty successor)
  unrelate c_as from successor across R4020.''precedes'';
end if;
if (not empty predecessor)
  unrelate c_as from predecessor across R4020.''succeeds'';
end if;
if (not_empty successor and not_empty predecessor)
  relate successor to predecessor across R4020.''succeeds'';
end if;
/*
select many msgs related by c_as->MSG_SIG[R1021]->MSG_AM[R1019]->MSG_M[R1018];
for each msg in msgs
  msg.dispose();
end for;
*/
delete object instance c_as;',
	1,
	'',
	"dc1b8351-2cfd-4870-b038-21d1052f3c05");
INSERT INTO O_TPARM
	VALUES ("8170dbb7-8a8c-4ba5-9465-5d486979406b",
	"c265e2d5-cf12-4883-bb00-198e83377ceb",
	'c_as',
	"50196fb3-a630-4359-b9d2-adf4b3946cbc",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("50196fb3-a630-4359-b9d2-adf4b3946cbc",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Interface Signal>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Component/Component.xtuml');
INSERT INTO O_TFR
	VALUES ("20563ecc-c594-48b2-ab21-316489af93a0",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'InterfaceOperation_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// copied from the OOAofOOA - LPS
c_io = param.c_io;

select one dt related by c_io->S_DT[R4008];
if(not_empty dt)
  unrelate c_io from dt across R4008;
end if;
select one ep related by c_io->C_EP[R4004];
if(not_empty ep)
  self.ExecutableProperty_dispose( c_ep:ep );
end if;
select one successor related by c_io->C_IO[R4019.''precedes''];
select one predecessor related by c_io->C_IO[R4019.''succeeds''];
if (not empty successor)
  unrelate c_io from successor across R4019.''precedes'';
end if;
if (not empty predecessor)
  unrelate c_io from predecessor across R4019.''succeeds'';
end if;
if (not_empty successor and not_empty predecessor)
  relate successor to predecessor across R4019.''succeeds'';
end if;
/*
select many msgs related by c_io->MSG_IOP[R1022]->MSG_SM[R1020]->MSG_M[R1018];
for each msg in msgs
  msg.dispose();
end for;
*/
select many dims related by c_io->S_DIM[R4018];
for each dim in dims
  unrelate c_io from dim across R4018;
  delete object instance dim;
end for;
delete object instance c_io;',
	1,
	'',
	"0526c2c0-d3b5-4cf5-b9d0-2e6496657123");
INSERT INTO O_TPARM
	VALUES ("fadd68e8-8ddb-4977-ae47-ac32f360e089",
	"20563ecc-c594-48b2-ab21-316489af93a0",
	'c_io',
	"4e59980a-6ac2-4a28-8ad8-7f1ada83c53a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("266785e6-6f30-49ff-9b55-a610912a3a66",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'PropertyParameter_dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// copied from the OOAofOOA - LPS
c_pp = param.c_pp;

select one dt related by c_pp->S_DT[R4007];
unrelate c_pp from dt across R4007;
select one ep related by c_pp->C_EP[R4006];
if(not_empty ep)
  unrelate c_pp from ep across R4006;
end if;
select one successor related by c_pp->C_PP[R4021.''precedes''];
select one predecessor related by c_pp->C_PP[R4021.''succeeds''];
if (not empty successor)
  unrelate c_pp from successor across R4021.''precedes'';
end if;
if (not empty predecessor)
  unrelate c_pp from predecessor across R4021.''succeeds'';
end if;
if (not_empty successor and not_empty predecessor)
  relate successor to predecessor across R4021.''succeeds'';
end if;
/*
select many parmVals related by c_pp->V_PVL[R843];
for each pvl in parmVals
  unrelate c_pp from pvl across R843;
end for;
select many evtParmRefs related by c_pp->V_EPR[R847];
for each evtParmRef in evtParmRefs
  evtParmRef.dispose();
end for;
*/
select many dims related by c_pp->S_DIM[R4017];
for each dim in dims
  unrelate c_pp from dim across R4017;
  delete object instance dim;
end for;
/*
select many evtDis related by c_pp->I_DIV[R2956];
for each evtDi in evtDis
  evtDi.dispose();
end for;
select many local_vals related by c_pp->L_LVL[R3017];
for each local_val in local_vals
  unrelate local_val from c_pp across R3017;
  local_val.dispose();
end for;
select many participationArgs related by c_pp->MSG_EPA[R1023];
for each pa in participationArgs
  unrelate c_pp from pa across R1023;
  pa.dispose();
end for;
*/
delete object instance c_pp;',
	1,
	'',
	"806a97a3-4a9d-4fe2-994e-8b5705b455fc");
INSERT INTO O_TPARM
	VALUES ("2288d411-bc1e-4277-9477-38f7f3403a9c",
	"266785e6-6f30-49ff-9b55-a610912a3a66",
	'c_pp',
	"4d4c0ef2-2520-4dbe-8096-a56393ea3f85",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("175697c1-feb8-4ef7-b9f4-1b38b7e692f6",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'ExecutableProperty_getSignature',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'/**
 *  Return a string representation of this functions signature
 *  Heavily adapted from OOAofOOA - LPS
 */
c_ep = param.c_ep;
 
signature = "";

// Get return type
select one returntype related by c_ep->C_IO[R4004]->S_DT[R4008];
signature = signature + returntype.Name + " ";
 
// Get name
signature = signature + c_ep.Name;

// Get parameters
// Get the first parameter.
select any parameter related by c_ep->C_PP[R4006];
first_param = parameter;
while ( not_empty parameter )
  first_param = parameter;
  select one parameter related by parameter->C_PP[R4021.''succeeds''];
end while;

if( not_empty first_param )
  signature = signature + "(";
end if;
separator = "";
parameter = first_param;
while ( not_empty parameter )
  select one type related by parameter->S_DT[R4007];
  signature = signature + separator + type.Name;
  separator = ", ";
  select one parameter related by parameter->C_PP[R4021.''precedes''];
end while;
if( not_empty first_param )
  signature = signature + ")";
end if;
return signature;',
	1,
	'',
	"c701802d-b68a-4783-ba95-ea711cd074a7");
INSERT INTO O_TPARM
	VALUES ("9e46bc18-9b31-4deb-aa1e-63fa1fef39cc",
	"175697c1-feb8-4ef7-b9f4-1b38b7e692f6",
	'c_ep',
	"5441230d-b4d6-495f-9e87-84acf5819d26",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("85af0f68-95cb-4732-9da6-e249f3041ef5",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'mergeDuplicateOperations',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// search for all O_TFRs in the scope and compare signatures. If the
// signatures are the same, copy the codeblock from this operation and
// dispose

op = self.current_class_op;

if ( not_empty op )
  select many o_tfrs related by op->O_OBJ[R115]->O_TFR[R115];
  for each o_tfr in o_tfrs 
    if ( o_tfr != op and self.Operation_getSignature( o_tfr:op ) == self.Operation_getSignature( o_tfr:o_tfr ) )
      // copy over the codeblock
      o_tfr.Action_Semantics_internal = op.Action_Semantics_internal;
      // dispose the operation
      self.Operation_dispose( o_tfr:op );
      break;
    end if;
  end for;
end if;',
	1,
	'',
	"46927d95-5219-4409-9ecf-2a4bde2444bf");
INSERT INTO O_TFR
	VALUES ("59c4d100-77b1-44d1-b053-5e51a300f2f4",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Operation_getSignature',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'/**
 *  Return a string representation of this functions signature
 *  Heavily adapted from OOAofOOA - LPS
 */
o_tfr = param.o_tfr;

signature = "";

// Get return type
select one returntype related by o_tfr->S_DT[R116];
signature = signature + returntype.Name + " ";
 
// Get name
signature = signature + o_tfr.Name;

// Get parameters
// Get the first parameter.
select any parameter related by o_tfr->O_TPARM[R117];
first_param = parameter;
while ( not_empty parameter )
  first_param = parameter;
  select one parameter related by parameter->O_TPARM[R124.''succeeds''];
end while;

if( not_empty first_param )
  signature = signature + "(";
end if;
separator = "";
parameter = first_param;
while ( not_empty parameter )
  select one type related by parameter->S_DT[R118];
  signature = signature + separator + type.Name;
  separator = ", ";
  select one parameter related by parameter->O_TPARM[R124.''precedes''];
end while;
if( not_empty first_param )
  signature = signature + ")";
end if;
return signature;',
	1,
	'',
	"8ba7d72f-ae8a-4cdd-9e8c-3461b64fdcde");
INSERT INTO O_TPARM
	VALUES ("a2be2d1c-f3ac-4c3d-be1a-3967b4ba1749",
	"59c4d100-77b1-44d1-b053-5e51a300f2f4",
	'o_tfr',
	"5cb6d426-f094-4cad-8cdb-b16506c9f2e6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("8ba7d72f-ae8a-4cdd-9e8c-3461b64fdcde",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Operation_dispose',
	'Dispose this Operation.
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// copied from the OOAofOOA - LPS
o_tfr = param.o_tfr;

// Subsytem Subsystem
select one myClass related by o_tfr->O_OBJ[R115];
unrelate o_tfr from myClass across R115;
//
select one successor related by o_tfr->O_TFR[R125.''precedes''];
select one predecessor related by o_tfr->O_TFR[R125.''succeeds''];
if (not empty successor)
  unrelate o_tfr from successor across R125.''precedes'';
end if;
if (not empty predecessor)
  unrelate o_tfr from predecessor across R125.''succeeds'';
end if;
if (not_empty successor and not_empty predecessor)
  relate successor to predecessor across R125.''succeeds'';
end if;
//
select one dt related by o_tfr->S_DT[R116];
unrelate o_tfr from dt across R116;
select many oparms related by o_tfr->O_TPARM[R117];
for each oparm in oparms
  self.OperationParameter_dispose( o_tparm:oparm );
end for;
/*
//
// Body Subsystem
select one body related by o_tfr->ACT_OPB[R696]->ACT_ACT[R698];
if (not_empty body)
  body.dispose();
end if;
//
// Invocation Subsystem
select many invs related by o_tfr->ACT_TFM[R673];
for each inv in invs
  unrelate o_tfr from inv across R673;
end for;
//
// Value Subsystem
select many oprVals related by o_tfr->V_TRV[R829];
for each oprVal in oprVals
  unrelate o_tfr from oprVal across R829;
end for;
// for each message that this operation
// is associated with
select many oms related by o_tfr->MSG_O[R1011];
for each om in oms
  select one message related by om->MSG_SM[R1020];
  message.unformalize();
end for;
*/
select many dims related by o_tfr->S_DIM[R122];
for each dim in dims
  unrelate o_tfr from dim across R122;
  delete object instance dim;
end for;
//
// Finally, delete o_tfr
delete object instance o_tfr;',
	1,
	'',
	"fa586bd2-1a62-4b97-a659-eb8c7baa156b");
INSERT INTO O_TPARM
	VALUES ("7e0f6479-b469-4ce6-970e-583dcf3450a5",
	"8ba7d72f-ae8a-4cdd-9e8c-3461b64fdcde",
	'o_tfr',
	"5cb6d426-f094-4cad-8cdb-b16506c9f2e6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("0a620c79-b06e-461b-a454-d7457e58a1a0",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'OperationParameter_dispose',
	'Dispose this Operation Parameter.
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// copied from the OOAofOOA - LPS
o_tparm = param.o_tparm;

// Operation Parameter.dispose()
/*
//
// Value Subsystem
select many pvs related by o_tparm->V_PVL[R833];
for each pv in pvs
  unrelate o_tparm from pv across R833;
end for;
*/
//
// Subsystem Subsystem
select one operation related by o_tparm->O_TFR[R117];
unrelate o_tparm from operation across R117;
select one dt related by o_tparm->S_DT[R118];
unrelate o_tparm from dt across R118;
//
select one successor related by o_tparm->O_TPARM[R124.''precedes''];
select one predecessor related by o_tparm->O_TPARM[R124.''succeeds''];
if (not empty successor)
  unrelate o_tparm from successor across R124.''precedes'';
end if;
if (not empty predecessor)
  unrelate o_tparm from predecessor across R124.''succeeds'';
end if;
if (not_empty successor and not_empty predecessor)
  relate successor to predecessor across R124.''succeeds'';
end if;
/*
// dispose each message argument
// associated with this parm
select many args related by o_tparm->MSG_OA[R1015];
for each arg in args
  arg.dispose();
end for;
//
// Local Subsystem
select many lcls related by o_tparm->L_LCL[R3008];
for each lcl in lcls
  unrelate o_tparm from lcl across R3008;
  lcl.dispose();
end for;
*/
select many dims related by o_tparm->S_DIM[R121];
for each dim in dims
  unrelate o_tparm from dim across R121;
  delete object instance dim;
end for;
//
// Finally delete o_tparm
delete object instance o_tparm;',
	1,
	'',
	"0fbf0e7d-26c3-4c87-b4fc-c9bf58b1656e");
INSERT INTO O_TPARM
	VALUES ("1e586f2f-10b0-4bd5-886c-82f5b0b189ef",
	"0a620c79-b06e-461b-a454-d7457e58a1a0",
	'o_tparm',
	"eeb98cba-1a0c-4d36-80f1-c0199a301aaf",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("6bbce93d-eacd-45a2-b774-1aec0c108f3e",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'transformException',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// If the exception visibility is public, put it in the package of shared public data.  If private, put it inside the component.
lib_pkg = self.lib_pkg;
select any types_pkg related by lib_pkg->PE_PE[R8000]->EP_PKG[R8001] where (selected.Name == "Shared");

if ( "private" == param.visibility )
  // Get the "types" package in this component
  current_component = self.current_component;
  select any types_pkg related by current_component->PE_PE[R8003]->EP_PKG[R8001] where (selected.Name == "types");

  // Create the types package if it doesn''t already exist
  if ( empty types_pkg )
    types_pkg = self.Component_newPackage(c_c:current_component, pkg_name:"types");
  end if;
end if;

// See if exception already exists
select any s_exp related by types_pkg->PE_PE[R8000]->S_EXP[R8001] where (selected.Name == param.name);

if ( empty s_exp )
  // The exception doesn''t already exist, create it
  s_exp = self.Package_newException(ep_pkg:types_pkg, name:param.name);
end if;

// cache the exception
self.current_exp = s_exp;
',
	1,
	'',
	"3ed1f3e8-afb7-40dc-a2d2-2caac1c499d4");
INSERT INTO O_TPARM
	VALUES ("29158a1d-3422-44c2-b602-ed47ca57eadd",
	"6bbce93d-eacd-45a2-b774-1aec0c108f3e",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("e5e62d0e-dd06-44de-9991-5cb7fd4009b4",
	"6bbce93d-eacd-45a2-b774-1aec0c108f3e",
	'visibility',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"29158a1d-3422-44c2-b602-ed47ca57eadd",
	'');
INSERT INTO O_TFR
	VALUES ("359c2979-2cde-487a-96f6-47f31e02b6cb",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	'Package_newException',
	'',
	"47b02a5f-ecfb-49c6-bf1a-6e4a2ff6de02",
	1,
	'ep_pkg = param.ep_pkg;
name = param.name;

create object instance exp of S_EXP;
// create Packageable Element supertype and hook up to this package.
create object instance pe of PE_PE;
relate exp to pe across R8001;
relate pe to ep_pkg across R8000;
pe.type = ElementTypeConstants::EXCEPTION;
self.PackageableElement_initialize(pe_pe:pe);
exp.Name = name;

return exp;',
	1,
	'',
	"dff68b05-f692-4f7e-8745-e96def65ae8a");
INSERT INTO O_TPARM
	VALUES ("912eb408-5d0f-4901-bd62-967f9eba6f23",
	"359c2979-2cde-487a-96f6-47f31e02b6cb",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("14603252-f841-42e5-817a-79b944c07f9d",
	"359c2979-2cde-487a-96f6-47f31e02b6cb",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"912eb408-5d0f-4901-bd62-967f9eba6f23",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("47b02a5f-ecfb-49c6-bf1a-6e4a2ff6de02",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Exception>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Domain/Domain.xtuml');
INSERT INTO O_NBATTR
	VALUES ("d14202df-9ea9-4589-a309-406b4ed0b070",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("d14202df-9ea9-4589-a309-406b4ed0b070",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("d14202df-9ea9-4589-a309-406b4ed0b070",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"a87535cf-69f9-40c1-89b7-ec610331473e",
	'lib_pkg',
	'',
	'',
	'lib_pkg',
	0,
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a87535cf-69f9-40c1-89b7-ec610331473e",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("a87535cf-69f9-40c1-89b7-ec610331473e",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("a87535cf-69f9-40c1-89b7-ec610331473e",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"00000000-0000-0000-0000-000000000000",
	'current_sys',
	'',
	'',
	'current_sys',
	0,
	"4b886601-55ee-4d42-a1f8-f5c45d459db2",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("619f4747-9795-4d99-a5ac-563d99ffbda4",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("619f4747-9795-4d99-a5ac-563d99ffbda4",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("619f4747-9795-4d99-a5ac-563d99ffbda4",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"ec1c00cb-7e3e-4cb0-890b-6dbb1db4f6fd",
	'current_component',
	'',
	'',
	'current_component',
	0,
	"67f93d18-1045-4c6c-b0d5-a692023c471c",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("628299ab-4589-4cfb-9c7d-c61c627dd3c1",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("628299ab-4589-4cfb-9c7d-c61c627dd3c1",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("628299ab-4589-4cfb-9c7d-c61c627dd3c1",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"6139bb3c-17ee-4d48-8ec9-bc73c62c2715",
	'current_class',
	'',
	'',
	'current_class',
	0,
	"63f4ff99-f127-443b-a678-30ace41da702",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6139bb3c-17ee-4d48-8ec9-bc73c62c2715",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("6139bb3c-17ee-4d48-8ec9-bc73c62c2715",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("6139bb3c-17ee-4d48-8ec9-bc73c62c2715",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"905dcf80-14b6-447f-a4a5-f1373afcb527",
	'current_attribute',
	'',
	'',
	'current_attribute',
	0,
	"579b8247-e153-481d-8926-384cdc722464",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ec1c00cb-7e3e-4cb0-890b-6dbb1db4f6fd",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("ec1c00cb-7e3e-4cb0-890b-6dbb1db4f6fd",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("ec1c00cb-7e3e-4cb0-890b-6dbb1db4f6fd",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"628299ab-4589-4cfb-9c7d-c61c627dd3c1",
	'current_class_op',
	'',
	'',
	'current_class_op',
	0,
	"5cb6d426-f094-4cad-8cdb-b16506c9f2e6",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("905dcf80-14b6-447f-a4a5-f1373afcb527",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("905dcf80-14b6-447f-a4a5-f1373afcb527",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("905dcf80-14b6-447f-a4a5-f1373afcb527",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"d14202df-9ea9-4589-a309-406b4ed0b070",
	'systypes_pkg',
	'',
	'',
	'systypes_pkg',
	0,
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("86e22f6d-21e0-4640-9a87-a4f66244ee02",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("86e22f6d-21e0-4640-9a87-a4f66244ee02",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("86e22f6d-21e0-4640-9a87-a4f66244ee02",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"cb5b9a80-ade2-420b-9945-3145ce091c84",
	'processingIdentifier',
	'',
	'',
	'processingIdentifier',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("45769a88-3b54-414b-8e30-d357063e4f0f",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("45769a88-3b54-414b-8e30-d357063e4f0f",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("45769a88-3b54-414b-8e30-d357063e4f0f",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"86e22f6d-21e0-4640-9a87-a4f66244ee02",
	'processingISM',
	'',
	'',
	'processingISM',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("b893e803-e1ba-4494-a95d-d0ff48b1700c",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("b893e803-e1ba-4494-a95d-d0ff48b1700c",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("b893e803-e1ba-4494-a95d-d0ff48b1700c",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"619f4747-9795-4d99-a5ac-563d99ffbda4",
	'current_domain_function',
	'',
	'',
	'current_domain_function',
	0,
	"60690409-5a69-45db-896b-5a63a9103c18",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a3e129f2-38f6-47c9-a46a-4043ca376af6",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("a3e129f2-38f6-47c9-a46a-4043ca376af6",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("a3e129f2-38f6-47c9-a46a-4043ca376af6",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"b893e803-e1ba-4494-a95d-d0ff48b1700c",
	'current_function_param',
	'',
	'',
	'current_function_param',
	0,
	"a01a1995-8ff8-44fe-abb1-b11213d98016",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("639dfebf-4ad6-4c83-a9ff-7f599558ec59",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("639dfebf-4ad6-4c83-a9ff-7f599558ec59",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("639dfebf-4ad6-4c83-a9ff-7f599558ec59",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"33d45b78-9c27-4259-8d26-cadfd95a4313",
	'current_operation_param',
	'',
	'',
	'current_operation_param',
	0,
	"eeb98cba-1a0c-4d36-80f1-c0199a301aaf",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("7b4c3a78-f304-4264-baa7-b5a804fc511b",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("7b4c3a78-f304-4264-baa7-b5a804fc511b",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("7b4c3a78-f304-4264-baa7-b5a804fc511b",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"cca5c62d-a419-4247-8bd7-2e76b7cdf688",
	'current_rel',
	'',
	'',
	'current_rel',
	0,
	"adf5f27c-f258-4227-9506-a77e056789cf",
	'',
	'');
INSERT INTO S_DT_PROXY
	VALUES ("adf5f27c-f258-4227-9506-a77e056789cf",
	"00000000-0000-0000-0000-000000000000",
	'relationship_data',
	'',
	'',
	'../masl2xtuml.xtuml');
INSERT INTO O_NBATTR
	VALUES ("cb5b9a80-ade2-420b-9945-3145ce091c84",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("cb5b9a80-ade2-420b-9945-3145ce091c84",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("cb5b9a80-ade2-420b-9945-3145ce091c84",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"7b4c3a78-f304-4264-baa7-b5a804fc511b",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ce86dade-b263-4245-8001-19dd4123f4f9",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("cca5c62d-a419-4247-8bd7-2e76b7cdf688",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("cca5c62d-a419-4247-8bd7-2e76b7cdf688",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("cca5c62d-a419-4247-8bd7-2e76b7cdf688",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"639dfebf-4ad6-4c83-a9ff-7f599558ec59",
	'current_pragma',
	'',
	'',
	'current_pragma',
	0,
	"150bb385-2132-4200-960b-2be5599a2b59",
	'',
	'');
INSERT INTO S_DT_PROXY
	VALUES ("150bb385-2132-4200-960b-2be5599a2b59",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<ooapragma>',
	'',
	'',
	'../../marking/marking.xtuml');
INSERT INTO O_NBATTR
	VALUES ("33d45b78-9c27-4259-8d26-cadfd95a4313",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("33d45b78-9c27-4259-8d26-cadfd95a4313",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("33d45b78-9c27-4259-8d26-cadfd95a4313",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"23255510-3c96-4798-b066-ebb7dbb166ea",
	'current_interface',
	'',
	'',
	'current_interface',
	0,
	"80698720-cc57-44ba-8aa5-600c524db338",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4dd58eee-77a6-4acc-873a-5c545a0701cc",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("4dd58eee-77a6-4acc-873a-5c545a0701cc",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("4dd58eee-77a6-4acc-873a-5c545a0701cc",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"45769a88-3b54-414b-8e30-d357063e4f0f",
	'current_type',
	'',
	'',
	'current_type',
	0,
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("eaa75738-d8e2-424e-bc3a-80752318351b",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("eaa75738-d8e2-424e-bc3a-80752318351b",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("eaa75738-d8e2-424e-bc3a-80752318351b",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"4dd58eee-77a6-4acc-873a-5c545a0701cc",
	'current_event',
	'',
	'',
	'current_event',
	0,
	"33eebb24-8068-410b-a905-37c4e5cc2fdb",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("66a9c427-8b7f-48ab-9086-7d022a526425",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("66a9c427-8b7f-48ab-9086-7d022a526425",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("66a9c427-8b7f-48ab-9086-7d022a526425",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"eaa75738-d8e2-424e-bc3a-80752318351b",
	'current_executable_property',
	'',
	'',
	'current_executable_property',
	0,
	"5441230d-b4d6-495f-9e87-84acf5819d26",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6c59590e-567f-49e4-85f9-1e85bdcc0c15",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("6c59590e-567f-49e4-85f9-1e85bdcc0c15",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("6c59590e-567f-49e4-85f9-1e85bdcc0c15",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"66a9c427-8b7f-48ab-9086-7d022a526425",
	'processingProject',
	'',
	'',
	'processingProject',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("23255510-3c96-4798-b066-ebb7dbb166ea",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("23255510-3c96-4798-b066-ebb7dbb166ea",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("23255510-3c96-4798-b066-ebb7dbb166ea",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"a3e129f2-38f6-47c9-a46a-4043ca376af6",
	'current_imported_component',
	'',
	'',
	'current_imported_component',
	0,
	"4bf19d7e-1bcd-469a-b056-4523dd59dc1d",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("553f8cea-b8b6-402d-9dc1-672c1ebfc74e",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("553f8cea-b8b6-402d-9dc1-672c1ebfc74e",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("553f8cea-b8b6-402d-9dc1-672c1ebfc74e",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"6c59590e-567f-49e4-85f9-1e85bdcc0c15",
	'current_routine_info',
	'',
	'',
	'current_routine_info',
	0,
	"97487c7a-2635-4fbd-9f27-1c7dc29cf1a3",
	'',
	'');
INSERT INTO S_DT_PROXY
	VALUES ("97487c7a-2635-4fbd-9f27-1c7dc29cf1a3",
	"00000000-0000-0000-0000-000000000000",
	'routine_info',
	'',
	'',
	'../masl2xtuml.xtuml');
INSERT INTO O_NBATTR
	VALUES ("4687d9e9-533d-409c-87c6-1d83078378cb",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("4687d9e9-533d-409c-87c6-1d83078378cb",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("4687d9e9-533d-409c-87c6-1d83078378cb",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"553f8cea-b8b6-402d-9dc1-672c1ebfc74e",
	'current_interface_param',
	'',
	'',
	'current_interface_param',
	0,
	"4d4c0ef2-2520-4dbe-8096-a56393ea3f85",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("7f60e0fb-00d4-450d-9815-2fe3c849f298",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("7f60e0fb-00d4-450d-9815-2fe3c849f298",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("7f60e0fb-00d4-450d-9815-2fe3c849f298",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"4687d9e9-533d-409c-87c6-1d83078378cb",
	'current_event_dataitem',
	'',
	'',
	'current_event_dataitem',
	0,
	"9067a5b1-aa5d-499a-b13e-9bde5fc3e2cd",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("56d7bc13-3616-4b03-b542-37bab510c37e",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_BATTR
	VALUES ("56d7bc13-3616-4b03-b542-37bab510c37e",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ATTR
	VALUES ("56d7bc13-3616-4b03-b542-37bab510c37e",
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	"7f60e0fb-00d4-450d-9815-2fe3c849f298",
	'current_exp',
	'',
	'',
	'current_exp',
	0,
	"47b02a5f-ecfb-49c6-bf1a-6e4a2ff6de02",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ID
	VALUES (1,
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO O_ID
	VALUES (2,
	"2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f");
INSERT INTO PE_PE
	VALUES ("2caf6fbd-3dbc-4f0d-9fbb-834f70662a1f",
	1,
	"15343df7-4335-41a1-93bf-5b14dcf08e0b",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("15343df7-4335-41a1-93bf-5b14dcf08e0b",
	"319083ee-ba5f-4645-a409-d6249f9350bd",
	"319083ee-ba5f-4645-a409-d6249f9350bd",
	'masl2xtuml',
	'',
	0,
	'../masl2xtuml.xtuml');
