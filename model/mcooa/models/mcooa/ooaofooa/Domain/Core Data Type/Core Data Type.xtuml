-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("b9c98359-0f36-4f20-a364-29ab1ae78f35",
	'Core Data Type',
	10,
	'S_CDT',
	'Core Data Types are those data types which are fundamental, or core, to all data types.  The core data types are built-in to the tool and cannot be changed.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("930e578a-4463-4ab4-a2a3-abd092a770de",
	"b9c98359-0f36-4f20-a364-29ab1ae78f35");
INSERT INTO O_BATTR
	VALUES ("930e578a-4463-4ab4-a2a3-abd092a770de",
	"b9c98359-0f36-4f20-a364-29ab1ae78f35");
INSERT INTO O_ATTR
	VALUES ("930e578a-4463-4ab4-a2a3-abd092a770de",
	"b9c98359-0f36-4f20-a364-29ab1ae78f35",
	"5f928d7a-025b-4d21-b599-162c200822ff",
	'Core_Typ',
	'Full Name: Core Type
Description: The core BridgePoint type for the data type
Data Domain: 0 = void, 1 = boolean, 2 = integer, 3 = real, 4 = string, 5 = unique_id, 6 = current_state, 7 = same_as_base, 8 = inst_ref\<Object\>, 9 = inst_ref_set\<Object\>, 10 = inst\<Event\>, 11 = inst\<Mapping\>, 12 = inst_ref\<Mapping\>, 13 = component_ref

enum0: void
enum1: boolean
enum2: integer
enum3: real
enum4: string
enum5: unique_id
enum6: state<State_Model>
enum7:  same_as<Base_Attribute>
enum8: inst_ref<Object>
enum9: inst_ref_set<Object>
enum10: inst<Event>
enum11: inst<Mapping>
enum12: inst_ref<Mapping>
enum13: component_ref
impl_detail: true
readonly: true',
	'',
	'Core_Typ',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b9c98359-0f36-4f20-a364-29ab1ae78f35",
	"b23d48f2-7281-4a18-8944-41a4182b7ce1",
	0,
	"5cdd7449-254e-495b-9dc3-1eeb34212190",
	"eb7572b1-d519-4d32-9f37-1ea7a092dc4c",
	"6dcf61c8-5738-44e1-b539-b78a81844f4f",
	"587f496f-0c3f-46c8-a333-ed22a47c6c9d",
	"5f928d7a-025b-4d21-b599-162c200822ff",
	"fd0971eb-e2fd-4b2d-9d42-d2146754971b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Data Type',
	'DT_ID',
	'R17');
INSERT INTO R_RGO_PROXY
	VALUES ("b9c98359-0f36-4f20-a364-29ab1ae78f35",
	"eb7572b1-d519-4d32-9f37-1ea7a092dc4c",
	"6dcf61c8-5738-44e1-b539-b78a81844f4f",
	'../Domain.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("5cdd7449-254e-495b-9dc3-1eeb34212190",
	"b23d48f2-7281-4a18-8944-41a4182b7ce1",
	0,
	"eb7572b1-d519-4d32-9f37-1ea7a092dc4c",
	"587f496f-0c3f-46c8-a333-ed22a47c6c9d",
	'../Domain.xtuml');
INSERT INTO O_RATTR
	VALUES ("5f928d7a-025b-4d21-b599-162c200822ff",
	"b9c98359-0f36-4f20-a364-29ab1ae78f35",
	"41dd50fe-c407-44c8-bb3d-913f6bb68dd0",
	"e7378c46-7ebc-4b9f-a934-91d48b1a4774",
	1,
	'Element_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("41dd50fe-c407-44c8-bb3d-913f6bb68dd0",
	"e7378c46-7ebc-4b9f-a934-91d48b1a4774",
	'../../Packageable Element/Packageable Element/Packageable Element.xtuml');
INSERT INTO O_ATTR
	VALUES ("5f928d7a-025b-4d21-b599-162c200822ff",
	"b9c98359-0f36-4f20-a364-29ab1ae78f35",
	"00000000-0000-0000-0000-000000000000",
	'DT_ID',
	'',
	'',
	'Element_ID',
	2,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"b9c98359-0f36-4f20-a364-29ab1ae78f35");
INSERT INTO O_OIDA
	VALUES ("5f928d7a-025b-4d21-b599-162c200822ff",
	"b9c98359-0f36-4f20-a364-29ab1ae78f35",
	0,
	'DT_ID');
INSERT INTO O_ID
	VALUES (1,
	"b9c98359-0f36-4f20-a364-29ab1ae78f35");
INSERT INTO O_ID
	VALUES (2,
	"b9c98359-0f36-4f20-a364-29ab1ae78f35");
INSERT INTO PE_PE
	VALUES ("b9c98359-0f36-4f20-a364-29ab1ae78f35",
	1,
	"a364f2b8-b884-44f2-ae2a-3f62ebc627cd",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("a364f2b8-b884-44f2-ae2a-3f62ebc627cd",
	"00000000-0000-0000-0000-000000000000",
	"00c718a4-fada-4398-be36-d920a6735b6a",
	'Domain',
	'A domain (S_DOM) consists of one or more subsystems (S_SS) that each contain an information model that abstracts a portion of the data for the domain: classes (O_OBJ), associations (R_REL), etc.  Breaking a domain into subsystems allows the complexity of the domain to be more easily managed: 1) subsystems are components and can be checked out individually allowing parallelism in development of the models and 2) breaking up a domain into smaller units is easier to understand.  A subsystem is composed of classes that tend to cluster, i.e., they have few associations that span subsystem boundaries.  Inter-subsystem associations, communications, and accesses are captured in the Subsystem Relationship Model (SRM), Subsystem Communication Model (SCM), and Subsystem Access Model (SAM) respectively.',
	1,
	'../Domain.xtuml');
