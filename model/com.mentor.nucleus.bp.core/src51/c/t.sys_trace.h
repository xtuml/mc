T_b("/*----------------------------------------------------------------------------");
T_b("\n");
T_b(" ");
T_b("*");
T_b("\n");
T_b(" ");
T_b("* Run time instrumentation and tracing declarations are defined here.");
T_b("\n");
T_b(" ");
T_b("*");
T_b("\n");
T_b(" ");
T_b("* Note:");
T_b("\n");
T_b(" ");
T_b("*   Multi-line macros use the do {...} while (0) construct recommended");
T_b("\n");
T_b(" ");
T_b("*   by cert.org (PRE10-C, PRE10-CPP).");
T_b("\n");
T_b(" ");
T_b("*");
T_b("\n");
T_b(" ");
T_b("*   Users may copy this file to the /gen folder and modify these macros");
T_b("\n");
T_b(" ");
T_b("*   as desired to change the way tracing works.");
T_b("\n");
T_b(" ");
T_b("*");
T_b("\n");
T_b(" ");
T_b("*--------------------------------------------------------------------------*/");
T_b("\n");
if ( te_thread->flavor == "Nucleus" ) {
T_b("#define XTUML_TRACE_FLUSH( i )");
T_b("\n");
} else {
T_b("#define XTUML_TRACE_FLUSH( i ) fflush( i )");
T_b("\n");
}
T_b("/*");
T_b("\n");
T_b(" ");
T_b("* State transition start tracing:");
T_b("\n");
T_b(" ");
T_b("*/");
T_b("\n");
T_b("/* To suppress source identification in tracing, uncomment the following macro */");
T_b("\n");
T_b("/* #define ");
T_b(te_prefix->define_usw);
T_b("XTUML_SOURCE_PROLOGUE */");
T_b("\n");
T_b("#ifndef ");
T_b(te_prefix->define_usw);
T_b("XTUML_SOURCE_PROLOGUE");
T_b("\n");
T_b("#define ");
T_b(te_prefix->define_usw);
T_b("XTUML_SOURCE_PROLOGUE ");
T_b(printf);
T_b("( \"%s #%6u: \", __FILE__, __LINE__ ); XTUML_TRACE_FLUSH( 0 )");
T_b("\n");
T_b("#endif");
T_b("\n");
T_b("/* To suppress state transition start tracing, uncomment the following macro */");
T_b("\n");
T_b("/* #define ");
T_b(te_trace->state_txn_start);
T_b("( obj_kl, state_num, state_name ) */");
T_b("\n");
T_b("#ifndef ");
T_b(te_trace->state_txn_start);
T_b("\n");
T_b("#define ");
T_b(te_trace->state_txn_start);
T_b("( obj_kl, state_num, state_name ) ");
T_b("do { ");
T_b("  ");
T_b(te_prefix->define_usw);
T_b("XTUML_SOURCE_PROLOGUE; ");
T_b("  ");
T_b(printf);
T_b("( \"Transition started:  %s State [%u] %s\n\", obj_kl, state_num, state_name ); ");
T_b("} while (0)");
T_b("\n");
T_b("#endif");
T_b("\n");
T_b("/*");
T_b("\n");
T_b(" ");
T_b("* State transition complete tracing:");
T_b("\n");
T_b(" ");
T_b("*/");
T_b("\n");
T_b("/* To suppress state transition complete tracing, uncomment the following macro */");
T_b("\n");
T_b("/* #define ");
T_b(te_trace->state_txn_end);
T_b("( obj_kl, state_num, state_name ) */");
T_b("\n");
T_b("#ifndef ");
T_b(te_trace->state_txn_end);
T_b("\n");
T_b("#define ");
T_b(te_trace->state_txn_end);
T_b("( obj_kl, state_num, state_name ) ");
T_b("do { ");
T_b("  ");
T_b(te_prefix->define_usw);
T_b("XTUML_SOURCE_PROLOGUE; ");
T_b("  ");
T_b(printf);
T_b("( \"Transition complete:  %s State [%u] %s\n\", obj_kl, state_num, state_name ); ");
T_b("  ");
T_b("XTUML_TRACE_FLUSH( 0 ); ");
T_b("} while (0)");
T_b("\n");
T_b("#endif");
T_b("\n");
T_b("/*");
T_b("\n");
T_b(" ");
T_b("* Event ignored tracing:");
T_b("\n");
T_b(" ");
T_b("*/");
T_b("\n");
T_b("/* To unsuppress event ignored tracing, comment out the following macro.  */");
T_b("\n");
T_b("#define ");
T_b(te_trace->state_txn_event_ignored);
T_b("( obj_kl, state_num )");
T_b("\n");
T_b("#ifndef ");
T_b(te_trace->state_txn_event_ignored);
T_b("\n");
T_b("#define ");
T_b(te_trace->state_txn_event_ignored);
T_b("( obj_kl, state_num ) ");
T_b("do { ");
T_b("  ");
T_b(te_prefix->define_usw);
T_b("XTUML_SOURCE_PROLOGUE; ");
T_b("  ");
T_b(printf);
T_b("( \"Event ignored:  %s current_state = %u\n\", obj_kl, state_num ); ");
T_b("  ");
T_b("XTUML_TRACE_FLUSH( 0 ); ");
T_b("} while (0)");
T_b("\n");
T_b("#endif");
T_b("\n");
T_b("/*");
T_b("\n");
T_b(" ");
T_b("* Event can't happen tracing:");
T_b("\n");
T_b(" ");
T_b("*/");
T_b("\n");
T_b("/* To suppress can't happen tracing, uncomment the following macro */");
T_b("\n");
T_b("/* #define ");
T_b(te_trace->state_txn_cant_happen);
T_b("( obj_kl, state_num ) */");
T_b("\n");
T_b("#ifndef ");
T_b(te_trace->state_txn_cant_happen);
T_b("\n");
T_b("#define ");
T_b(te_trace->state_txn_cant_happen);
T_b("( obj_kl, state_num ) ");
T_b("do { ");
T_b("  ");
T_b(te_prefix->define_usw);
T_b("XTUML_SOURCE_PROLOGUE; ");
T_b("  ");
T_b(printf);
T_b("( \"Event cannot happen:  %s current_state = %u\n\", obj_kl, state_num ); ");
T_b("  ");
T_b("XTUML_TRACE_FLUSH( 0 ); ");
T_b("} while (0)");
T_b("\n");
T_b("#endif");
T_b("\n");
T_b("/*");
T_b("\n");
T_b(" ");
T_b("* Component message start tracing:");
T_b("\n");
T_b(" ");
T_b("*/");
T_b("\n");
T_b("/* To suppress component message start tracing, uncomment the following macro */");
T_b("\n");
T_b("/* #define ");
T_b(te_trace->component_msg_start);
T_b("( arg_format, component_number, port_number, message_number, args... ) */");
T_b("\n");
T_b("#ifndef ");
T_b(te_trace->component_msg_start);
T_b("\n");
T_b("#define ");
T_b(te_trace->component_msg_start);
T_b("( arg_format, component_number, port_number, message_number, args... ) ");
T_b("do { ");
T_b("  ");
T_b(te_prefix->define_usw);
T_b("XTUML_SOURCE_PROLOGUE; ");
T_b("  ");
T_b(printf);
T_b("( \"component %d port %d message %d \" arg_format \"\n\", component_number, port_number, message_number, ## args ); ");
T_b("  ");
T_b("XTUML_TRACE_FLUSH( 0 ); ");
T_b("} while (0)");
T_b("\n");
T_b("#endif");
T_b("\n");
T_b("/*");
T_b("\n");
T_b(" ");
T_b("* Component message end tracing:");
T_b("\n");
T_b(" ");
T_b("*/");
T_b("\n");
T_b("/*");
T_b("\n");
T_b(" ");
T_b("* Object Action Language (OAL) statement level tracing:");
T_b("\n");
T_b(" ");
T_b("*/");
T_b("\n");
T_b("/* To suppress statement source identification, uncomment the following macro */");
T_b("\n");
T_b("/* #define ");
T_b(te_prefix->define_usw);
T_b("XTUML_OAL_STMT_TRACE( blck_level, stmt_action ) */");
T_b("\n");
T_b("#ifndef ");
T_b(te_prefix->define_usw);
T_b("XTUML_OAL_STMT_TRACE");
T_b("\n");
T_b("#define ");
T_b(te_prefix->define_usw);
T_b("XTUML_OAL_STMT_TRACE( blck_level, stmt_action ) ");
T_b("do { ");
T_b("  ");
T_b(te_prefix->define_usw);
T_b("XTUML_SOURCE_PROLOGUE; ");
T_b("  ");
T_b("{ /* indenting */ s1_t i; for ( i = 0; i < blck_level; i++ ) ");
T_b(printf);
T_b("( \"  \" ); } ");
T_b("  ");
T_b(printf);
T_b("( \"%s\n\", stmt_action ); ");
T_b("  ");
T_b("XTUML_TRACE_FLUSH( 0 ); ");
T_b("} while (0)");
T_b("\n");
T_b("#endif");
T_b("\n");
T_b("/* To suppress empty handle detection, modify the following macro.  */");
T_b("\n");
T_b("#ifndef ");
T_b(te_prefix->define_usw);
T_b("XTUML_EMPTY_HANDLE_TRACE");
T_b("\n");
T_b("#define ");
T_b(te_prefix->define_usw);
T_b("XTUML_EMPTY_HANDLE_TRACE( object_keyletters, s ) ");
T_b("do { ");
T_b(te_callout->empty_handle_detected);
T_b("( object_keyletters, s ); } while (0)");
T_b("\n");
T_b("#endif");
T_b("\n");
T_b("/*");
T_b("\n");
T_b(" ");
T_b("* Declare state information structure.");
T_b("\n");
T_b(" ");
T_b("*/");
T_b("\n");
T_b("typedef struct ");
T_b(te_prefix->type);
T_b("StateInfo_s ");
T_b(te_prefix->type);
T_b("StateInfo_s;");
T_b("\n");
T_b("struct ");
T_b(te_prefix->type);
T_b("StateInfo_s {");
T_b("\n");
T_b("  ");
T_b(te_typemap->state_number_name);
T_b(" state_number;  /* 'real' state number */");
T_b("\n");
T_b("  ");
T_b("c_t * state_name;");
T_b("\n");
T_b("};");
T_b("\n");
