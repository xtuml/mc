<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\>
<| (C) Copyright Mentor Graphics Corporation (1998-2005)             |>
<| Property of Mentor Graphics Corporation                           |>
<| All Rights Reserved.                                              |>
<\__________________________________________________________________-->
<chapter id="MCGUI-chapter">
<title>Eclipse Integration</title>
<highlights id="MCGUI-chapter-high"><para>The &escher; build process
has been integrated with Eclipse. The use of &escher; in this 
environment is described in this section.</para></highlights>

<section>
  <title>&escher; GUI</title>
  <para>&escher; can now be run from inside of &bpmb;/Eclipse.  
  This environment provides excellent flexibility to integrate tools 
  together.  Eclipse is open and easy to modify.  &bp; is an Eclipse
  environment customized for xtUML and embedded development.</para>

  <para>All of the marking capabilities of &escher; are available from
  within the &bp; user interface.</para>

  <para>The xtUML New Project wizard copies all of the model compiler 
  related marking files into the new project.  These files and folders 
  are described in more detail below.</para>
</section>

<section id="MCGUI-FilesFolders-section">
  <title>Project Files and Folders</title>

  <para>The files for a project reside within the project folder.  All
  of the files having to do with the project exist within this folder
  (or are linked into this folder using Eclipse links).  Some of the 
  files and folders in the project are part of the model compilation
  and code generation process.  The <filename>gen</filename> and
  <filename>src</filename> folders in the project are used by the model
  compiler.</para>

  <section>
    <title>Marking Files</title>
    <para>All of the marking files for a project will be found in the
    <filename>gen</filename> folder.  These files can be edited by
    double-clicking on the file or by right clicking and opening the
    file for editing.  Note that the marking files end with the file
    extension <filename>.mark</filename>.  The marking files
    include <filename>bridge.mark</filename>, 
    <filename>class.mark</filename>, <filename>datatype.mark</filename>,
    <filename>domain.mark</filename>, 
    <filename>event.mark</filename> and
    <filename>system.mark</filename>.</para>

    <para>To supply marking to the code generation process, edit the
    marking files.  <xref linkend="Marking-chapter"/> explains the
    markings available to control the code generation of
    &escher;</para>
  </section>

  <section>
    <title>Source Files and Output</title>
    <para>The code generation process creates a folder called
    <filename>code_generation</filename> in the
    <filename>gen</filename> folder.  The is the generation workspace
    and is largely a temporary ("scratch") work area for the model
    compiler.  It will be deleted before new code generation begins.
    The <filename>code_generation</filename> folder contains the files
    and folders that users of &escher; versions 3.3 and before are
    accustomed to seeing.</para>
    <para>After code generation runs to completion, the generated
    source code will be copied into the <filename>src</filename> folder
    of the project.</para>
  </section>
</section>


<section>
  <title>Replacing Generated Source Code</title>
  <para>In some circumstances it is desirable to replace code generated
  by &escher; with code supplied by the user.  This is often the case
  with the timer subsystem (TIM) in <filename>TIM_bridge.c</filename>
  and almost always the case with the system user callouts
  (<filename>sys_user_co.c</filename> and
  <filename>sys_user_co.h</filename>).  In these cases, replacement
  source files must be supplied to the code generation process.</para>

  <para>To supply user source code that will replace files of the same
  name generated by &escher;, place the source files
  (<filename>.c</filename> and <filename>.h</filename>) in the 
  <filename>gen</filename> folder within the project folder.  When the
  code generation process runs, the supplied files will be copied in to
  overwrite/replace those generated by the model compiler.</para>
</section>

<section>
  <title>Adding User Source and Libraries</title>

  <para>&escher; supports the integration of user supplied source
  code (<filename>.c</filename> and <filename>.h</filename> files)
  and libraries (<filename>.a</filename> and
  <filename>.dll</filename>).  To add additional source code and
  libraries to the generated and compiled system, simply deposit
  files into the <filename>src</filename> folder within the project
  folder.</para>

  <para>&cdt; will detect these source files and libraries anywhere
  within the project <emphasis>except</emphasis> within the
  <filename>gen</filename> folder and within the
  <filename>models</filename> folder.  It is recommended that the
  user create sub-folders within the <filename>src</filename> folder
  to organize the added source code and libraries.</para>

  <para>Note that the naming conventions used by the source code and
  libraries being added should differ substantially from the naming
  conventions used in the &escher; generated code.  Careful naming
  will avoid name collisions and conflicts between generated code and
  added code.</para>

</section>

<section>
  <title>Building (Running Code Generation)</title>
  <para>To start the code generation process, switch from the xtUML 
  Modeling perspective to the C/C++ perspective or Resource perspective
  using Window > Open Perspective. Next, right click on the
  project and select "Build Project".  This will cause code
  generation (&escher; execution) to begin.  All models in the
  project will be translated.  The generated source code will be
  copied into the <filename>src</filename> folder in the
  project.</para>

  <para>It is also possible to begin code generation by pressing the
  "Build All" button on the Eclipse toolbar or by selecting one of
  "Build All", "Build Project" or "Clean..." from the Eclipse
  "Project" menu.  Note that these alternative methods of starting
  the build will also start a build for all other open projects
  within the Eclipse workspace.  Be sure this is what is intended
  when using these methods to begin the build process.</para>

  <para>Output code generation logging will appear in the Eclipse
  console.</para>

  <para>To stop code generation, press the square, red stop button in
  the console view during code generation.</para>

  <para>Code compilation will occur after code is generated.  See
  <xref linkend="MCGUI-Compiling-section"/> below.</para>

</section>

<section id="MCGUI-Compiling-section">
  <title>Compiling</title>
  <para>Compiling code from within &bp; is automatic.  As
  &escher; generates source code files and deposits them into the
  <filename>src</filename> folder, &cdt; "notices" them, compiles
  them and links them all together.  The C compiler (toolset) was
  chosen when the project was created.</para>

  <para>Users can skip automatic compilation by right clicking on
  the project and selecting Properties. Next choose Builders in the 
  tree.  Then uncheck &cdt; Builder and Scanner Configuration 
  Builder.</para>

  <para>The Model Compiler Pre-Build and MC-3020 Model Compiler
  builders are essential for the code generation phase where the 
  xtUML model is translated to target code.</para>


</section>

</chapter>
