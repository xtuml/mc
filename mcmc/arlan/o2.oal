val_translate@void@@@
//====================================================================
//
// $RCSfile: q.val.translate.arc,v $
//
// (c) Copyright 1998-2013 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
//
// These functions set up the implementation of the values (V_VAL on
// model of OAL).
//
//==================================================================== 
//
//
// Translate "leaf" values first.
::val_literal_boolean_values();
::val_literal_integer_values();
::val_literal_real_values();
::val_literal_string_values();
::val_literal_enumerations();
::val_constant_values();
::val_transient_values();
::val_instance_reference_values();
::val_inst_ref_set_values();
::val_selection_test_values();
::val_event_values();
::val_parameter_values();
// The following may be recursed.
::val_attribute_values();
::val_member_values();
::val_array_element_references();
::val_array_length_values();
::val_unary_op_values();
::val_binary_op_values();
// V_PARs depend upon values being populated.
::val_actual_parameters();
// These use V_PARs.
::val_message_values();
::val_bridge_values();
::val_transform_values();
::val_synch_service_values();
@@@
gen_value@void@@v_val@inst_ref<Value>@@@
//
//--------------------------------------------------------------------
// Percolate the values from the "leaves" up into the combined
// expressions by recursively drilling down.
//--------------------------------------------------------------------
v_val = param.v_val;
select one v_mvl related by v_val->V_MVL[R801];
if ( not_empty v_mvl )
  ::val_member_value( v_mvl:v_mvl );
else
  select one v_avl related by v_val->V_AVL[R801];
  if ( not_empty v_avl )
    ::val_attribute_value( v_avl:v_avl );
  else
    select one v_aer related by v_val->V_AER[R801];
    if ( not_empty v_aer )
      ::val_array_element_reference( v_aer:v_aer );
    else
      select one v_alv related by v_val->V_ALV[R801];
      if ( not_empty v_alv )
        ::val_array_length_value( v_alv:v_alv );
      else
        select one v_uny related by v_val->V_UNY[R801];
        if ( not_empty v_uny )
          ::val_unary_op_value( v_uny:v_uny );
        else
          select one v_bin related by v_val->V_BIN[R801];
          if ( not_empty v_bin )
            ::val_binary_op_value( v_bin:v_bin );
          else
            select one v_trv related by v_val->V_TRV[R801];
            if ( not_empty v_trv )
              ::val_transform_value( v_trv:v_trv, salt:"TRV" );
            else
              select one v_msv related by v_val->V_MSV[R801];
              if ( not_empty v_msv )
                ::val_message_value( v_msv:v_msv, salt:"MSV" );
              else
                select one v_brv related by v_val->V_BRV[R801];
                if ( not_empty v_brv )
                  ::val_bridge_value( v_brv:v_brv, salt:"BRV" );
                else
                  select one v_fnv related by v_val->V_FNV[R801];
                  if ( not_empty v_fnv )
                    ::val_synch_service_value( v_fnv:v_fnv, salt:"FNV" );
                  else
                    T::print(s:"ERROR:  Recursive V_VAL resolution issue.");
                  end if;
                end if;
              end if;
            end if;
          end if;
        end if;
      end if;
    end if;
  end if;
end if;
@@@
val_literal_boolean_values@void@@@
//
select many v_lbos from instances of V_LBO;
for each v_lbo in v_lbos
  select one te_val related by v_lbo->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = v_lbo.Value;
  te_val.buffer = v_lbo.Value;
end for;
@@@
val_literal_string_values@void@@@
//
select any te_string from instances of TE_STRING;
select many v_lsts from instances of V_LST;
for each v_lst in v_lsts
  select one te_val related by v_lst->V_VAL[R801]->TE_VAL[R2040];
  // s = T::t( s:v_lst.Value );
  s = v_lst.Value;
  // if ( strstr( s, "({" ) )
  if ( "({" == s )
    te_val.buffer = s;
  else
    te_val.buffer = ( "&quot;" + v_lst.Value ) + "&quot;";
  end if;
  te_val.OAL = ( "" + v_lst.Value ) + "";
  te_val.dimensions = 1;
  te_val.array_spec = ( "[" + te_string.max_string_length ) + "]";
  //TODO assign dimension
end for;
@@@
val_literal_integer_values@void@@@
//
select many v_lins from instances of V_LIN;
for each v_lin in v_lins
  select one te_val related by v_lin->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = v_lin.Value;
  te_val.buffer = v_lin.Value;
end for;
@@@
val_literal_real_values@void@@@
//
select many v_lrls from instances of V_LRL;
for each v_lrl in v_lrls
  select one te_val related by v_lrl->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = v_lrl.Value;
  te_val.buffer = v_lrl.Value;
end for;
@@@
val_literal_enumerations@void@@@
//
select many v_lens from instances of V_LEN;
for each v_len in v_lens
  select one te_val related by v_len->V_VAL[R801]->TE_VAL[R2040];
  select one te_enum related by v_len->S_ENUM[R824]->TE_ENUM[R2027];
  te_val.OAL = te_enum.Name;
  te_val.buffer = te_enum.GeneratedName;
end for;
@@@
val_constant_values@void@@@
//
select many v_scvs from instances of V_SCV;
for each v_scv in v_scvs
  select one te_val related by v_scv->V_VAL[R801]->TE_VAL[R2040];
  select one cnst_syc related by v_scv->CNST_SYC[R850];
  select one cnst_lsc related by cnst_syc->CNST_LFSC[R1502]->CNST_LSC[R1503];
  select one te_dt related by cnst_syc->S_DT[R1500]->TE_DT[R2021];
  te_val.OAL = cnst_syc.Name;
  te_val.buffer = cnst_lsc.Value;
  if ( 4 == te_dt.Core_Typ )
    select any te_string from instances of TE_STRING;
    te_val.buffer = ( "&quot;" + cnst_lsc.Value ) + "&quot;";
    te_val.dimensions = 1;
    te_val.array_spec = ( "[" + te_string.max_string_length ) + "]";
    //TODO assign dimension
  end if;
end for;
@@@
val_transient_values@void@@@
//
select many v_tvls from instances of V_TVL;
for each v_tvl in v_tvls
  select one v_var related by v_tvl->V_VAR[R805];
  select one te_var related by v_var->TE_VAR[R2039];
  select one te_val related by v_tvl->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = te_var.OAL;
  te_val.buffer = te_var.buffer;
  te_val.dimensions = te_var.dimensions;
  te_val.array_spec = te_var.array_spec;
  select one te_dim related by te_var->TE_DIM[R2057];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
end for;
@@@
val_actual_parameters@void@@@
//
select many v_pars from instances of V_PAR;
for each v_par in v_pars
  select one te_par related by v_par->TE_PAR[R2063];
  select one v_val related by v_par->V_VAL[R800];
  select one te_val related by v_val->TE_VAL[R2040];
  select one te_dt related by v_val->S_DT[R820]->TE_DT[R2021];
  te_val.OAL = ( te_par.Name + ":" ) + te_val.OAL;
  if ( 10 == te_dt.Core_Typ )
    // Cast event types to the base event type for passing (to timers).
    te_val.buffer = ( "(" + te_dt.ExtName ) + ( ")" + te_val.buffer );
  end if;
end for;
@@@
val_attribute_values@void@@@
//
select many v_avls from instances of V_AVL;
for each v_avl in v_avls
  ::val_attribute_value( v_avl:v_avl );
end for;
@@@
val_attribute_value@void@@v_avl@inst_ref<Attribute Value Reference>@@@
//
v_avl = param.v_avl;
select one v_val related by v_avl->V_VAL[R801];
select one te_val related by v_val->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_avl->V_VAL[R807];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  select one te_var related by v_avl->V_VAL[R807]->V_IRF[R801]->V_VAR[R808]->TE_VAR[R2039];
  select one o_attr related by v_avl->O_ATTR[R806];
  select one te_attr related by o_attr->TE_ATTR[R2033];
  if ( not_empty te_attr )
    root = "";
    if ( empty te_var )
      te_val.OAL = ( root_te_val.OAL + "." ) + te_attr.Name;
      te_val.buffer = ( root_te_val.buffer + "->" ) + te_attr.GeneratedName;
      root = root_te_val.buffer;
    else
      te_val.OAL = ( te_var.OAL + "." ) + te_attr.Name;
      te_val.buffer = ( te_var.buffer + "->" ) + te_attr.GeneratedName;
      root = te_var.buffer;
    end if;
    te_val.dimensions = te_attr.dimensions;
    te_val.array_spec = te_attr.array_spec;
    select one te_dim related by te_attr->TE_DIM[R2055];
    if ( not_empty te_dim )
      relate te_val to te_dim across R2079;
    else
          end if;
    // Maybe attribute value is actually derived.
    select one o_dbattr related by o_attr->O_BATTR[R106]->O_DBATTR[R107];
    if ( not_empty o_dbattr )
      select one act_ai related by v_val->ACT_AI[R689];
      if ( empty act_ai )
        // Only do this if we are not assigning inside the DAB OAL body.
        select one te_aba related by o_dbattr->TE_DBATTR[R2026]->TE_ABA[R2010];
        te_val.buffer = ( te_aba.GeneratedName + "( " ) + ( root + " )" );
        te_val.dimensions = te_aba.dimensions;
        te_val.array_spec = te_aba.array_spec;
        select one te_dim related by te_aba->TE_DIM[R2058];
        if ( not_empty te_dim )
          relate te_val to te_dim across R2079;
        else
                  end if;
      end if;
    end if;
  end if;
end if;
@@@
val_member_values@void@@@
//
select many v_mvls from instances of V_MVL;
for each v_mvl in v_mvls
  ::val_member_value( v_mvl:v_mvl );
end for;
@@@
val_member_value@void@@v_mvl@inst_ref<Member Value Reference>@@@
//
v_mvl = param.v_mvl;
select one te_val related by v_mvl->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_mvl->V_VAL[R837];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  select one te_mbr related by v_mvl->S_MBR[R836]->TE_MBR[R2047];
  te_val.dimensions = te_mbr.dimensions;
  te_val.array_spec = te_mbr.array_spec;
  select one te_dim related by te_mbr->TE_DIM[R2059];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
  te_val.OAL = ( root_te_val.OAL + "." ) + te_mbr.Name;
  te_val.buffer = ( root_te_val.buffer + "." ) + te_mbr.GeneratedName;
end if;
@@@
val_instance_reference_values@void@@@
//
unique_num = 0;
select many v_irfs from instances of V_IRF;
for each v_irf in v_irfs
  select one te_val related by v_irf->V_VAL[R801]->TE_VAL[R2040];
  select one te_var related by v_irf->V_VAR[R808]->TE_VAR[R2039];
  if ( not_empty te_var )
    te_val.OAL = te_var.OAL;
    te_val.buffer = te_var.buffer;
  else
    T::print(s:"CDS:  Understand why we do not have V_VAR here.");
    te_val.buffer = "v_irf_" + T::s(i:unique_num);
    unique_num = unique_num + 1;
  end if;
end for;
@@@
val_selection_test_values@void@@@
//
select many v_slrs from instances of V_SLR;
for each v_slr in v_slrs
  select one te_val related by v_slr->V_VAL[R801]->TE_VAL[R2040];
  te_val.buffer = "selected";
  te_val.OAL = "SELECTED";
end for;
@@@
val_inst_ref_set_values@void@@@
//
select many v_isrs from instances of V_ISR;
for each v_isr in v_isrs
  select one te_var related by v_isr->V_VAR[R809]->TE_VAR[R2039];
  select one te_val related by v_isr->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = te_var.OAL;
  te_val.buffer = te_var.buffer;
end for;
@@@
val_event_values@void@@@
//
select many v_edvs from instances of V_EDV;
for each v_edv in v_edvs
  select one te_val related by v_edv->V_VAL[R801]->TE_VAL[R2040];
  // If there are more than one transition into the state, there
  // may be more than one event parameter reference.  Select
  // any of them; they have the same names.
  select any te_parm related by v_edv->V_EPR[R834]->SM_EVTDI[R846]->TE_PARM[R2031];
  if ( empty te_parm )
    select any te_parm related by v_edv->V_EPR[R834]->C_PP[R847]->TE_PARM[R2048];
  else
    // Mark the event as used.
    select one te_evt related by te_parm->SM_EVTDI[R2031]->SM_EVT[R532]->TE_EVT[R2036];
    if ( not_empty te_evt )
      te_evt.UsedCount = te_evt.UsedCount + 1;
      te_evt.Used = true;
    end if;
  end if;
  te_val.OAL = "PARAM." + te_parm.Name;
  te_val.buffer = "rcvd_evt->" + te_parm.GeneratedName;
  te_val.dimensions = te_parm.dimensions;
  te_val.array_spec = te_parm.array_spec;
  select one te_dim related by te_parm->TE_DIM[R2056];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
end for;
@@@
val_parameter_values@void@@@
//
select many v_pvls from instances of V_PVL;
for each v_pvl in v_pvls
  select one te_val related by v_pvl->V_VAL[R801]->TE_VAL[R2040];
  select one te_parm related by v_pvl->O_TPARM[R833]->TE_PARM[R2029];
  if ( empty te_parm )
    select one te_parm related by v_pvl->C_PP[R843]->TE_PARM[R2048];
    if ( empty te_parm )
      select one te_parm related by v_pvl->S_SPARM[R832]->TE_PARM[R2030];
      if ( empty te_parm )
        select one te_parm related by v_pvl->S_BPARM[R831]->TE_PARM[R2028];
        if ( empty te_parm )
          T::print(s:"CDS:  Understand why we do not have V_PVL related parameter here.");
        end if;
      end if;
    end if;
  end if;
  te_val.OAL = "PARAM." + te_parm.Name;
  te_val.buffer = te_parm.GeneratedName;
  te_val.dimensions = te_parm.dimensions;
  te_val.array_spec = te_parm.array_spec;
  select one te_dim related by te_parm->TE_DIM[R2056];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
  if ( 1 == te_parm.By_Ref )
    te_val.buffer = ( "(*" + te_parm.GeneratedName ) + ")";
  end if;
end for;
@@@
val_unary_op_values@void@@@
//
select many v_unys from instances of V_UNY;
for each v_uny in v_unys
  ::val_unary_op_value( v_uny:v_uny );
end for;
@@@
val_unary_op_value@void@@v_uny@inst_ref<Unary Operation>@@@
//
v_uny = param.v_uny;
select one te_val related by v_uny->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_uny->V_VAL[R804];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  // Remove blanks and make lower case.
  op = T::r(s:v_uny.Operator);
  op = T::l(s:op);
  select any te_set from instances of TE_SET;
  select one v_irf related by root_v_val->V_IRF[R801];
  select one v_isr related by root_v_val->V_ISR[R801];
  if ( not_empty v_irf )
    if ( op == "not_empty" )
      te_val.buffer = ( "( 0 != " + root_te_val.buffer ) + " )";
    elif ( op == "empty" )
      te_val.buffer = ( "( 0 == " + root_te_val.buffer ) + " )";
    elif ( op == "cardinality" )
      te_val.buffer = ( "( 0 != " + root_te_val.buffer ) + " )";
    else
      T::print(s:"ERROR:  Unary set operator ${v_uny.Operator} is not supported.");
    end if;
  elif ( not_empty v_isr )
    if ( op == "not_empty" )
      te_val.buffer = ( ( "( ! " + te_set.emptiness ) + ( "( " + root_te_val.buffer ) ) + " ) )";
    elif ( op == "empty" )
      te_val.buffer = ( ( te_set.emptiness + "( " ) + ( root_te_val.buffer + " )" ) );
    elif ( op == "cardinality" )
      te_val.buffer = ( ( te_set.module + te_set.element_count ) + ( "( " + root_te_val.buffer ) ) + " )";
    else
      T::print(s:"ERROR:  Unary set operator ${v_uny.Operator} is not supported.");
    end if;
  else
    if ( op == "not" )
      te_val.buffer = "!" + root_te_val.buffer;
    else
      te_val.buffer = op + root_te_val.buffer;
    end if;
  end if;
  te_val.OAL = ( op + " " ) + root_te_val.OAL;
  // future support for vector arithmetic goes here
  te_val.dimensions = root_te_val.dimensions;
  te_val.array_spec = root_te_val.array_spec;
  select one te_dim related by root_te_val->TE_DIM[R2079];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
end if;
@@@
val_binary_op_values@void@@@
//
select many v_bins from instances of V_BIN;
for each v_bin in v_bins
  ::val_binary_op_value( v_bin:v_bin );
end for;
@@@
val_binary_op_value@void@@v_bin@inst_ref<Binary Operation>@@@
//
v_bin = param.v_bin;
select one te_val related by v_bin->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one l_v_val related by v_bin->V_VAL[R802];
  select one l_te_val related by l_v_val->TE_VAL[R2040];
  if ( "" == l_te_val.buffer )
    ::gen_value( v_val:l_v_val );
  end if;
  select one r_v_val related by v_bin->V_VAL[R803];
  select one r_te_val related by r_v_val->TE_VAL[R2040];
  if ( "" == r_te_val.buffer )
    ::gen_value( v_val:r_v_val );
  end if;
  select one l_te_dt related by l_v_val->S_DT[R820]->TE_DT[R2021];
  select one r_te_dt related by r_v_val->S_DT[R820]->TE_DT[R2021];
  if ( ( 4 == l_te_dt.Core_Typ ) or ( 4 == r_te_dt.Core_Typ ) )
    // string
    select any te_string from instances of TE_STRING;
    select any te_instance from instances of TE_INSTANCE;
    if ( "+" == T::r(s:v_bin.Operator) )
      te_val.buffer = ( ( ( te_instance.module + te_string.stradd ) + ( "( " + l_te_val.buffer ) ) + ( ", " + r_te_val.buffer ) ) + " )";
    else
      te_val.buffer = ( ( ( "( " + te_instance.module ) + ( te_string.strcmp + "( " ) ) + ( ( l_te_val.buffer + ", " ) + ( r_te_val.buffer + " ) " ) ) ) + ( v_bin.Operator + " 0 )" );
    end if;
  else
    select any te_target from instances of TE_TARGET;
    if ( "and" == T::r(s:v_bin.Operator) )
      te_val.buffer = ( ( "( " + l_te_val.buffer ) + ( " && " + r_te_val.buffer ) ) + " )";
    elif ( "or" == T::r(s:v_bin.Operator) )
      te_val.buffer = ( ( "( " + l_te_val.buffer ) + ( " || " + r_te_val.buffer ) ) + " )";
    elif ( ( ( ( "==" == T::r(s:v_bin.Operator) ) or ( "!=" == T::r(s:v_bin.Operator) ) ) and ( "C" == te_target.language ) ) and ( l_te_val.dimensions != 0 ) )
      element_count = 0;
      select one r_te_dim related by r_te_val->TE_DIM[R2079];
      if ( not_empty r_te_dim )
        element_count = r_te_dim.elementCount;
      end if;
      te_val.buffer = ( ( ( "( memcmp( " + l_te_val.buffer ) + ( ", " + r_te_val.buffer ) ) + ( ( ", sizeof(" + l_te_val.buffer ) + ( "[0]) * " + T::s(i:element_count) ) ) ) + ( ( ") " + v_bin.Operator ) + " 0 )" );
    else
      te_val.buffer = ( ( "( " + l_te_val.buffer ) + ( " " + v_bin.Operator ) ) + ( ( " " + r_te_val.buffer ) + " )" );
    end if;
  end if;
  // future support for vector arithmetic goes here
  te_val.dimensions = r_te_val.dimensions;
  te_val.array_spec = r_te_val.array_spec;
  select one te_dim related by r_te_val->TE_DIM[R2079];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
  te_val.OAL = ( ( "( " + l_te_val.OAL ) + ( " " + v_bin.Operator ) ) + ( ( " " + r_te_val.OAL ) + " )" );
end if;
@@@
val_message_values@void@@@
//
select many v_msvs from instances of V_MSV;
for each v_msv in v_msvs
  ::val_message_value( v_msv:v_msv, salt:"msv" );
end for;
@@@
val_message_value@void@@v_msv@inst_ref<Message Value>@@salt@string@@@
//
v_msv = param.v_msv;
salt = param.salt;
select one v_val related by v_msv->V_VAL[R801];
select one te_val related by v_val->TE_VAL[R2040];
select one te_mact related by v_msv->SPR_PEP[R841]->SPR_PO[R4503]->TE_MACT[R2050];
if ( empty te_mact )
  select one te_mact related by v_msv->SPR_REP[R845]->SPR_RO[R4502]->TE_MACT[R2052];
end if;
select many v_pars related by v_msv->V_PAR[R842];
select one te_aba related by te_mact->TE_ABA[R2010];
r = ::q_render_msg( te_mact:te_mact, v_pars:v_pars, ws:"", is_statement:false, salt:salt );
te_val.buffer = r;
te_val.OAL = ( ( te_mact.PortName + "::" ) + ( te_mact.MessageName + "(" ) ) + ( te_mact.OALParamBuffer + ")" );
te_val.dimensions = te_aba.dimensions;
te_val.array_spec = te_aba.array_spec;
select one te_dim related by te_aba->TE_DIM[R2058];
if ( not_empty te_dim )
  relate te_val to te_dim across R2079;
else
  end if;
@@@
val_bridge_values@void@@@
//
select many v_brvs from instances of V_BRV;
for each v_brv in v_brvs
  ::val_bridge_value( v_brv:v_brv, salt:"brv" );
end for;
@@@
val_bridge_value@void@@v_brv@inst_ref<Bridge Value>@@salt@string@@@
//
v_brv = param.v_brv;
salt = param.salt;
select one te_brg related by v_brv->S_BRG[R828]->TE_BRG[R2025];
if ( not_empty te_brg )
  select any te_target from instances of TE_TARGET;
  select one v_val related by v_brv->V_VAL[R801];
  select one te_val related by v_val->TE_VAL[R2040];
  select many v_pars related by v_brv->V_PAR[R810];
  select one te_aba related by te_brg->TE_ABA[R2010];
  select one te_ee related by v_brv->S_BRG[R828]->S_EE[R19]->TE_EE[R2020];
  te_ee.Included = true;
  r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false, invocation_flavor:salt );
  te_parm = r;
  parameters = te_parm.ParamBuffer;
  params_OAL = te_parm.OALParamBuffer;
  te_val.OAL = ( ( te_brg.EEkeyletters + "::" ) + ( te_brg.Name + "(" ) ) + ( params_OAL + ")" );
  if ( "C++" == te_target.language )
    if ( "TIM" == te_brg.EEkeyletters )
      te_val.buffer = ( "thismodule->tim->" + te_brg.GeneratedName ) + "(";
    else
      select one te_c related by te_ee->TE_C[R2085];
      if ( not_empty te_c )
        if ( "" == parameters )
          parameters = "thismodule";
        else
          parameters = "thismodule, " + parameters;
        end if;
      end if;
    end if;
  else
    te_val.buffer = ( te_aba.scope + te_brg.GeneratedName ) + "(";
  end if;
  if ( "" != parameters )
    te_val.buffer = ( te_val.buffer + " " ) + ( parameters + " " );
  end if;
  te_val.buffer = te_val.buffer + ")";
  te_val.dimensions = te_aba.dimensions;
  te_val.array_spec = te_aba.array_spec;
  select one te_dim related by te_aba->TE_DIM[R2058];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
end if;
@@@
val_transform_values@void@@@
//
select many v_trvs from instances of V_TRV;
for each v_trv in v_trvs
  ::val_transform_value( v_trv:v_trv, salt:"trv" );
end for;
@@@
val_transform_value@void@@v_trv@inst_ref<Operation Value>@@salt@string@@@
//
v_trv = param.v_trv;
salt = param.salt;
select one te_tfr related by v_trv->O_TFR[R829]->TE_TFR[R2024];
if ( not_empty te_tfr )
  select any te_target from instances of TE_TARGET;
  select one v_val related by v_trv->V_VAL[R801];
  select one te_val related by v_val->TE_VAL[R2040];
  select many v_pars related by v_trv->V_PAR[R811];
  select one te_aba related by te_tfr->TE_ABA[R2010];
  te_val.buffer = te_tfr.GeneratedName + "(";
  if ( te_tfr.Instance_Based == 1 )
    select one te_var related by v_trv->V_VAR[R830]->TE_VAR[R2039];
    if ( not_empty te_var )
      if ( "C++" == te_target.language )
        te_val.buffer = ( te_var.buffer + "->" ) + te_val.buffer;
      end if;
      te_val.buffer = te_val.buffer + te_var.buffer;
      te_val.OAL = te_var.OAL + ".";
    else
      // no variable, must be selection (selected reference)
      if ( "C++" == te_target.language )
        te_val.buffer = "selected->" + te_val.buffer;
      end if;
      te_val.buffer = te_val.buffer + "selected";
      te_val.OAL = "SELECTED.";
    end if;
  else
    if ( "C++" == te_target.language )
      select one te_class related by v_trv->O_TFR[R829]->O_OBJ[R115]->TE_CLASS[R2019];
      te_val.buffer = ( te_class.GeneratedName + "::" ) + te_val.buffer;
    end if;
    te_val.OAL = te_tfr.Key_Lett + "::";
  end if;
  r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false, invocation_flavor:salt );
  te_parm = r;
  parameters = te_parm.ParamBuffer;
  params_OAL = te_parm.OALParamBuffer;
  te_val.OAL = ( ( te_val.OAL + te_tfr.Name ) + ( "(" + params_OAL ) ) + ")";
  if ( te_tfr.Instance_Based == 1 )
    if ( ( "C++" == te_target.language ) or ( "" != parameters ) )
      te_val.buffer = te_val.buffer + ", ";
    end if;
  end if;
  if ( "C++" == te_target.language )
    te_val.buffer = te_val.buffer + "thismodule";
    if ( "" != parameters )
      te_val.buffer = te_val.buffer + ", ";
    end if;
  end if;
  te_val.buffer = ( te_val.buffer + parameters ) + ")";
  te_val.dimensions = te_aba.dimensions;
  te_val.array_spec = te_aba.array_spec;
  select one te_dim related by te_aba->TE_DIM[R2058];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
end if;
@@@
val_synch_service_values@void@@@
//
select many v_fnvs from instances of V_FNV;
for each v_fnv in v_fnvs
  ::val_synch_service_value( v_fnv:v_fnv, salt:"fnv" );
end for;
@@@
val_synch_service_value@void@@v_fnv@inst_ref<Function Value>@@salt@string@@@
//
v_fnv = param.v_fnv;
salt = param.salt;
select one te_sync related by v_fnv->S_SYNC[R827]->TE_SYNC[R2023];
if ( not_empty te_sync )
  select any te_target from instances of TE_TARGET;
  select one v_val related by v_fnv->V_VAL[R801];
  select one te_val related by v_val->TE_VAL[R2040];
  select many v_pars related by v_fnv->V_PAR[R817];
  select one te_aba related by te_sync->TE_ABA[R2010];
  r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false, invocation_flavor:salt );
  te_parm = r;
  parameters = te_parm.ParamBuffer;
  params_OAL = te_parm.OALParamBuffer;
  te_val.OAL = ( ( "::" + te_sync.Name ) + ( "(" + params_OAL ) ) + ")";
  name = te_sync.intraface_method;
  if ( "C++" == te_target.language )
    name = "thismodule->" + name;
  end if;
  te_val.buffer = name + "(";
  if ( "" != parameters )
    te_val.buffer = ( te_val.buffer + " " ) + ( parameters + " " );
  end if;
  te_val.buffer = te_val.buffer + ")";
  te_val.dimensions = te_aba.dimensions;
  te_val.array_spec = te_aba.array_spec;
  select one te_dim related by te_aba->TE_DIM[R2058];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
end if;
@@@
val_array_element_references@void@@@
//
select many v_aers from instances of V_AER;
for each v_aer in v_aers
  ::val_array_element_reference( v_aer:v_aer );
end for;
@@@
val_array_element_reference@void@@v_aer@inst_ref<Array Element Reference>@@@
//
v_aer = param.v_aer;
select one te_val related by v_aer->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_aer->V_VAL[R838];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  select one index_v_val related by v_aer->V_VAL[R839];
  select one index_te_val related by index_v_val->TE_VAL[R2040];
  if ( "" == index_te_val.buffer )
    ::gen_value( v_val:index_v_val );
  end if;
  te_val.OAL = ( root_te_val.OAL + "[" ) + ( index_te_val.buffer + "]" );
  te_val.buffer = ( root_te_val.buffer + "[" ) + ( index_te_val.buffer + "]" );
  // Peel off outer layer of dimensions.
  // CDS:  do not know how to do this with array_spec
  te_val.array_spec = root_te_val.array_spec;
  te_val.dimensions = root_te_val.dimensions - 1;
  select one next_te_dim related by root_te_val->TE_DIM[R2079]->TE_DIM[R2060.'precedes'];
  if ( not_empty next_te_dim )
    relate te_val to next_te_dim across R2079;
  else
      end if;
end if;
@@@
val_array_length_values@void@@@
//
select many v_alvs from instances of V_ALV;
for each v_alv in v_alvs
  ::val_array_length_value( v_alv:v_alv );
end for;
@@@
val_array_length_value@void@@v_alv@inst_ref<Array Length Value>@@@
//
v_alv = param.v_alv;
select one te_val related by v_alv->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_alv->V_VAL[R840];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  te_val.OAL = root_te_val.OAL + ".length";
  select any te_target from instances of TE_TARGET;
  if ( "C" == te_target.language )
    select one te_dim related by root_te_val->TE_DIM[R2079];
    if ( not_empty te_dim )
      te_val.buffer = ( ( ( T::s(i:te_dim.elementCount) + " /" ) + ( "* " + te_val.OAL ) ) + ( " *" + "/" ) );
    else
      te_val.buffer = root_te_val.buffer + ".ARRAY_LENGTH_NOT_FOUND()";
      T::print(s:"ERROR:  C model compiler does not support length operator for OAL value:  ${te_val.OAL}");
      T::exit(i:101);
    end if;
  else
    te_val.buffer = root_te_val.buffer + ".length";
  end if;
end if;
@@@
